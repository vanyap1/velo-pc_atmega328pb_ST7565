
velo-pc_atmega328pb_ST7565.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00003790  00003824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000050d  008001ba  008001ba  000038de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000038de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000393c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002ca0  00000000  00000000  0000397c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005c4d8  00000000  00000000  0000661c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003078  00000000  00000000  00062af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00010949  00000000  00000000  00065b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00011270  00000000  00000000  000764b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00015303  00000000  00000000  00087728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0006b110  00000000  00000000  0009ca2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002b68  00000000  00000000  00107b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__ctors_end>
       4:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__vector_1>
       8:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__vector_2>
       c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      10:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      14:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      18:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      1c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      20:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      24:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      28:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      2c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      30:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      34:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      38:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      3c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      40:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      44:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      48:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__vector_18>
      4c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      50:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__vector_20>
      54:	0c 94 05 10 	jmp	0x200a	; 0x200a <__vector_21>
      58:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      5c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      60:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      64:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      68:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      6c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      70:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      74:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      78:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      7c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      80:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      84:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      88:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      8c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      90:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      94:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      98:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      9c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      a0:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__vector_40>
      a4:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      a8:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      ac:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>
      b0:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	6e 61       	ori	r22, 0x1E	; 30
      b6:	6e 00       	.word	0x006e	; ????

000000b8 <__c.2332>:
      b8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     108:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     118:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     128:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     138:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     148:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     158:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     168:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     178:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     188:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     198:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b6 <u8g2_font_freedoomr25_mn>:
     1b6:	10 02 05 05 05 05 01 01 06 13 1a 00 00 1a 00 1a     ................
     1c6:	00 00 00 00 00 01 a5 20 09 53 3f 7f f0 ff eb 00     ....... .S?.....
     1d6:	2b 13 53 3f 7f 90 1d e0 f8 52 24 a2 34 c0 f1 7d     +.S?.....R$.4..}
     1e6:	b0 0e 00 2c 10 53 3f 7f f0 cf 17 ae 1c 23 1e e9     ...,.S?......#..
     1f6:	03 13 00 2d 0d 53 3f 7f f0 e1 44 25 1f fc 21 00     ...-.S?...D%..!.
     206:	2e 0d 53 3f 7f f0 bf 5c b8 72 1f 80 00 30 40 53     ..S?...\.r...0@S
     216:	3f 87 48 44 42 60 83 10 d8 20 04 36 08 81 0d 42     ?.HDB`... .6...B
     226:	60 83 10 d8 20 04 36 08 81 0d 42 60 83 10 d8 20     `... .6...B`... 
     236:	04 36 08 81 0d 42 60 83 10 d8 20 04 36 08 81 0d     .6...B`... .6...
     246:	42 60 83 10 d8 20 04 36 88 b8 0f 20 00 31 0e 53     B`... .6... .1.S
     256:	3f 1f a3 19 70 fc ff 7f 1f 68 00 32 14 53 3f 87     ?...p....h.2.S?.
     266:	48 44 70 fc 13 31 21 44 f1 8b 91 88 7d 00 01 33     HDp..1!D....}..3
     276:	12 53 3f 87 48 44 70 fc 2b 2e 38 fe 44 dc 07 10     .S?.HDp.+.8.D...
     286:	00 34 2a 53 3f 07 81 0d 42 60 83 10 d8 20 04 36     .4*S?...B`... .6
     296:	08 81 0d 42 60 83 10 d8 20 04 36 08 81 0d 42 60     ...B`... .6...B`
     2a6:	83 10 d8 20 62 70 fc ef 03 08 00 35 14 53 3f 87     ... bp.....5.S?.
     2b6:	48 44 42 88 e2 2f 46 22 82 e3 4f c4 7d 00 01 36     HDB../F"..O.}..6
     2c6:	28 53 3f 87 48 44 42 88 e2 2f 46 22 12 02 1b 84     (S?.HDB../F"....
     2d6:	c0 06 21 b0 41 08 6c 10 02 1b 84 c0 06 21 b0 41     ..!.A.l......!.A
     2e6:	08 6c 10 71 1f 40 00 37 0e 53 3f 0b 68 40 70 fc     .l.q.@.7.S?.h@p.
     2f6:	ff 7f 1f 40 00 38 3c 53 3f 87 48 44 42 60 83 10     ...@.8<S?.HDB`..
     306:	d8 20 04 36 08 81 0d 42 60 83 10 d8 20 04 36 08     . .6...B`... .6.
     316:	81 0d 42 60 83 88 09 81 0d 42 60 83 10 d8 20 04     ..B`.....B`... .
     326:	36 08 81 0d 42 60 83 10 d8 20 04 36 88 b8 0f 20     6...B`... .6... 
     336:	00 39 28 53 3f 87 48 44 42 60 83 10 d8 20 04 36     .9(S?.HDB`... .6
     346:	08 81 0d 42 60 83 10 d8 20 04 36 08 81 0d 42 60     ...B`... .6...B`
     356:	83 88 c1 f1 27 e2 3e 80 00 3a 11 53 3f 7f f0 44     ....'.>..:.S?..D
     366:	e1 ca 7d 70 a4 70 e5 3e 00 01 00 00 00 04 ff ff     ..}p.p.>........
	...

00000378 <u8g2_font_freedoomr10_mu>:
     378:	40 02 03 02 04 04 01 02 05 08 0b 00 01 0c 00 0c     @...............
     388:	02 01 4e 00 00 03 4d 20 07 b8 c7 e7 ff 08 21 07     ..N...M ......!.
     398:	b8 c7 e7 ff 08 22 07 b8 c7 e7 ff 08 23 07 b8 c7     ....."......#...
     3a8:	e7 ff 08 24 07 b8 c7 e7 ff 08 25 07 b8 c7 e7 ff     ...$......%.....
     3b8:	08 26 07 b8 c7 e7 ff 08 27 07 b8 c7 e7 ff 08 28     .&......'......(
     3c8:	0a b8 c7 51 f3 7e 47 74 18 29 0a b8 c7 d3 91 bc     ...Q.~Gt.)......
     3d8:	5f 75 10 2a 0c b8 c7 69 9c e3 31 a9 f3 0b 00 2b     _u.*...i..1....+
     3e8:	0c b8 c7 07 f3 e2 30 84 79 9d 03 2c 08 b8 c7 8b     ......0.y..,....
     3f8:	73 fe 07 2d 09 b8 c7 e7 38 0c 39 3f 2e 09 b8 c7     s..-....8.9?....
     408:	e7 df 64 1d 05 2f 0c b8 c7 ae c7 f5 b8 1e e7 14     ..d../..........
     418:	00 30 14 b8 c7 38 85 51 18 85 51 18 85 51 18 85     .0...8.Q..Q..Q..
     428:	51 18 0d 3b 06 31 08 b8 c7 d4 fb 77 0c 32 0d b8     Q..;.1.....w.2..
     438:	c7 b8 77 1a a6 bc 3e ec 18 00 33 0c b8 c7 b8 37     ..w...>...3....7
     448:	0e 79 a7 61 c7 00 34 10 b8 c7 08 a3 30 0a a3 30     .y.a..4.....0..0
     458:	0a a3 61 ef 8e 01 35 0d b8 c7 38 e5 f5 61 ef 34     ..a...5...8..a.4
     468:	ec 18 00 36 11 b8 c7 38 e5 f5 61 0a a3 30 0a a3     ...6...8..a..0..
     478:	30 1a 76 0c 37 09 b8 c7 b8 f7 ef 18 00 38 14 b8     0.v.7........8..
     488:	c7 38 85 51 18 85 d1 30 85 51 18 85 51 18 0d 3b     .8.Q...0.Q..Q..;
     498:	06 39 0f b8 c7 38 85 51 18 85 d1 b0 77 1a 76 0c     .9...8.Q....w.v.
     4a8:	3a 0b b8 c7 67 95 75 4e b2 8e 02 3b 07 b8 c7 e7     :...g.uN...;....
     4b8:	ff 08 3c 07 b8 c7 e7 ff 08 3d 07 b8 c7 e7 ff 08     ..<......=......
     4c8:	3e 07 b8 c7 e7 ff 08 3f 07 b8 c7 e7 ff 08 40 07     >......?......@.
     4d8:	b8 c7 e7 ff 08 41 16 b8 c7 38 24 69 92 26 69 92     .....A...8$i.&i.
     4e8:	26 c3 90 a4 49 9a a4 49 9a 43 00 42 16 b8 c7 38     &...I..I.C.B...8
     4f8:	24 69 92 26 69 32 4c 69 92 26 69 92 26 c3 90 43     $i.&i2Li.&i.&..C
     508:	00 43 0c b8 c7 38 24 79 bf 0f 43 0e 01 44 14 b8     .C...8$y..C..D..
     518:	c7 38 a5 49 9a a4 49 9a a4 49 9a a4 49 9a 0c 3b     .8.I..I..I..I..;
     528:	06 45 0f b8 c7 38 24 79 7d d0 f2 f6 61 c8 21 00     .E...8$y}...a.!.
     538:	46 0d b8 c7 38 24 79 7d d0 f2 ee 14 00 47 13 b8     F...8$y}.....G..
     548:	c7 38 24 79 d3 90 a4 49 9a a4 49 9a 0c 43 0e 01     .8$y...I..I..C..
     558:	48 16 b8 c7 48 93 34 49 93 34 19 86 24 4d d2 24     H...H.4I.4..$M.$
     568:	4d d2 24 cd 21 00 49 08 b8 c7 cb fb 77 14 4a 0f     M.$.!.I.....w.J.
     578:	b8 c7 1b f2 5e d2 24 4d d2 68 d0 31 00 4b 13 b8     ....^.$M.h.1.K..
     588:	c7 48 93 30 ca 4a e1 9a a4 51 98 15 a3 34 87 00     .H.0.J...Q...4..
     598:	4c 0b b8 c7 c8 fb fb 30 e4 10 00 4d 14 b8 c7 48     L......0...M...H
     5a8:	13 4d e9 a9 92 26 69 92 26 69 92 26 69 0e 01 4e     .M...&i.&i.&i..N
     5b8:	16 b8 c7 10 13 31 a9 25 b5 24 aa 44 95 2c a9 25     .....1.%.$.D.,.%
     5c8:	45 25 d4 21 00 4f 15 b8 c7 19 a4 34 49 93 34 49     E%.!.O.....4I.4I
     5d8:	93 34 49 93 34 49 a3 41 c7 00 50 10 b8 c7 38 24     .4I.4I.A..P...8$
     5e8:	69 92 26 69 32 0c 49 de 9d 02 51 15 b8 c7 19 b2     i.&i2.I...Q.....
     5f8:	30 0a a3 30 0a a3 30 0a a3 30 0a b3 61 87 00 52     0..0..0..0..a..R
     608:	15 b8 c7 38 24 69 92 26 69 32 0c 49 35 0a b3 62     ...8$i.&i2.I5..b
     618:	94 e6 10 00 53 0f b8 c7 38 24 79 fb 30 e4 2d c3     ....S...8$y.0.-.
     628:	90 43 00 54 0a b8 c7 38 84 79 bf 93 01 55 16 b8     .C.T...8.y...U..
     638:	c7 48 93 34 49 93 34 49 93 34 49 93 34 49 93 61     .H.4I.4I.4I.4I.a
     648:	c8 21 00 56 12 b8 c7 48 93 34 49 a3 ac 4d 11 93     .!.V...H.4I..M..
     658:	34 89 f3 1c 05 57 14 b8 c7 48 93 34 49 93 34 49     4....W...H.4I.4I
     668:	93 a8 12 55 fa 8b a6 43 00 58 11 b8 c7 48 a3 ac     ...U...C.X...H..
     678:	31 89 f3 38 09 b3 a6 34 87 00 59 10 b8 c7 48 93     1..8...4..Y...H.
     688:	34 49 93 34 19 86 30 ef 8e 02 5a 0d b8 c7 38 e4     4I.4..0...Z...8.
     698:	b1 ea 73 3e 0c 39 04 5b 0b b8 c7 18 c2 bc df 87     ..s>.9.[........
     6a8:	1c 05 5c 11 b8 c7 c8 91 3c 47 f2 1c c9 73 24 cf     ..\.....<G...s$.
     6b8:	91 1c 03 5d 0b b8 c7 1a f2 fe 38 e4 18 00 5e 0b     ...]......8...^.
     6c8:	b8 c7 8b 93 30 cb f9 37 00 5f 09 b8 c7 e7 3f 0d     ....0..7._....?.
     6d8:	3b 06 00 00 00 04 ff ff 00 00                       ;.........

000006e2 <__ctors_end>:
     6e2:	11 24       	eor	r1, r1
     6e4:	1f be       	out	0x3f, r1	; 63
     6e6:	cf ef       	ldi	r28, 0xFF	; 255
     6e8:	d8 e0       	ldi	r29, 0x08	; 8
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	cd bf       	out	0x3d, r28	; 61

000006ee <__do_copy_data>:
     6ee:	11 e0       	ldi	r17, 0x01	; 1
     6f0:	a0 e0       	ldi	r26, 0x00	; 0
     6f2:	b1 e0       	ldi	r27, 0x01	; 1
     6f4:	e0 e9       	ldi	r30, 0x90	; 144
     6f6:	f7 e3       	ldi	r31, 0x37	; 55
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__do_copy_data+0x10>
     6fa:	05 90       	lpm	r0, Z+
     6fc:	0d 92       	st	X+, r0
     6fe:	aa 3b       	cpi	r26, 0xBA	; 186
     700:	b1 07       	cpc	r27, r17
     702:	d9 f7       	brne	.-10     	; 0x6fa <__do_copy_data+0xc>

00000704 <__do_clear_bss>:
     704:	26 e0       	ldi	r18, 0x06	; 6
     706:	aa eb       	ldi	r26, 0xBA	; 186
     708:	b1 e0       	ldi	r27, 0x01	; 1
     70a:	01 c0       	rjmp	.+2      	; 0x70e <.do_clear_bss_start>

0000070c <.do_clear_bss_loop>:
     70c:	1d 92       	st	X+, r1

0000070e <.do_clear_bss_start>:
     70e:	a7 3c       	cpi	r26, 0xC7	; 199
     710:	b2 07       	cpc	r27, r18
     712:	e1 f7       	brne	.-8      	; 0x70c <.do_clear_bss_loop>
     714:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <main>
     718:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <_exit>

0000071c <__bad_interrupt>:
     71c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000720 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
     720:	2f 92       	push	r2
     722:	3f 92       	push	r3
     724:	4f 92       	push	r4
     726:	5f 92       	push	r5
     728:	6f 92       	push	r6
     72a:	7f 92       	push	r7
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	28 97       	sbiw	r28, 0x08	; 8
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	98 87       	std	Y+8, r25	; 0x08
     756:	8f 83       	std	Y+7, r24	; 0x07
     758:	6b 01       	movw	r12, r22
     75a:	5a 01       	movw	r10, r20
     75c:	39 01       	movw	r6, r18
     75e:	28 01       	movw	r4, r16
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
     760:	1a 01       	movw	r2, r20
     762:	20 0e       	add	r2, r16
     764:	31 1e       	adc	r3, r17
     766:	4b 01       	movw	r8, r22
     768:	82 0e       	add	r8, r18
     76a:	93 1e       	adc	r9, r19
     76c:	81 01       	movw	r16, r2
     76e:	94 01       	movw	r18, r8
     770:	0e 94 2f 0b 	call	0x165e	; 0x165e <u8g2_IsIntersection>
     774:	88 23       	and	r24, r24
     776:	09 f4       	brne	.+2      	; 0x77a <u8g2_DrawRFrame+0x5a>
     778:	84 c0       	rjmp	.+264    	; 0x882 <__DATA_REGION_LENGTH__+0x82>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
     77a:	96 01       	movw	r18, r12
     77c:	2e 0d       	add	r18, r14
     77e:	3f 1d       	adc	r19, r15
     780:	3a 83       	std	Y+2, r19	; 0x02
     782:	29 83       	std	Y+1, r18	; 0x01
  yu = y;
  yu += r;
     784:	c5 01       	movw	r24, r10
     786:	8e 0d       	add	r24, r14
     788:	9f 1d       	adc	r25, r15
     78a:	9c 83       	std	Y+4, r25	; 0x04
     78c:	8b 83       	std	Y+3, r24	; 0x03
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
     78e:	8e 18       	sub	r8, r14
     790:	9f 08       	sbc	r9, r15
    xr -= 1;
     792:	94 01       	movw	r18, r8
     794:	21 50       	subi	r18, 0x01	; 1
     796:	31 09       	sbc	r19, r1
     798:	3e 83       	std	Y+6, r19	; 0x06
     79a:	2d 83       	std	Y+5, r18	; 0x05
    
    yl = y;
    yl += h;
    yl -= r; 
     79c:	41 01       	movw	r8, r2
     79e:	8e 18       	sub	r8, r14
     7a0:	9f 08       	sbc	r9, r15
    yl -= 1;
     7a2:	31 e0       	ldi	r19, 0x01	; 1
     7a4:	83 1a       	sub	r8, r19
     7a6:	91 08       	sbc	r9, r1

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
     7a8:	02 e0       	ldi	r16, 0x02	; 2
     7aa:	97 01       	movw	r18, r14
     7ac:	ac 01       	movw	r20, r24
     7ae:	69 81       	ldd	r22, Y+1	; 0x01
     7b0:	7a 81       	ldd	r23, Y+2	; 0x02
     7b2:	8f 81       	ldd	r24, Y+7	; 0x07
     7b4:	98 85       	ldd	r25, Y+8	; 0x08
     7b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
     7ba:	01 e0       	ldi	r16, 0x01	; 1
     7bc:	97 01       	movw	r18, r14
     7be:	4b 81       	ldd	r20, Y+3	; 0x03
     7c0:	5c 81       	ldd	r21, Y+4	; 0x04
     7c2:	6d 81       	ldd	r22, Y+5	; 0x05
     7c4:	7e 81       	ldd	r23, Y+6	; 0x06
     7c6:	8f 81       	ldd	r24, Y+7	; 0x07
     7c8:	98 85       	ldd	r25, Y+8	; 0x08
     7ca:	0e 94 9b 05 	call	0xb36	; 0xb36 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
     7ce:	04 e0       	ldi	r16, 0x04	; 4
     7d0:	97 01       	movw	r18, r14
     7d2:	a4 01       	movw	r20, r8
     7d4:	69 81       	ldd	r22, Y+1	; 0x01
     7d6:	7a 81       	ldd	r23, Y+2	; 0x02
     7d8:	8f 81       	ldd	r24, Y+7	; 0x07
     7da:	98 85       	ldd	r25, Y+8	; 0x08
     7dc:	0e 94 9b 05 	call	0xb36	; 0xb36 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
     7e0:	08 e0       	ldi	r16, 0x08	; 8
     7e2:	97 01       	movw	r18, r14
     7e4:	a4 01       	movw	r20, r8
     7e6:	6d 81       	ldd	r22, Y+5	; 0x05
     7e8:	7e 81       	ldd	r23, Y+6	; 0x06
     7ea:	8f 81       	ldd	r24, Y+7	; 0x07
     7ec:	98 85       	ldd	r25, Y+8	; 0x08
     7ee:	0e 94 9b 05 	call	0xb36	; 0xb36 <u8g2_DrawCircle>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
     7f2:	83 01       	movw	r16, r6
     7f4:	0e 19       	sub	r16, r14
     7f6:	1f 09       	sbc	r17, r15
    ww -= r;
     7f8:	0e 19       	sub	r16, r14
     7fa:	1f 09       	sbc	r17, r15
    hh = h;
    hh -= r;
     7fc:	c2 01       	movw	r24, r4
     7fe:	8e 19       	sub	r24, r14
     800:	9f 09       	sbc	r25, r15
    hh -= r;
     802:	9c 01       	movw	r18, r24
     804:	2e 19       	sub	r18, r14
     806:	3f 09       	sbc	r19, r15
     808:	79 01       	movw	r14, r18
    
    xl++;
     80a:	29 80       	ldd	r2, Y+1	; 0x01
     80c:	3a 80       	ldd	r3, Y+2	; 0x02
     80e:	3f ef       	ldi	r19, 0xFF	; 255
     810:	23 1a       	sub	r2, r19
     812:	33 0a       	sbc	r3, r19
    yu++;
     814:	8b 80       	ldd	r8, Y+3	; 0x03
     816:	9c 80       	ldd	r9, Y+4	; 0x04
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	88 1a       	sub	r8, r24
     81c:	98 0a       	sbc	r9, r24
    
    if ( ww >= 3 )
     81e:	03 30       	cpi	r16, 0x03	; 3
     820:	11 05       	cpc	r17, r1
     822:	a8 f0       	brcs	.+42     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
    {
      ww -= 2;
     824:	02 50       	subi	r16, 0x02	; 2
     826:	11 09       	sbc	r17, r1
      h--;
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	49 1a       	sub	r4, r25
     82c:	51 08       	sbc	r5, r1
      u8g2_DrawHLine(u8g2, xl, y, ww);
     82e:	98 01       	movw	r18, r16
     830:	a5 01       	movw	r20, r10
     832:	b1 01       	movw	r22, r2
     834:	8f 81       	ldd	r24, Y+7	; 0x07
     836:	98 85       	ldd	r25, Y+8	; 0x08
     838:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
     83c:	a5 01       	movw	r20, r10
     83e:	44 0d       	add	r20, r4
     840:	55 1d       	adc	r21, r5
     842:	98 01       	movw	r18, r16
     844:	b1 01       	movw	r22, r2
     846:	8f 81       	ldd	r24, Y+7	; 0x07
     848:	98 85       	ldd	r25, Y+8	; 0x08
     84a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
     84e:	23 e0       	ldi	r18, 0x03	; 3
     850:	e2 16       	cp	r14, r18
     852:	f1 04       	cpc	r15, r1
     854:	b0 f0       	brcs	.+44     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
    {
      hh -= 2;
     856:	32 e0       	ldi	r19, 0x02	; 2
     858:	e3 1a       	sub	r14, r19
     85a:	f1 08       	sbc	r15, r1
      w--;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	68 1a       	sub	r6, r24
     860:	71 08       	sbc	r7, r1
      u8g2_DrawVLine(u8g2, x, yu, hh);
     862:	97 01       	movw	r18, r14
     864:	a4 01       	movw	r20, r8
     866:	b6 01       	movw	r22, r12
     868:	8f 81       	ldd	r24, Y+7	; 0x07
     86a:	98 85       	ldd	r25, Y+8	; 0x08
     86c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
     870:	b6 01       	movw	r22, r12
     872:	66 0d       	add	r22, r6
     874:	77 1d       	adc	r23, r7
     876:	97 01       	movw	r18, r14
     878:	a4 01       	movw	r20, r8
     87a:	8f 81       	ldd	r24, Y+7	; 0x07
     87c:	98 85       	ldd	r25, Y+8	; 0x08
     87e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <u8g2_DrawVLine>
    }
  }
}
     882:	28 96       	adiw	r28, 0x08	; 8
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	5f 90       	pop	r5
     8ac:	4f 90       	pop	r4
     8ae:	3f 90       	pop	r3
     8b0:	2f 90       	pop	r2
     8b2:	08 95       	ret

000008b4 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     8b8:	dc 01       	movw	r26, r24
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	11 97       	sbiw	r26, 0x01	; 1
     8c0:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     8c2:	92 96       	adiw	r26, 0x22	; 34
     8c4:	0d 91       	ld	r16, X+
     8c6:	1c 91       	ld	r17, X
     8c8:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
     8ca:	62 9f       	mul	r22, r18
     8cc:	b0 01       	movw	r22, r0
     8ce:	11 24       	eor	r1, r1
  offset *= 8;
     8d0:	66 0f       	add	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	66 0f       	add	r22, r22
     8d6:	77 1f       	adc	r23, r23
     8d8:	66 0f       	add	r22, r22
     8da:	77 1f       	adc	r23, r23
  ptr += offset;
     8dc:	06 0f       	add	r16, r22
     8de:	17 1f       	adc	r17, r23
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <u8x8_DrawTile>
}
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	8c 01       	movw	r16, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     8fa:	dc 01       	movw	r26, r24
     8fc:	94 96       	adiw	r26, 0x24	; 36
     8fe:	fc 90       	ld	r15, X
     900:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
     902:	95 96       	adiw	r26, 0x25	; 37
     904:	dc 91       	ld	r29, X
     906:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	e1 88       	ldd	r14, Z+17	; 0x11
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
     90e:	c0 e0       	ldi	r28, 0x00	; 0
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     910:	4d 2f       	mov	r20, r29
     912:	6c 2f       	mov	r22, r28
     914:	c8 01       	movw	r24, r16
     916:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <u8g2_send_tile_row>
    src_row++;
     91a:	cf 5f       	subi	r28, 0xFF	; 255
    dest_row++;
     91c:	df 5f       	subi	r29, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     91e:	cf 15       	cp	r28, r15
     920:	10 f4       	brcc	.+4      	; 0x926 <__stack+0x27>
     922:	de 15       	cp	r29, r14
     924:	a8 f3       	brcs	.-22     	; 0x910 <__stack+0x11>
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	08 95       	ret

00000934 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     934:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     936:	a0 81       	ld	r26, Z
     938:	b1 81       	ldd	r27, Z+1	; 0x01
     93a:	50 96       	adiw	r26, 0x10	; 16
     93c:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     93e:	44 a1       	ldd	r20, Z+36	; 0x24
     940:	94 9f       	mul	r25, r20
     942:	a0 01       	movw	r20, r0
     944:	11 24       	eor	r1, r1
  cnt *= 8;
     946:	44 0f       	add	r20, r20
     948:	55 1f       	adc	r21, r21
     94a:	44 0f       	add	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	44 0f       	add	r20, r20
     950:	55 1f       	adc	r21, r21
  memset(u8g2->tile_buf_ptr, 0, cnt);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	82 a1       	ldd	r24, Z+34	; 0x22
     958:	93 a1       	ldd	r25, Z+35	; 0x23
     95a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <memset>
     95e:	08 95       	ret

00000960 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     966:	0e 94 76 04 	call	0x8ec	; 0x8ec <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     96a:	ce 01       	movw	r24, r28
     96c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <u8x8_RefreshDisplay>
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <u8g2_draw_circle_section>:
      err += ychg;
      ychg += rxrx2;
    }
  }
  
}
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	5c 01       	movw	r10, r24
     98e:	6b 01       	movw	r12, r22
     990:	4a 01       	movw	r8, r20
     992:	e9 01       	movw	r28, r18
     994:	e0 fe       	sbrs	r14, 0
     996:	11 c0       	rjmp	.+34     	; 0x9ba <u8g2_draw_circle_section+0x44>
     998:	a8 01       	movw	r20, r16
     99a:	48 19       	sub	r20, r8
     99c:	59 09       	sbc	r21, r9
     99e:	b9 01       	movw	r22, r18
     9a0:	6c 0d       	add	r22, r12
     9a2:	7d 1d       	adc	r23, r13
     9a4:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <u8g2_DrawPixel>
     9a8:	a8 01       	movw	r20, r16
     9aa:	4c 19       	sub	r20, r12
     9ac:	5d 09       	sbc	r21, r13
     9ae:	b4 01       	movw	r22, r8
     9b0:	6c 0f       	add	r22, r28
     9b2:	7d 1f       	adc	r23, r29
     9b4:	c5 01       	movw	r24, r10
     9b6:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <u8g2_DrawPixel>
     9ba:	e1 fe       	sbrs	r14, 1
     9bc:	12 c0       	rjmp	.+36     	; 0x9e2 <u8g2_draw_circle_section+0x6c>
     9be:	a8 01       	movw	r20, r16
     9c0:	48 19       	sub	r20, r8
     9c2:	59 09       	sbc	r21, r9
     9c4:	be 01       	movw	r22, r28
     9c6:	6c 19       	sub	r22, r12
     9c8:	7d 09       	sbc	r23, r13
     9ca:	c5 01       	movw	r24, r10
     9cc:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <u8g2_DrawPixel>
     9d0:	a8 01       	movw	r20, r16
     9d2:	4c 19       	sub	r20, r12
     9d4:	5d 09       	sbc	r21, r13
     9d6:	be 01       	movw	r22, r28
     9d8:	68 19       	sub	r22, r8
     9da:	79 09       	sbc	r23, r9
     9dc:	c5 01       	movw	r24, r10
     9de:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <u8g2_DrawPixel>
     9e2:	e3 fe       	sbrs	r14, 3
     9e4:	12 c0       	rjmp	.+36     	; 0xa0a <u8g2_draw_circle_section+0x94>
     9e6:	a8 01       	movw	r20, r16
     9e8:	48 0d       	add	r20, r8
     9ea:	59 1d       	adc	r21, r9
     9ec:	be 01       	movw	r22, r28
     9ee:	6c 0d       	add	r22, r12
     9f0:	7d 1d       	adc	r23, r13
     9f2:	c5 01       	movw	r24, r10
     9f4:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <u8g2_DrawPixel>
     9f8:	a8 01       	movw	r20, r16
     9fa:	4c 0d       	add	r20, r12
     9fc:	5d 1d       	adc	r21, r13
     9fe:	b4 01       	movw	r22, r8
     a00:	6c 0f       	add	r22, r28
     a02:	7d 1f       	adc	r23, r29
     a04:	c5 01       	movw	r24, r10
     a06:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <u8g2_DrawPixel>
     a0a:	e2 fe       	sbrs	r14, 2
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <u8g2_draw_circle_section+0xbc>
     a0e:	a8 01       	movw	r20, r16
     a10:	48 0d       	add	r20, r8
     a12:	59 1d       	adc	r21, r9
     a14:	be 01       	movw	r22, r28
     a16:	6c 19       	sub	r22, r12
     a18:	7d 09       	sbc	r23, r13
     a1a:	c5 01       	movw	r24, r10
     a1c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <u8g2_DrawPixel>
     a20:	a8 01       	movw	r20, r16
     a22:	4c 0d       	add	r20, r12
     a24:	5d 1d       	adc	r21, r13
     a26:	be 01       	movw	r22, r28
     a28:	68 19       	sub	r22, r8
     a2a:	79 09       	sbc	r23, r9
     a2c:	c5 01       	movw	r24, r10
     a2e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <u8g2_DrawPixel>
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	9f 90       	pop	r9
     a46:	8f 90       	pop	r8
     a48:	08 95       	ret

00000a4a <u8g2_draw_circle>:
     a4a:	2f 92       	push	r2
     a4c:	3f 92       	push	r3
     a4e:	4f 92       	push	r4
     a50:	5f 92       	push	r5
     a52:	6f 92       	push	r6
     a54:	7f 92       	push	r7
     a56:	8f 92       	push	r8
     a58:	9f 92       	push	r9
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <u8g2_draw_circle+0x26>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <u8g2_draw_circle+0x28>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	2c 01       	movw	r4, r24
     a78:	7a 83       	std	Y+2, r23	; 0x02
     a7a:	69 83       	std	Y+1, r22	; 0x01
     a7c:	1a 01       	movw	r2, r20
     a7e:	59 01       	movw	r10, r18
     a80:	f0 2e       	mov	r15, r16
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	82 1b       	sub	r24, r18
     a88:	93 0b       	sbc	r25, r19
     a8a:	9c 83       	std	Y+4, r25	; 0x04
     a8c:	8b 83       	std	Y+3, r24	; 0x03
     a8e:	66 24       	eor	r6, r6
     a90:	77 24       	eor	r7, r7
     a92:	62 1a       	sub	r6, r18
     a94:	73 0a       	sbc	r7, r19
     a96:	66 0c       	add	r6, r6
     a98:	77 1c       	adc	r7, r7
     a9a:	e0 2e       	mov	r14, r16
     a9c:	8a 01       	movw	r16, r20
     a9e:	9b 01       	movw	r18, r22
     aa0:	a5 01       	movw	r20, r10
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	c2 01       	movw	r24, r4
     aa8:	0e 94 bb 04 	call	0x976	; 0x976 <u8g2_draw_circle_section>
     aac:	c1 2c       	mov	r12, r1
     aae:	d1 2c       	mov	r13, r1
     ab0:	88 24       	eor	r8, r8
     ab2:	83 94       	inc	r8
     ab4:	91 2c       	mov	r9, r1
     ab6:	25 c0       	rjmp	.+74     	; 0xb02 <u8g2_draw_circle+0xb8>
     ab8:	8b 81       	ldd	r24, Y+3	; 0x03
     aba:	9c 81       	ldd	r25, Y+4	; 0x04
     abc:	99 23       	and	r25, r25
     abe:	64 f0       	brlt	.+24     	; 0xad8 <u8g2_draw_circle+0x8e>
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	a9 1a       	sub	r10, r25
     ac4:	b1 08       	sbc	r11, r1
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	68 0e       	add	r6, r24
     aca:	71 1c       	adc	r7, r1
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	9c 81       	ldd	r25, Y+4	; 0x04
     ad0:	86 0d       	add	r24, r6
     ad2:	97 1d       	adc	r25, r7
     ad4:	9c 83       	std	Y+4, r25	; 0x04
     ad6:	8b 83       	std	Y+3, r24	; 0x03
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	c9 1a       	sub	r12, r25
     adc:	d9 0a       	sbc	r13, r25
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	88 0e       	add	r8, r24
     ae2:	91 1c       	adc	r9, r1
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	88 0d       	add	r24, r8
     aea:	99 1d       	adc	r25, r9
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
     af0:	ef 2c       	mov	r14, r15
     af2:	81 01       	movw	r16, r2
     af4:	29 81       	ldd	r18, Y+1	; 0x01
     af6:	3a 81       	ldd	r19, Y+2	; 0x02
     af8:	a5 01       	movw	r20, r10
     afa:	b6 01       	movw	r22, r12
     afc:	c2 01       	movw	r24, r4
     afe:	0e 94 bb 04 	call	0x976	; 0x976 <u8g2_draw_circle_section>
     b02:	ca 14       	cp	r12, r10
     b04:	db 04       	cpc	r13, r11
     b06:	c0 f2       	brcs	.-80     	; 0xab8 <u8g2_draw_circle+0x6e>
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	7f 90       	pop	r7
     b2a:	6f 90       	pop	r6
     b2c:	5f 90       	pop	r5
     b2e:	4f 90       	pop	r4
     b30:	3f 90       	pop	r3
     b32:	2f 90       	pop	r2
     b34:	08 95       	ret

00000b36 <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
     b36:	9f 92       	push	r9
     b38:	af 92       	push	r10
     b3a:	bf 92       	push	r11
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	5c 01       	movw	r10, r24
     b4e:	7b 01       	movw	r14, r22
     b50:	6a 01       	movw	r12, r20
     b52:	e9 01       	movw	r28, r18
     b54:	90 2e       	mov	r9, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
     b56:	8a 01       	movw	r16, r20
     b58:	02 0f       	add	r16, r18
     b5a:	13 1f       	adc	r17, r19
     b5c:	26 0f       	add	r18, r22
     b5e:	37 1f       	adc	r19, r23
     b60:	0f 5f       	subi	r16, 0xFF	; 255
     b62:	1f 4f       	sbci	r17, 0xFF	; 255
     b64:	2f 5f       	subi	r18, 0xFF	; 255
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	4c 1b       	sub	r20, r28
     b6a:	5d 0b       	sbc	r21, r29
     b6c:	6c 1b       	sub	r22, r28
     b6e:	7d 0b       	sbc	r23, r29
     b70:	0e 94 2f 0b 	call	0x165e	; 0x165e <u8g2_IsIntersection>
     b74:	88 23       	and	r24, r24
     b76:	39 f0       	breq	.+14     	; 0xb86 <u8g2_DrawCircle+0x50>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
     b78:	09 2d       	mov	r16, r9
     b7a:	9e 01       	movw	r18, r28
     b7c:	a6 01       	movw	r20, r12
     b7e:	b7 01       	movw	r22, r14
     b80:	c5 01       	movw	r24, r10
     b82:	0e 94 25 05 	call	0xa4a	; 0xa4a <u8g2_draw_circle>
}
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	08 95       	ret

00000b9e <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     b9e:	28 e0       	ldi	r18, 0x08	; 8
     ba0:	fc 01       	movw	r30, r24
     ba2:	20 83       	st	Z, r18
  return buf;
  #endif
}
     ba4:	8a eb       	ldi	r24, 0xBA	; 186
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	08 95       	ret

00000baa <u8g2_Setup_st7565_zolen_128x64_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_zolen_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	1f 92       	push	r1
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	7c 01       	movw	r14, r24
     bc2:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_zolen_128x64, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
     bc4:	89 01       	movw	r16, r18
     bc6:	9a 01       	movw	r18, r20
     bc8:	4f e1       	ldi	r20, 0x1F	; 31
     bca:	5e e0       	ldi	r21, 0x0E	; 14
     bcc:	67 e7       	ldi	r22, 0x77	; 119
     bce:	7f e0       	ldi	r23, 0x0F	; 15
     bd0:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     bdc:	86 01       	movw	r16, r12
     bde:	24 e5       	ldi	r18, 0x54	; 84
     be0:	3b e0       	ldi	r19, 0x0B	; 11
     be2:	49 81       	ldd	r20, Y+1	; 0x01
     be4:	bc 01       	movw	r22, r24
     be6:	c7 01       	movw	r24, r14
     be8:	0e 94 97 0c 	call	0x192e	; 0x192e <u8g2_SetupBuffer>
}
     bec:	0f 90       	pop	r0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	df 90       	pop	r13
     bfc:	cf 90       	pop	r12
     bfe:	08 95       	ret

00000c00 <u8g2_font_get_byte>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     c00:	86 0f       	add	r24, r22
     c02:	91 1d       	adc	r25, r1
     c04:	fc 01       	movw	r30, r24
     c06:	84 91       	lpm	r24, Z
     c08:	08 95       	ret

00000c0a <u8g2_font_get_word>:
     c0a:	fc 01       	movw	r30, r24
     c0c:	e6 0f       	add	r30, r22
     c0e:	f1 1d       	adc	r31, r1
     c10:	84 91       	lpm	r24, Z
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	31 96       	adiw	r30, 0x01	; 1
     c16:	98 2f       	mov	r25, r24
     c18:	88 27       	eor	r24, r24
     c1a:	e4 91       	lpm	r30, Z
     c1c:	8e 0f       	add	r24, r30
     c1e:	91 1d       	adc	r25, r1
     c20:	08 95       	ret

00000c22 <u8g2_font_calc_vref_font>:
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	08 95       	ret

00000c28 <u8g2_read_font_info>:
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ec 01       	movw	r28, r24
     c32:	8b 01       	movw	r16, r22
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	c8 01       	movw	r24, r16
     c38:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c3c:	88 83       	st	Y, r24
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	c8 01       	movw	r24, r16
     c42:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	62 e0       	ldi	r22, 0x02	; 2
     c4a:	c8 01       	movw	r24, r16
     c4c:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c50:	8a 83       	std	Y+2, r24	; 0x02
     c52:	63 e0       	ldi	r22, 0x03	; 3
     c54:	c8 01       	movw	r24, r16
     c56:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c5a:	8b 83       	std	Y+3, r24	; 0x03
     c5c:	64 e0       	ldi	r22, 0x04	; 4
     c5e:	c8 01       	movw	r24, r16
     c60:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c64:	8c 83       	std	Y+4, r24	; 0x04
     c66:	65 e0       	ldi	r22, 0x05	; 5
     c68:	c8 01       	movw	r24, r16
     c6a:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c6e:	8d 83       	std	Y+5, r24	; 0x05
     c70:	66 e0       	ldi	r22, 0x06	; 6
     c72:	c8 01       	movw	r24, r16
     c74:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c78:	8e 83       	std	Y+6, r24	; 0x06
     c7a:	67 e0       	ldi	r22, 0x07	; 7
     c7c:	c8 01       	movw	r24, r16
     c7e:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c82:	8f 83       	std	Y+7, r24	; 0x07
     c84:	68 e0       	ldi	r22, 0x08	; 8
     c86:	c8 01       	movw	r24, r16
     c88:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c8c:	88 87       	std	Y+8, r24	; 0x08
     c8e:	69 e0       	ldi	r22, 0x09	; 9
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     c96:	89 87       	std	Y+9, r24	; 0x09
     c98:	6a e0       	ldi	r22, 0x0A	; 10
     c9a:	c8 01       	movw	r24, r16
     c9c:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     ca0:	8a 87       	std	Y+10, r24	; 0x0a
     ca2:	6b e0       	ldi	r22, 0x0B	; 11
     ca4:	c8 01       	movw	r24, r16
     ca6:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     caa:	8b 87       	std	Y+11, r24	; 0x0b
     cac:	6c e0       	ldi	r22, 0x0C	; 12
     cae:	c8 01       	movw	r24, r16
     cb0:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     cb4:	8c 87       	std	Y+12, r24	; 0x0c
     cb6:	6d e0       	ldi	r22, 0x0D	; 13
     cb8:	c8 01       	movw	r24, r16
     cba:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     cbe:	8d 87       	std	Y+13, r24	; 0x0d
     cc0:	6e e0       	ldi	r22, 0x0E	; 14
     cc2:	c8 01       	movw	r24, r16
     cc4:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     cc8:	8e 87       	std	Y+14, r24	; 0x0e
     cca:	6f e0       	ldi	r22, 0x0F	; 15
     ccc:	c8 01       	movw	r24, r16
     cce:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     cd2:	8f 87       	std	Y+15, r24	; 0x0f
     cd4:	60 e1       	ldi	r22, 0x10	; 16
     cd6:	c8 01       	movw	r24, r16
     cd8:	0e 94 00 06 	call	0xc00	; 0xc00 <u8g2_font_get_byte>
     cdc:	88 8b       	std	Y+16, r24	; 0x10
     cde:	61 e1       	ldi	r22, 0x11	; 17
     ce0:	c8 01       	movw	r24, r16
     ce2:	0e 94 05 06 	call	0xc0a	; 0xc0a <u8g2_font_get_word>
     ce6:	9a 8b       	std	Y+18, r25	; 0x12
     ce8:	89 8b       	std	Y+17, r24	; 0x11
     cea:	63 e1       	ldi	r22, 0x13	; 19
     cec:	c8 01       	movw	r24, r16
     cee:	0e 94 05 06 	call	0xc0a	; 0xc0a <u8g2_font_get_word>
     cf2:	9c 8b       	std	Y+20, r25	; 0x14
     cf4:	8b 8b       	std	Y+19, r24	; 0x13
     cf6:	65 e1       	ldi	r22, 0x15	; 21
     cf8:	c8 01       	movw	r24, r16
     cfa:	0e 94 05 06 	call	0xc0a	; 0xc0a <u8g2_font_get_word>
     cfe:	9e 8b       	std	Y+22, r25	; 0x16
     d00:	8d 8b       	std	Y+21, r24	; 0x15
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <u8g2_font_decode_get_unsigned_bits>:
     d0c:	dc 01       	movw	r26, r24
     d0e:	1a 96       	adiw	r26, 0x0a	; 10
     d10:	4c 91       	ld	r20, X
     d12:	1a 97       	sbiw	r26, 0x0a	; 10
     d14:	ed 91       	ld	r30, X+
     d16:	fc 91       	ld	r31, X
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	24 91       	lpm	r18, Z
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	04 2e       	mov	r0, r20
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <u8g2_font_decode_get_unsigned_bits+0x1a>
     d22:	35 95       	asr	r19
     d24:	27 95       	ror	r18
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <u8g2_font_decode_get_unsigned_bits+0x16>
     d2a:	82 2f       	mov	r24, r18
     d2c:	94 2f       	mov	r25, r20
     d2e:	96 0f       	add	r25, r22
     d30:	98 30       	cpi	r25, 0x08	; 8
     d32:	80 f0       	brcs	.+32     	; 0xd54 <u8g2_font_decode_get_unsigned_bits+0x48>
     d34:	88 e0       	ldi	r24, 0x08	; 8
     d36:	84 1b       	sub	r24, r20
     d38:	31 96       	adiw	r30, 0x01	; 1
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	fc 93       	st	X, r31
     d3e:	ee 93       	st	-X, r30
     d40:	e4 91       	lpm	r30, Z
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <u8g2_font_decode_get_unsigned_bits+0x3e>
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	8a 95       	dec	r24
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <u8g2_font_decode_get_unsigned_bits+0x3a>
     d4e:	8e 2f       	mov	r24, r30
     d50:	82 2b       	or	r24, r18
     d52:	98 50       	subi	r25, 0x08	; 8
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <u8g2_font_decode_get_unsigned_bits+0x52>
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	6a 95       	dec	r22
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <u8g2_font_decode_get_unsigned_bits+0x4e>
     d62:	21 50       	subi	r18, 0x01	; 1
     d64:	1a 96       	adiw	r26, 0x0a	; 10
     d66:	9c 93       	st	X, r25
     d68:	82 23       	and	r24, r18
     d6a:	08 95       	ret

00000d6c <u8g2_font_setup_decode>:
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
     d76:	8c 01       	movw	r16, r24
     d78:	08 5b       	subi	r16, 0xB8	; 184
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	f8 01       	movw	r30, r16
     d7e:	71 83       	std	Z+1, r23	; 0x01
     d80:	60 83       	st	Z, r22
     d82:	12 86       	std	Z+10, r1	; 0x0a
     d84:	73 96       	adiw	r30, 0x13	; 19
     d86:	60 81       	ld	r22, Z
     d88:	c8 01       	movw	r24, r16
     d8a:	0e 94 86 06 	call	0xd0c	; 0xd0c <u8g2_font_decode_get_unsigned_bits>
     d8e:	f8 01       	movw	r30, r16
     d90:	80 87       	std	Z+8, r24	; 0x08
     d92:	74 96       	adiw	r30, 0x14	; 20
     d94:	60 81       	ld	r22, Z
     d96:	c8 01       	movw	r24, r16
     d98:	0e 94 86 06 	call	0xd0c	; 0xd0c <u8g2_font_decode_get_unsigned_bits>
     d9c:	f8 01       	movw	r30, r16
     d9e:	81 87       	std	Z+9, r24	; 0x09
     da0:	bc 96       	adiw	r30, 0x2c	; 44
     da2:	80 81       	ld	r24, Z
     da4:	f8 01       	movw	r30, r16
     da6:	84 87       	std	Z+12, r24	; 0x0c
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	81 11       	cpse	r24, r1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	c8 5b       	subi	r28, 0xB8	; 184
     db0:	df 4f       	sbci	r29, 0xFF	; 255
     db2:	9d 87       	std	Y+13, r25	; 0x0d
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	08 95       	ret

00000dbe <u8g2_font_decode_get_signed_bits>:
     dbe:	cf 93       	push	r28
     dc0:	c6 2f       	mov	r28, r22
     dc2:	0e 94 86 06 	call	0xd0c	; 0xd0c <u8g2_font_decode_get_unsigned_bits>
     dc6:	c1 50       	subi	r28, 0x01	; 1
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <u8g2_font_decode_get_signed_bits+0x14>
     dce:	22 0f       	add	r18, r18
     dd0:	33 1f       	adc	r19, r19
     dd2:	ca 95       	dec	r28
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <u8g2_font_decode_get_signed_bits+0x10>
     dd6:	82 1b       	sub	r24, r18
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <u8g2_add_vector_y>:
     ddc:	21 30       	cpi	r18, 0x01	; 1
     dde:	49 f0       	breq	.+18     	; 0xdf2 <u8g2_add_vector_y+0x16>
     de0:	18 f0       	brcs	.+6      	; 0xde8 <u8g2_add_vector_y+0xc>
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	59 f0       	breq	.+22     	; 0xdfc <u8g2_add_vector_y+0x20>
     de6:	0f c0       	rjmp	.+30     	; 0xe06 <u8g2_add_vector_y+0x2a>
     de8:	84 0f       	add	r24, r20
     dea:	91 1d       	adc	r25, r1
     dec:	47 fd       	sbrc	r20, 7
     dee:	9a 95       	dec	r25
     df0:	08 95       	ret
     df2:	86 0f       	add	r24, r22
     df4:	91 1d       	adc	r25, r1
     df6:	67 fd       	sbrc	r22, 7
     df8:	9a 95       	dec	r25
     dfa:	08 95       	ret
     dfc:	84 1b       	sub	r24, r20
     dfe:	91 09       	sbc	r25, r1
     e00:	47 fd       	sbrc	r20, 7
     e02:	93 95       	inc	r25
     e04:	08 95       	ret
     e06:	86 1b       	sub	r24, r22
     e08:	91 09       	sbc	r25, r1
     e0a:	67 fd       	sbrc	r22, 7
     e0c:	93 95       	inc	r25
     e0e:	08 95       	ret

00000e10 <u8g2_add_vector_x>:
     e10:	21 30       	cpi	r18, 0x01	; 1
     e12:	49 f0       	breq	.+18     	; 0xe26 <u8g2_add_vector_x+0x16>
     e14:	18 f0       	brcs	.+6      	; 0xe1c <u8g2_add_vector_x+0xc>
     e16:	22 30       	cpi	r18, 0x02	; 2
     e18:	59 f0       	breq	.+22     	; 0xe30 <u8g2_add_vector_x+0x20>
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <u8g2_add_vector_x+0x2a>
     e1c:	86 0f       	add	r24, r22
     e1e:	91 1d       	adc	r25, r1
     e20:	67 fd       	sbrc	r22, 7
     e22:	9a 95       	dec	r25
     e24:	08 95       	ret
     e26:	84 1b       	sub	r24, r20
     e28:	91 09       	sbc	r25, r1
     e2a:	47 fd       	sbrc	r20, 7
     e2c:	93 95       	inc	r25
     e2e:	08 95       	ret
     e30:	86 1b       	sub	r24, r22
     e32:	91 09       	sbc	r25, r1
     e34:	67 fd       	sbrc	r22, 7
     e36:	93 95       	inc	r25
     e38:	08 95       	ret
     e3a:	84 0f       	add	r24, r20
     e3c:	91 1d       	adc	r25, r1
     e3e:	47 fd       	sbrc	r20, 7
     e40:	9a 95       	dec	r25
     e42:	08 95       	ret

00000e44 <u8g2_font_decode_len>:
     e44:	6f 92       	push	r6
     e46:	7f 92       	push	r7
     e48:	8f 92       	push	r8
     e4a:	9f 92       	push	r9
     e4c:	af 92       	push	r10
     e4e:	bf 92       	push	r11
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	7c 01       	movw	r14, r24
     e62:	16 2f       	mov	r17, r22
     e64:	74 2e       	mov	r7, r20
     e66:	fc 01       	movw	r30, r24
     e68:	e8 5b       	subi	r30, 0xB8	; 184
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	96 80       	ldd	r9, Z+6	; 0x06
     e6e:	d7 81       	ldd	r29, Z+7	; 0x07
     e70:	f7 01       	movw	r30, r14
     e72:	e8 5b       	subi	r30, 0xB8	; 184
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	c0 85       	ldd	r28, Z+8	; 0x08
     e78:	c9 19       	sub	r28, r9
     e7a:	1c 17       	cp	r17, r28
     e7c:	10 f0       	brcs	.+4      	; 0xe82 <u8g2_font_decode_len+0x3e>
     e7e:	6c 2e       	mov	r6, r28
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <u8g2_font_decode_len+0x40>
     e82:	61 2e       	mov	r6, r17
     e84:	f7 01       	movw	r30, r14
     e86:	e8 5b       	subi	r30, 0xB8	; 184
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	c4 80       	ldd	r12, Z+4	; 0x04
     e8c:	d5 80       	ldd	r13, Z+5	; 0x05
     e8e:	06 85       	ldd	r16, Z+14	; 0x0e
     e90:	8d 2e       	mov	r8, r29
     e92:	20 2f       	mov	r18, r16
     e94:	4d 2f       	mov	r20, r29
     e96:	69 2d       	mov	r22, r9
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	0e 94 08 07 	call	0xe10	; 0xe10 <u8g2_add_vector_x>
     ea0:	5c 01       	movw	r10, r24
     ea2:	20 2f       	mov	r18, r16
     ea4:	4d 2f       	mov	r20, r29
     ea6:	69 2d       	mov	r22, r9
     ea8:	c6 01       	movw	r24, r12
     eaa:	0e 94 ee 06 	call	0xddc	; 0xddc <u8g2_add_vector_y>
     eae:	77 20       	and	r7, r7
     eb0:	71 f0       	breq	.+28     	; 0xece <u8g2_font_decode_len+0x8a>
     eb2:	f7 01       	movw	r30, r14
     eb4:	e8 5b       	subi	r30, 0xB8	; 184
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	24 85       	ldd	r18, Z+12	; 0x0c
     eba:	bc 96       	adiw	r30, 0x2c	; 44
     ebc:	20 83       	st	Z, r18
     ebe:	26 2d       	mov	r18, r6
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	ac 01       	movw	r20, r24
     ec4:	b5 01       	movw	r22, r10
     ec6:	c7 01       	movw	r24, r14
     ec8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <u8g2_DrawHVLine>
     ecc:	10 c0       	rjmp	.+32     	; 0xeee <u8g2_font_decode_len+0xaa>
     ece:	f7 01       	movw	r30, r14
     ed0:	e8 5b       	subi	r30, 0xB8	; 184
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	23 85       	ldd	r18, Z+11	; 0x0b
     ed6:	21 11       	cpse	r18, r1
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <u8g2_font_decode_len+0xaa>
     eda:	25 85       	ldd	r18, Z+13	; 0x0d
     edc:	bc 96       	adiw	r30, 0x2c	; 44
     ede:	20 83       	st	Z, r18
     ee0:	26 2d       	mov	r18, r6
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	ac 01       	movw	r20, r24
     ee6:	b5 01       	movw	r22, r10
     ee8:	c7 01       	movw	r24, r14
     eea:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <u8g2_DrawHVLine>
     eee:	1c 17       	cp	r17, r28
     ef0:	20 f0       	brcs	.+8      	; 0xefa <u8g2_font_decode_len+0xb6>
     ef2:	1c 1b       	sub	r17, r28
     ef4:	df 5f       	subi	r29, 0xFF	; 255
     ef6:	91 2c       	mov	r9, r1
     ef8:	bb cf       	rjmp	.-138    	; 0xe70 <u8g2_font_decode_len+0x2c>
     efa:	61 2f       	mov	r22, r17
     efc:	69 0d       	add	r22, r9
     efe:	f7 01       	movw	r30, r14
     f00:	e8 5b       	subi	r30, 0xB8	; 184
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	66 83       	std	Z+6, r22	; 0x06
     f06:	87 82       	std	Z+7, r8	; 0x07
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
     f20:	7f 90       	pop	r7
     f22:	6f 90       	pop	r6
     f24:	08 95       	ret

00000f26 <u8g2_font_decode_glyph>:
     f26:	6f 92       	push	r6
     f28:	7f 92       	push	r7
     f2a:	8f 92       	push	r8
     f2c:	9f 92       	push	r9
     f2e:	af 92       	push	r10
     f30:	bf 92       	push	r11
     f32:	cf 92       	push	r12
     f34:	df 92       	push	r13
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
     f44:	7c 01       	movw	r14, r24
     f46:	88 e4       	ldi	r24, 0x48	; 72
     f48:	e8 0e       	add	r14, r24
     f4a:	f1 1c       	adc	r15, r1
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <u8g2_font_setup_decode>
     f52:	fe 01       	movw	r30, r28
     f54:	ef 5a       	subi	r30, 0xAF	; 175
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	c0 80       	ld	r12, Z
     f5a:	3c 96       	adiw	r30, 0x0c	; 12
     f5c:	60 81       	ld	r22, Z
     f5e:	c7 01       	movw	r24, r14
     f60:	0e 94 df 06 	call	0xdbe	; 0xdbe <u8g2_font_decode_get_signed_bits>
     f64:	78 2e       	mov	r7, r24
     f66:	fe 01       	movw	r30, r28
     f68:	e2 5a       	subi	r30, 0xA2	; 162
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	c7 01       	movw	r24, r14
     f70:	0e 94 df 06 	call	0xdbe	; 0xdbe <u8g2_font_decode_get_signed_bits>
     f74:	18 2f       	mov	r17, r24
     f76:	fe 01       	movw	r30, r28
     f78:	e1 5a       	subi	r30, 0xA1	; 161
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	60 81       	ld	r22, Z
     f7e:	c7 01       	movw	r24, r14
     f80:	0e 94 df 06 	call	0xdbe	; 0xdbe <u8g2_font_decode_get_signed_bits>
     f84:	d8 2e       	mov	r13, r24
     f86:	f7 01       	movw	r30, r14
     f88:	60 84       	ldd	r6, Z+8	; 0x08
     f8a:	16 14       	cp	r1, r6
     f8c:	0c f0       	brlt	.+2      	; 0xf90 <u8g2_font_decode_glyph+0x6a>
     f8e:	9b c0       	rjmp	.+310    	; 0x10c6 <u8g2_font_decode_glyph+0x1a0>
     f90:	06 85       	ldd	r16, Z+14	; 0x0e
     f92:	1c 0d       	add	r17, r12
     f94:	11 95       	neg	r17
     f96:	20 2f       	mov	r18, r16
     f98:	41 2f       	mov	r20, r17
     f9a:	67 2d       	mov	r22, r7
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	0e 94 08 07 	call	0xe10	; 0xe10 <u8g2_add_vector_x>
     fa4:	5c 01       	movw	r10, r24
     fa6:	f7 01       	movw	r30, r14
     fa8:	93 83       	std	Z+3, r25	; 0x03
     faa:	82 83       	std	Z+2, r24	; 0x02
     fac:	20 2f       	mov	r18, r16
     fae:	41 2f       	mov	r20, r17
     fb0:	67 2d       	mov	r22, r7
     fb2:	84 81       	ldd	r24, Z+4	; 0x04
     fb4:	95 81       	ldd	r25, Z+5	; 0x05
     fb6:	0e 94 ee 06 	call	0xddc	; 0xddc <u8g2_add_vector_y>
     fba:	f7 01       	movw	r30, r14
     fbc:	95 83       	std	Z+5, r25	; 0x05
     fbe:	84 83       	std	Z+4, r24	; 0x04
     fc0:	01 30       	cpi	r16, 0x01	; 1
     fc2:	89 f0       	breq	.+34     	; 0xfe6 <u8g2_font_decode_glyph+0xc0>
     fc4:	28 f0       	brcs	.+10     	; 0xfd0 <u8g2_font_decode_glyph+0xaa>
     fc6:	02 30       	cpi	r16, 0x02	; 2
     fc8:	01 f1       	breq	.+64     	; 0x100a <u8g2_font_decode_glyph+0xe4>
     fca:	03 30       	cpi	r16, 0x03	; 3
     fcc:	a1 f1       	breq	.+104    	; 0x1036 <u8g2_font_decode_glyph+0x110>
     fce:	43 c0       	rjmp	.+134    	; 0x1056 <u8g2_font_decode_glyph+0x130>
     fd0:	95 01       	movw	r18, r10
     fd2:	26 0d       	add	r18, r6
     fd4:	31 1d       	adc	r19, r1
     fd6:	67 fc       	sbrc	r6, 7
     fd8:	3a 95       	dec	r19
     fda:	8c 01       	movw	r16, r24
     fdc:	0c 0d       	add	r16, r12
     fde:	11 1d       	adc	r17, r1
     fe0:	c7 fc       	sbrc	r12, 7
     fe2:	1a 95       	dec	r17
     fe4:	3a c0       	rjmp	.+116    	; 0x105a <u8g2_font_decode_glyph+0x134>
     fe6:	a5 01       	movw	r20, r10
     fe8:	4c 19       	sub	r20, r12
     fea:	51 09       	sbc	r21, r1
     fec:	c7 fc       	sbrc	r12, 7
     fee:	53 95       	inc	r21
     ff0:	95 01       	movw	r18, r10
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	8c 01       	movw	r16, r24
     ff8:	06 0d       	add	r16, r6
     ffa:	11 1d       	adc	r17, r1
     ffc:	67 fc       	sbrc	r6, 7
     ffe:	1a 95       	dec	r17
    1000:	ba 01       	movw	r22, r20
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	5b 01       	movw	r10, r22
    1008:	28 c0       	rjmp	.+80     	; 0x105a <u8g2_font_decode_glyph+0x134>
    100a:	a5 01       	movw	r20, r10
    100c:	46 19       	sub	r20, r6
    100e:	51 09       	sbc	r21, r1
    1010:	67 fc       	sbrc	r6, 7
    1012:	53 95       	inc	r21
    1014:	95 01       	movw	r18, r10
    1016:	2f 5f       	subi	r18, 0xFF	; 255
    1018:	3f 4f       	sbci	r19, 0xFF	; 255
    101a:	bc 01       	movw	r22, r24
    101c:	6c 19       	sub	r22, r12
    101e:	71 09       	sbc	r23, r1
    1020:	c7 fc       	sbrc	r12, 7
    1022:	73 95       	inc	r23
    1024:	8c 01       	movw	r16, r24
    1026:	0f 5f       	subi	r16, 0xFF	; 255
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	cb 01       	movw	r24, r22
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	fa 01       	movw	r30, r20
    1030:	31 96       	adiw	r30, 0x01	; 1
    1032:	5f 01       	movw	r10, r30
    1034:	12 c0       	rjmp	.+36     	; 0x105a <u8g2_font_decode_glyph+0x134>
    1036:	95 01       	movw	r18, r10
    1038:	2c 0d       	add	r18, r12
    103a:	31 1d       	adc	r19, r1
    103c:	c7 fc       	sbrc	r12, 7
    103e:	3a 95       	dec	r19
    1040:	ac 01       	movw	r20, r24
    1042:	46 19       	sub	r20, r6
    1044:	51 09       	sbc	r21, r1
    1046:	67 fc       	sbrc	r6, 7
    1048:	53 95       	inc	r21
    104a:	8c 01       	movw	r16, r24
    104c:	0f 5f       	subi	r16, 0xFF	; 255
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    1050:	ca 01       	movw	r24, r20
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	02 c0       	rjmp	.+4      	; 0x105a <u8g2_font_decode_glyph+0x134>
    1056:	8c 01       	movw	r16, r24
    1058:	95 01       	movw	r18, r10
    105a:	ac 01       	movw	r20, r24
    105c:	b5 01       	movw	r22, r10
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 2f 0b 	call	0x165e	; 0x165e <u8g2_IsIntersection>
    1064:	88 23       	and	r24, r24
    1066:	79 f1       	breq	.+94     	; 0x10c6 <u8g2_font_decode_glyph+0x1a0>
    1068:	fe 01       	movw	r30, r28
    106a:	e8 5b       	subi	r30, 0xB8	; 184
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	16 82       	std	Z+6, r1	; 0x06
    1070:	17 82       	std	Z+7, r1	; 0x07
    1072:	fe 01       	movw	r30, r28
    1074:	e7 5a       	subi	r30, 0xA7	; 167
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	60 81       	ld	r22, Z
    107a:	c7 01       	movw	r24, r14
    107c:	0e 94 86 06 	call	0xd0c	; 0xd0c <u8g2_font_decode_get_unsigned_bits>
    1080:	08 2f       	mov	r16, r24
    1082:	fe 01       	movw	r30, r28
    1084:	e6 5a       	subi	r30, 0xA6	; 166
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	60 81       	ld	r22, Z
    108a:	c7 01       	movw	r24, r14
    108c:	0e 94 86 06 	call	0xd0c	; 0xd0c <u8g2_font_decode_get_unsigned_bits>
    1090:	18 2f       	mov	r17, r24
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	60 2f       	mov	r22, r16
    1096:	ce 01       	movw	r24, r28
    1098:	0e 94 22 07 	call	0xe44	; 0xe44 <u8g2_font_decode_len>
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	61 2f       	mov	r22, r17
    10a0:	ce 01       	movw	r24, r28
    10a2:	0e 94 22 07 	call	0xe44	; 0xe44 <u8g2_font_decode_len>
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	c7 01       	movw	r24, r14
    10aa:	0e 94 86 06 	call	0xd0c	; 0xd0c <u8g2_font_decode_get_unsigned_bits>
    10ae:	81 11       	cpse	r24, r1
    10b0:	f0 cf       	rjmp	.-32     	; 0x1092 <u8g2_font_decode_glyph+0x16c>
    10b2:	fe 01       	movw	r30, r28
    10b4:	e8 5b       	subi	r30, 0xB8	; 184
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	87 81       	ldd	r24, Z+7	; 0x07
    10ba:	8c 15       	cp	r24, r12
    10bc:	d4 f2       	brlt	.-76     	; 0x1072 <u8g2_font_decode_glyph+0x14c>
    10be:	84 85       	ldd	r24, Z+12	; 0x0c
    10c0:	cc 58       	subi	r28, 0x8C	; 140
    10c2:	df 4f       	sbci	r29, 0xFF	; 255
    10c4:	88 83       	st	Y, r24
    10c6:	8d 2d       	mov	r24, r13
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	7f 90       	pop	r7
    10e2:	6f 90       	pop	r6
    10e4:	08 95       	ret

000010e6 <u8g2_font_get_glyph_data>:
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	fc 01       	movw	r30, r24
    10f4:	ec 5b       	subi	r30, 0xBC	; 188
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	c0 81       	ld	r28, Z
    10fa:	d1 81       	ldd	r29, Z+1	; 0x01
    10fc:	67 96       	adiw	r28, 0x17	; 23
    10fe:	6f 3f       	cpi	r22, 0xFF	; 255
    1100:	71 05       	cpc	r23, r1
    1102:	09 f0       	breq	.+2      	; 0x1106 <u8g2_font_get_glyph_data+0x20>
    1104:	38 f5       	brcc	.+78     	; 0x1154 <u8g2_font_get_glyph_data+0x6e>
    1106:	61 36       	cpi	r22, 0x61	; 97
    1108:	71 05       	cpc	r23, r1
    110a:	30 f0       	brcs	.+12     	; 0x1118 <u8g2_font_get_glyph_data+0x32>
    110c:	b6 96       	adiw	r30, 0x26	; 38
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	c8 0f       	add	r28, r24
    1114:	d9 1f       	adc	r29, r25
    1116:	0a c0       	rjmp	.+20     	; 0x112c <u8g2_font_get_glyph_data+0x46>
    1118:	61 34       	cpi	r22, 0x41	; 65
    111a:	71 05       	cpc	r23, r1
    111c:	38 f0       	brcs	.+14     	; 0x112c <u8g2_font_get_glyph_data+0x46>
    111e:	fc 01       	movw	r30, r24
    1120:	e8 59       	subi	r30, 0x98	; 152
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	c8 0f       	add	r28, r24
    112a:	d9 1f       	adc	r29, r25
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	fc 01       	movw	r30, r24
    1132:	24 91       	lpm	r18, Z
    1134:	22 23       	and	r18, r18
    1136:	09 f4       	brne	.+2      	; 0x113a <u8g2_font_get_glyph_data+0x54>
    1138:	3c c0       	rjmp	.+120    	; 0x11b2 <u8g2_font_get_glyph_data+0xcc>
    113a:	fe 01       	movw	r30, r28
    113c:	24 91       	lpm	r18, Z
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	62 17       	cp	r22, r18
    1142:	73 07       	cpc	r23, r19
    1144:	11 f4       	brne	.+4      	; 0x114a <u8g2_font_get_glyph_data+0x64>
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	39 c0       	rjmp	.+114    	; 0x11bc <u8g2_font_get_glyph_data+0xd6>
    114a:	fc 01       	movw	r30, r24
    114c:	84 91       	lpm	r24, Z
    114e:	c8 0f       	add	r28, r24
    1150:	d1 1d       	adc	r29, r1
    1152:	ec cf       	rjmp	.-40     	; 0x112c <u8g2_font_get_glyph_data+0x46>
    1154:	8b 01       	movw	r16, r22
    1156:	fc 01       	movw	r30, r24
    1158:	e4 59       	subi	r30, 0x94	; 148
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	c8 0f       	add	r28, r24
    1162:	d9 1f       	adc	r29, r25
    1164:	7e 01       	movw	r14, r28
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	c7 01       	movw	r24, r14
    116a:	0e 94 05 06 	call	0xc0a	; 0xc0a <u8g2_font_get_word>
    116e:	c8 0f       	add	r28, r24
    1170:	d9 1f       	adc	r29, r25
    1172:	62 e0       	ldi	r22, 0x02	; 2
    1174:	c7 01       	movw	r24, r14
    1176:	0e 94 05 06 	call	0xc0a	; 0xc0a <u8g2_font_get_word>
    117a:	f4 e0       	ldi	r31, 0x04	; 4
    117c:	ef 0e       	add	r14, r31
    117e:	f1 1c       	adc	r15, r1
    1180:	80 17       	cp	r24, r16
    1182:	91 07       	cpc	r25, r17
    1184:	80 f3       	brcs	.-32     	; 0x1166 <u8g2_font_get_glyph_data+0x80>
    1186:	fe 01       	movw	r30, r28
    1188:	84 91       	lpm	r24, Z
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	98 2f       	mov	r25, r24
    118e:	88 27       	eor	r24, r24
    1190:	31 96       	adiw	r30, 0x01	; 1
    1192:	e4 91       	lpm	r30, Z
    1194:	8e 2b       	or	r24, r30
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	79 f0       	breq	.+30     	; 0x11b8 <u8g2_font_get_glyph_data+0xd2>
    119a:	08 17       	cp	r16, r24
    119c:	19 07       	cpc	r17, r25
    119e:	19 f4       	brne	.+6      	; 0x11a6 <u8g2_font_get_glyph_data+0xc0>
    11a0:	ce 01       	movw	r24, r28
    11a2:	03 96       	adiw	r24, 0x03	; 3
    11a4:	0b c0       	rjmp	.+22     	; 0x11bc <u8g2_font_get_glyph_data+0xd6>
    11a6:	fe 01       	movw	r30, r28
    11a8:	32 96       	adiw	r30, 0x02	; 2
    11aa:	e4 91       	lpm	r30, Z
    11ac:	ce 0f       	add	r28, r30
    11ae:	d1 1d       	adc	r29, r1
    11b0:	ea cf       	rjmp	.-44     	; 0x1186 <u8g2_font_get_glyph_data+0xa0>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <u8g2_font_get_glyph_data+0xd6>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	08 95       	ret

000011ca <u8g2_font_draw_glyph>:
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	fc 01       	movw	r30, r24
    11d2:	e6 5b       	subi	r30, 0xB6	; 182
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	71 83       	std	Z+1, r23	; 0x01
    11d8:	60 83       	st	Z, r22
    11da:	32 96       	adiw	r30, 0x02	; 2
    11dc:	51 83       	std	Z+1, r21	; 0x01
    11de:	40 83       	st	Z, r20
    11e0:	b9 01       	movw	r22, r18
    11e2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <u8g2_font_get_glyph_data>
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	41 f0       	breq	.+16     	; 0x11fa <u8g2_font_draw_glyph+0x30>
    11ea:	bc 01       	movw	r22, r24
    11ec:	ce 01       	movw	r24, r28
    11ee:	0e 94 93 07 	call	0xf26	; 0xf26 <u8g2_font_decode_glyph>
    11f2:	08 2e       	mov	r0, r24
    11f4:	00 0c       	add	r0, r0
    11f6:	99 0b       	sbc	r25, r25
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <u8g2_font_draw_glyph+0x34>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <u8g2_DrawGlyph>:
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    1216:	8b 01       	movw	r16, r22
    1218:	7a 01       	movw	r14, r20
    121a:	69 01       	movw	r12, r18
    121c:	fc 01       	movw	r30, r24
    121e:	ea 5a       	subi	r30, 0xAA	; 170
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	89 f0       	breq	.+34     	; 0x124a <u8g2_DrawGlyph+0x46>
    1228:	28 f0       	brcs	.+10     	; 0x1234 <u8g2_DrawGlyph+0x30>
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	c9 f0       	breq	.+50     	; 0x1260 <u8g2_DrawGlyph+0x5c>
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	11 f1       	breq	.+68     	; 0x1276 <u8g2_DrawGlyph+0x72>
    1232:	2b c0       	rjmp	.+86     	; 0x128a <u8g2_DrawGlyph+0x86>
    1234:	fe 01       	movw	r30, r28
    1236:	ea 5b       	subi	r30, 0xBA	; 186
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	01 90       	ld	r0, Z+
    123c:	f0 81       	ld	r31, Z
    123e:	e0 2d       	mov	r30, r0
    1240:	ce 01       	movw	r24, r28
    1242:	09 95       	icall
    1244:	e8 0e       	add	r14, r24
    1246:	f9 1e       	adc	r15, r25
    1248:	20 c0       	rjmp	.+64     	; 0x128a <u8g2_DrawGlyph+0x86>
    124a:	fe 01       	movw	r30, r28
    124c:	ea 5b       	subi	r30, 0xBA	; 186
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	01 90       	ld	r0, Z+
    1252:	f0 81       	ld	r31, Z
    1254:	e0 2d       	mov	r30, r0
    1256:	ce 01       	movw	r24, r28
    1258:	09 95       	icall
    125a:	08 1b       	sub	r16, r24
    125c:	19 0b       	sbc	r17, r25
    125e:	15 c0       	rjmp	.+42     	; 0x128a <u8g2_DrawGlyph+0x86>
    1260:	fe 01       	movw	r30, r28
    1262:	ea 5b       	subi	r30, 0xBA	; 186
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	01 90       	ld	r0, Z+
    1268:	f0 81       	ld	r31, Z
    126a:	e0 2d       	mov	r30, r0
    126c:	ce 01       	movw	r24, r28
    126e:	09 95       	icall
    1270:	e8 1a       	sub	r14, r24
    1272:	f9 0a       	sbc	r15, r25
    1274:	0a c0       	rjmp	.+20     	; 0x128a <u8g2_DrawGlyph+0x86>
    1276:	fe 01       	movw	r30, r28
    1278:	ea 5b       	subi	r30, 0xBA	; 186
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	01 90       	ld	r0, Z+
    127e:	f0 81       	ld	r31, Z
    1280:	e0 2d       	mov	r30, r0
    1282:	ce 01       	movw	r24, r28
    1284:	09 95       	icall
    1286:	08 0f       	add	r16, r24
    1288:	19 1f       	adc	r17, r25
    128a:	96 01       	movw	r18, r12
    128c:	a7 01       	movw	r20, r14
    128e:	b8 01       	movw	r22, r16
    1290:	ce 01       	movw	r24, r28
    1292:	0e 94 e5 08 	call	0x11ca	; 0x11ca <u8g2_font_draw_glyph>
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	ff 90       	pop	r15
    12a0:	ef 90       	pop	r14
    12a2:	df 90       	pop	r13
    12a4:	cf 90       	pop	r12
    12a6:	08 95       	ret

000012a8 <u8g2_draw_string>:
    12a8:	af 92       	push	r10
    12aa:	bf 92       	push	r11
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
    12be:	5b 01       	movw	r10, r22
    12c0:	6a 01       	movw	r12, r20
    12c2:	89 01       	movw	r16, r18
    12c4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <u8x8_utf8_init>
    12c8:	e1 2c       	mov	r14, r1
    12ca:	f1 2c       	mov	r15, r1
    12cc:	ea 81       	ldd	r30, Y+2	; 0x02
    12ce:	fb 81       	ldd	r31, Y+3	; 0x03
    12d0:	d8 01       	movw	r26, r16
    12d2:	6c 91       	ld	r22, X
    12d4:	ce 01       	movw	r24, r28
    12d6:	09 95       	icall
    12d8:	8f 3f       	cpi	r24, 0xFF	; 255
    12da:	bf ef       	ldi	r27, 0xFF	; 255
    12dc:	9b 07       	cpc	r25, r27
    12de:	39 f1       	breq	.+78     	; 0x132e <u8g2_draw_string+0x86>
    12e0:	0f 5f       	subi	r16, 0xFF	; 255
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	8e 3f       	cpi	r24, 0xFE	; 254
    12e6:	2f ef       	ldi	r18, 0xFF	; 255
    12e8:	92 07       	cpc	r25, r18
    12ea:	81 f3       	breq	.-32     	; 0x12cc <u8g2_draw_string+0x24>
    12ec:	9c 01       	movw	r18, r24
    12ee:	a6 01       	movw	r20, r12
    12f0:	b5 01       	movw	r22, r10
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 02 09 	call	0x1204	; 0x1204 <u8g2_DrawGlyph>
    12f8:	9c 01       	movw	r18, r24
    12fa:	fe 01       	movw	r30, r28
    12fc:	ea 5a       	subi	r30, 0xAA	; 170
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	90 81       	ld	r25, Z
    1302:	91 30       	cpi	r25, 0x01	; 1
    1304:	49 f0       	breq	.+18     	; 0x1318 <u8g2_draw_string+0x70>
    1306:	28 f0       	brcs	.+10     	; 0x1312 <u8g2_draw_string+0x6a>
    1308:	92 30       	cpi	r25, 0x02	; 2
    130a:	49 f0       	breq	.+18     	; 0x131e <u8g2_draw_string+0x76>
    130c:	93 30       	cpi	r25, 0x03	; 3
    130e:	51 f0       	breq	.+20     	; 0x1324 <u8g2_draw_string+0x7c>
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <u8g2_draw_string+0x80>
    1312:	a2 0e       	add	r10, r18
    1314:	b3 1e       	adc	r11, r19
    1316:	08 c0       	rjmp	.+16     	; 0x1328 <u8g2_draw_string+0x80>
    1318:	c2 0e       	add	r12, r18
    131a:	d3 1e       	adc	r13, r19
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <u8g2_draw_string+0x80>
    131e:	a2 1a       	sub	r10, r18
    1320:	b3 0a       	sbc	r11, r19
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <u8g2_draw_string+0x80>
    1324:	c2 1a       	sub	r12, r18
    1326:	d3 0a       	sbc	r13, r19
    1328:	e2 0e       	add	r14, r18
    132a:	f3 1e       	adc	r15, r19
    132c:	cf cf       	rjmp	.-98     	; 0x12cc <u8g2_draw_string+0x24>
    132e:	c7 01       	movw	r24, r14
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	08 95       	ret

00001346 <u8g2_DrawStr>:
    1346:	e7 ec       	ldi	r30, 0xC7	; 199
    1348:	fc e0       	ldi	r31, 0x0C	; 12
    134a:	dc 01       	movw	r26, r24
    134c:	13 96       	adiw	r26, 0x03	; 3
    134e:	fc 93       	st	X, r31
    1350:	ee 93       	st	-X, r30
    1352:	12 97       	sbiw	r26, 0x02	; 2
    1354:	0e 94 54 09 	call	0x12a8	; 0x12a8 <u8g2_draw_string>
    1358:	08 95       	ret

0000135a <u8g2_UpdateRefHeight>:
    135a:	fc 01       	movw	r30, r24
    135c:	ec 5b       	subi	r30, 0xBC	; 188
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	20 81       	ld	r18, Z
    1362:	31 81       	ldd	r19, Z+1	; 0x01
    1364:	23 2b       	or	r18, r19
    1366:	e1 f1       	breq	.+120    	; 0x13e0 <u8g2_UpdateRefHeight+0x86>
    1368:	b0 96       	adiw	r30, 0x20	; 32
    136a:	20 81       	ld	r18, Z
    136c:	3c 96       	adiw	r30, 0x0c	; 12
    136e:	20 83       	st	Z, r18
    1370:	3b 97       	sbiw	r30, 0x0b	; 11
    1372:	40 81       	ld	r20, Z
    1374:	3c 96       	adiw	r30, 0x0c	; 12
    1376:	40 83       	st	Z, r20
    1378:	32 97       	sbiw	r30, 0x02	; 2
    137a:	30 81       	ld	r19, Z
    137c:	33 23       	and	r19, r19
    137e:	81 f1       	breq	.+96     	; 0x13e0 <u8g2_UpdateRefHeight+0x86>
    1380:	31 30       	cpi	r19, 0x01	; 1
    1382:	79 f4       	brne	.+30     	; 0x13a2 <u8g2_UpdateRefHeight+0x48>
    1384:	39 97       	sbiw	r30, 0x09	; 9
    1386:	30 81       	ld	r19, Z
    1388:	23 17       	cp	r18, r19
    138a:	14 f4       	brge	.+4      	; 0x1390 <u8g2_UpdateRefHeight+0x36>
    138c:	3a 96       	adiw	r30, 0x0a	; 10
    138e:	30 83       	st	Z, r19
    1390:	fc 01       	movw	r30, r24
    1392:	e9 59       	subi	r30, 0x99	; 153
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	20 81       	ld	r18, Z
    1398:	24 17       	cp	r18, r20
    139a:	14 f5       	brge	.+68     	; 0x13e0 <u8g2_UpdateRefHeight+0x86>
    139c:	3a 96       	adiw	r30, 0x0a	; 10
    139e:	20 83       	st	Z, r18
    13a0:	08 95       	ret
    13a2:	02 2e       	mov	r0, r18
    13a4:	00 0c       	add	r0, r0
    13a6:	33 0b       	sbc	r19, r19
    13a8:	fc 01       	movw	r30, r24
    13aa:	ef 59       	subi	r30, 0x9F	; 159
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	e0 81       	ld	r30, Z
    13b0:	dc 01       	movw	r26, r24
    13b2:	ad 59       	subi	r26, 0x9D	; 157
    13b4:	bf 4f       	sbci	r27, 0xFF	; 255
    13b6:	5c 91       	ld	r21, X
    13b8:	65 2f       	mov	r22, r21
    13ba:	05 2e       	mov	r0, r21
    13bc:	00 0c       	add	r0, r0
    13be:	77 0b       	sbc	r23, r23
    13c0:	6e 0f       	add	r22, r30
    13c2:	71 1d       	adc	r23, r1
    13c4:	e7 fd       	sbrc	r30, 7
    13c6:	7a 95       	dec	r23
    13c8:	26 17       	cp	r18, r22
    13ca:	37 07       	cpc	r19, r23
    13cc:	1c f4       	brge	.+6      	; 0x13d4 <u8g2_UpdateRefHeight+0x7a>
    13ce:	1d 96       	adiw	r26, 0x0d	; 13
    13d0:	e5 0f       	add	r30, r21
    13d2:	ec 93       	st	X, r30
    13d4:	54 17       	cp	r21, r20
    13d6:	24 f4       	brge	.+8      	; 0x13e0 <u8g2_UpdateRefHeight+0x86>
    13d8:	fc 01       	movw	r30, r24
    13da:	ef 58       	subi	r30, 0x8F	; 143
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	50 83       	st	Z, r21
    13e0:	08 95       	ret

000013e2 <u8g2_SetFontPosBaseline>:
    13e2:	8a 5b       	subi	r24, 0xBA	; 186
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	21 e1       	ldi	r18, 0x11	; 17
    13e8:	36 e0       	ldi	r19, 0x06	; 6
    13ea:	fc 01       	movw	r30, r24
    13ec:	31 83       	std	Z+1, r19	; 0x01
    13ee:	20 83       	st	Z, r18
    13f0:	08 95       	ret

000013f2 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
  if ( u8g2->font != font )
    13f6:	fc 01       	movw	r30, r24
    13f8:	ec 5b       	subi	r30, 0xBC	; 188
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	20 81       	ld	r18, Z
    13fe:	31 81       	ldd	r19, Z+1	; 0x01
    1400:	26 17       	cp	r18, r22
    1402:	37 07       	cpc	r19, r23
    1404:	51 f0       	breq	.+20     	; 0x141a <u8g2_SetFont+0x28>
    1406:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    1408:	71 83       	std	Z+1, r23	; 0x01
    140a:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
    140c:	89 5a       	subi	r24, 0xA9	; 169
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	0e 94 14 06 	call	0xc28	; 0xc28 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    1414:	ce 01       	movw	r24, r28
    1416:	0e 94 ad 09 	call	0x135a	; 0x135a <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
  u8g2_uint_t a = *ap;
    1424:	ec 01       	movw	r28, r24
    1426:	a8 81       	ld	r26, Y
    1428:	b9 81       	ldd	r27, Y+1	; 0x01
  u8g2_uint_t b;
  b  = a;
  b += *len;
    142a:	eb 01       	movw	r28, r22
    142c:	e8 81       	ld	r30, Y
    142e:	f9 81       	ldd	r31, Y+1	; 0x01
    1430:	ea 0f       	add	r30, r26
    1432:	fb 1f       	adc	r31, r27
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    1434:	ea 17       	cp	r30, r26
    1436:	fb 07       	cpc	r31, r27
    1438:	38 f4       	brcc	.+14     	; 0x1448 <u8g2_clip_intersection2+0x28>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    143a:	a2 17       	cp	r26, r18
    143c:	b3 07       	cpc	r27, r19
    143e:	18 f4       	brcc	.+6      	; 0x1446 <u8g2_clip_intersection2+0x26>
    {
      b = d;
      b--;
    1440:	f9 01       	movw	r30, r18
    1442:	31 97       	sbiw	r30, 0x01	; 1
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <u8g2_clip_intersection2+0x28>
    }
    else
    {
      a = c;
    1446:	da 01       	movw	r26, r20
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    1448:	a2 17       	cp	r26, r18
    144a:	b3 07       	cpc	r27, r19
    144c:	a8 f4       	brcc	.+42     	; 0x1478 <u8g2_clip_intersection2+0x58>
    return 0;
  if ( b <= c )
    144e:	4e 17       	cp	r20, r30
    1450:	5f 07       	cpc	r21, r31
    1452:	a0 f4       	brcc	.+40     	; 0x147c <u8g2_clip_intersection2+0x5c>
    return 0;
  if ( a < c )		
    1454:	a4 17       	cp	r26, r20
    1456:	b5 07       	cpc	r27, r21
    1458:	08 f0       	brcs	.+2      	; 0x145c <u8g2_clip_intersection2+0x3c>
    145a:	ad 01       	movw	r20, r26
    a = c;
  if ( b > d )
    145c:	2e 17       	cp	r18, r30
    145e:	3f 07       	cpc	r19, r31
    1460:	08 f0       	brcs	.+2      	; 0x1464 <u8g2_clip_intersection2+0x44>
    1462:	9f 01       	movw	r18, r30
    b = d;
  
  *ap = a;
    1464:	fc 01       	movw	r30, r24
    1466:	51 83       	std	Z+1, r21	; 0x01
    1468:	40 83       	st	Z, r20
  b -= a;
    146a:	24 1b       	sub	r18, r20
    146c:	35 0b       	sbc	r19, r21
  *len = b;
    146e:	eb 01       	movw	r28, r22
    1470:	39 83       	std	Y+1, r19	; 0x01
    1472:	28 83       	st	Y, r18
  return 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	03 c0       	rjmp	.+6      	; 0x147e <u8g2_clip_intersection2+0x5e>
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	01 c0       	rjmp	.+2      	; 0x147e <u8g2_clip_intersection2+0x5e>
  if ( b <= c )
    return 0;
    147c:	80 e0       	ldi	r24, 0x00	; 0
  
  *ap = a;
  b -= a;
  *len = b;
  return 1;
}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1484:	0f 93       	push	r16

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
    1486:	dc 01       	movw	r26, r24
    1488:	9a 96       	adiw	r26, 0x2a	; 42
    148a:	ed 91       	ld	r30, X+
    148c:	fc 91       	ld	r31, X
    148e:	9b 97       	sbiw	r26, 0x2b	; 43
    1490:	4e 1b       	sub	r20, r30
    1492:	5f 0b       	sbc	r21, r31
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    1494:	5e 96       	adiw	r26, 0x1e	; 30
    1496:	ed 91       	ld	r30, X+
    1498:	fc 91       	ld	r31, X
    149a:	5f 97       	sbiw	r26, 0x1f	; 31
    149c:	09 95       	icall
}
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <u8g2_DrawHVLine+0xe>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <u8g2_DrawHVLine+0x10>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <u8g2_DrawHVLine+0x12>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	7a 83       	std	Y+2, r23	; 0x02
    14ba:	69 83       	std	Y+1, r22	; 0x01
    14bc:	5c 83       	std	Y+4, r21	; 0x04
    14be:	4b 83       	std	Y+3, r20	; 0x03
    14c0:	3e 83       	std	Y+6, r19	; 0x06
    14c2:	2d 83       	std	Y+5, r18	; 0x05
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    14c4:	fc 01       	movw	r30, r24
    14c6:	e2 59       	subi	r30, 0x92	; 146
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	20 81       	ld	r18, Z
    14cc:	22 23       	and	r18, r18
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <u8g2_DrawHVLine+0x30>
    14d0:	74 c0       	rjmp	.+232    	; 0x15ba <u8g2_DrawHVLine+0x118>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    14d2:	2d 81       	ldd	r18, Y+5	; 0x05
    14d4:	3e 81       	ldd	r19, Y+6	; 0x06
    14d6:	21 15       	cp	r18, r1
    14d8:	31 05       	cpc	r19, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <u8g2_DrawHVLine+0x3c>
    14dc:	6e c0       	rjmp	.+220    	; 0x15ba <u8g2_DrawHVLine+0x118>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	b0 f0       	brcs	.+44     	; 0x1510 <u8g2_DrawHVLine+0x6e>
      {
	if ( dir == 2 )
    14e4:	02 30       	cpi	r16, 0x02	; 2
    14e6:	41 f4       	brne	.+16     	; 0x14f8 <u8g2_DrawHVLine+0x56>
	{
	  x -= len;
    14e8:	62 1b       	sub	r22, r18
    14ea:	73 0b       	sbc	r23, r19
    14ec:	9b 01       	movw	r18, r22
	  x++;
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	3a 83       	std	Y+2, r19	; 0x02
    14f4:	29 83       	std	Y+1, r18	; 0x01
    14f6:	0c c0       	rjmp	.+24     	; 0x1510 <u8g2_DrawHVLine+0x6e>
	}
	else if ( dir == 3 )
    14f8:	03 30       	cpi	r16, 0x03	; 3
    14fa:	51 f4       	brne	.+20     	; 0x1510 <u8g2_DrawHVLine+0x6e>
	{
	  y -= len;
    14fc:	4b 81       	ldd	r20, Y+3	; 0x03
    14fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1500:	da 01       	movw	r26, r20
    1502:	a2 1b       	sub	r26, r18
    1504:	b3 0b       	sbc	r27, r19
    1506:	9d 01       	movw	r18, r26
	  y++;
    1508:	2f 5f       	subi	r18, 0xFF	; 255
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	7c 01       	movw	r14, r24
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
    1512:	10 2f       	mov	r17, r16
    1514:	11 70       	andi	r17, 0x01	; 1
    1516:	00 fd       	sbrc	r16, 0
    1518:	1d c0       	rjmp	.+58     	; 0x1554 <u8g2_DrawHVLine+0xb2>
      {
	if ( y < u8g2->user_y0 )
    151a:	fc 01       	movw	r30, r24
    151c:	20 ad       	ldd	r18, Z+56	; 0x38
    151e:	31 ad       	ldd	r19, Z+57	; 0x39
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	82 17       	cp	r24, r18
    1526:	93 07       	cpc	r25, r19
    1528:	08 f4       	brcc	.+2      	; 0x152c <u8g2_DrawHVLine+0x8a>
    152a:	47 c0       	rjmp	.+142    	; 0x15ba <u8g2_DrawHVLine+0x118>
	  return;
	if ( y >= u8g2->user_y1 )
    152c:	22 ad       	ldd	r18, Z+58	; 0x3a
    152e:	33 ad       	ldd	r19, Z+59	; 0x3b
    1530:	82 17       	cp	r24, r18
    1532:	93 07       	cpc	r25, r19
    1534:	08 f0       	brcs	.+2      	; 0x1538 <u8g2_DrawHVLine+0x96>
    1536:	41 c0       	rjmp	.+130    	; 0x15ba <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    1538:	26 a9       	ldd	r18, Z+54	; 0x36
    153a:	37 a9       	ldd	r19, Z+55	; 0x37
    153c:	44 a9       	ldd	r20, Z+52	; 0x34
    153e:	55 a9       	ldd	r21, Z+53	; 0x35
    1540:	be 01       	movw	r22, r28
    1542:	6b 5f       	subi	r22, 0xFB	; 251
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	ce 01       	movw	r24, r28
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	0e 94 10 0a 	call	0x1420	; 0x1420 <u8g2_clip_intersection2>
    154e:	81 11       	cpse	r24, r1
    1550:	23 c0       	rjmp	.+70     	; 0x1598 <u8g2_DrawHVLine+0xf6>
    1552:	33 c0       	rjmp	.+102    	; 0x15ba <u8g2_DrawHVLine+0x118>
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    1554:	dc 01       	movw	r26, r24
    1556:	d4 96       	adiw	r26, 0x34	; 52
    1558:	2d 91       	ld	r18, X+
    155a:	3c 91       	ld	r19, X
    155c:	d5 97       	sbiw	r26, 0x35	; 53
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	82 17       	cp	r24, r18
    1564:	93 07       	cpc	r25, r19
    1566:	48 f1       	brcs	.+82     	; 0x15ba <u8g2_DrawHVLine+0x118>
	  return;
	if ( x >= u8g2->user_x1 )
    1568:	d6 96       	adiw	r26, 0x36	; 54
    156a:	2d 91       	ld	r18, X+
    156c:	3c 91       	ld	r19, X
    156e:	d7 97       	sbiw	r26, 0x37	; 55
    1570:	82 17       	cp	r24, r18
    1572:	93 07       	cpc	r25, r19
    1574:	10 f5       	brcc	.+68     	; 0x15ba <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    1576:	da 96       	adiw	r26, 0x3a	; 58
    1578:	2d 91       	ld	r18, X+
    157a:	3c 91       	ld	r19, X
    157c:	db 97       	sbiw	r26, 0x3b	; 59
    157e:	d8 96       	adiw	r26, 0x38	; 56
    1580:	4d 91       	ld	r20, X+
    1582:	5c 91       	ld	r21, X
    1584:	d9 97       	sbiw	r26, 0x39	; 57
    1586:	be 01       	movw	r22, r28
    1588:	6b 5f       	subi	r22, 0xFB	; 251
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	ce 01       	movw	r24, r28
    158e:	03 96       	adiw	r24, 0x03	; 3
    1590:	0e 94 10 0a 	call	0x1420	; 0x1420 <u8g2_clip_intersection2>
    1594:	88 23       	and	r24, r24
    1596:	89 f0       	breq	.+34     	; 0x15ba <u8g2_DrawHVLine+0x118>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    1598:	d7 01       	movw	r26, r14
    159a:	90 96       	adiw	r26, 0x20	; 32
    159c:	ed 91       	ld	r30, X+
    159e:	fc 91       	ld	r31, X
    15a0:	91 97       	sbiw	r26, 0x21	; 33
    15a2:	04 80       	ldd	r0, Z+4	; 0x04
    15a4:	f5 81       	ldd	r31, Z+5	; 0x05
    15a6:	e0 2d       	mov	r30, r0
    15a8:	2d 81       	ldd	r18, Y+5	; 0x05
    15aa:	3e 81       	ldd	r19, Y+6	; 0x06
    15ac:	4b 81       	ldd	r20, Y+3	; 0x03
    15ae:	5c 81       	ldd	r21, Y+4	; 0x04
    15b0:	69 81       	ldd	r22, Y+1	; 0x01
    15b2:	7a 81       	ldd	r23, Y+2	; 0x02
    15b4:	01 2f       	mov	r16, r17
    15b6:	c7 01       	movw	r24, r14
    15b8:	09 95       	icall
    }
}
    15ba:	26 96       	adiw	r28, 0x06	; 6
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	08 95       	ret

000015d4 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    15d4:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
    15d6:	00 e0       	ldi	r16, 0x00	; 0
    15d8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <u8g2_DrawHVLine>
}
    15dc:	0f 91       	pop	r16
    15de:	08 95       	ret

000015e0 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    15e0:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
    15e2:	01 e0       	ldi	r16, 0x01	; 1
    15e4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <u8g2_DrawHVLine>
}
    15e8:	0f 91       	pop	r16
    15ea:	08 95       	ret

000015ec <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    15ec:	0f 93       	push	r16
    15ee:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    15f0:	80 ad       	ldd	r24, Z+56	; 0x38
    15f2:	91 ad       	ldd	r25, Z+57	; 0x39
    15f4:	48 17       	cp	r20, r24
    15f6:	59 07       	cpc	r21, r25
    15f8:	a8 f0       	brcs	.+42     	; 0x1624 <u8g2_DrawPixel+0x38>
    return;
  if ( y >= u8g2->user_y1 )
    15fa:	82 ad       	ldd	r24, Z+58	; 0x3a
    15fc:	93 ad       	ldd	r25, Z+59	; 0x3b
    15fe:	48 17       	cp	r20, r24
    1600:	59 07       	cpc	r21, r25
    1602:	80 f4       	brcc	.+32     	; 0x1624 <u8g2_DrawPixel+0x38>
    return;
  if ( x < u8g2->user_x0 )
    1604:	84 a9       	ldd	r24, Z+52	; 0x34
    1606:	95 a9       	ldd	r25, Z+53	; 0x35
    1608:	68 17       	cp	r22, r24
    160a:	79 07       	cpc	r23, r25
    160c:	58 f0       	brcs	.+22     	; 0x1624 <u8g2_DrawPixel+0x38>
    return;
  if ( x >= u8g2->user_x1 )
    160e:	86 a9       	ldd	r24, Z+54	; 0x36
    1610:	97 a9       	ldd	r25, Z+55	; 0x37
    1612:	68 17       	cp	r22, r24
    1614:	79 07       	cpc	r23, r25
    1616:	30 f4       	brcc	.+12     	; 0x1624 <u8g2_DrawPixel+0x38>
    1618:	cf 01       	movw	r24, r30
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	21 e0       	ldi	r18, 0x01	; 1
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <u8g2_DrawHVLine>
}
    1624:	0f 91       	pop	r16
    1626:	08 95       	ret

00001628 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1628:	46 17       	cp	r20, r22
    162a:	57 07       	cpc	r21, r23
    162c:	40 f4       	brcc	.+16     	; 0x163e <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
    162e:	82 17       	cp	r24, r18
    1630:	93 07       	cpc	r25, r19
    1632:	68 f0       	brcs	.+26     	; 0x164e <u8g2_is_intersection_decision_tree+0x26>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    1634:	24 17       	cp	r18, r20
    1636:	35 07       	cpc	r19, r21
    1638:	60 f4       	brcc	.+24     	; 0x1652 <u8g2_is_intersection_decision_tree+0x2a>
      {
	return 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    163e:	82 17       	cp	r24, r18
    1640:	93 07       	cpc	r25, r19
    1642:	48 f4       	brcc	.+18     	; 0x1656 <u8g2_is_intersection_decision_tree+0x2e>
    {
      if ( v0 > v1 )	// v0 > v1
    1644:	24 17       	cp	r18, r20
    1646:	35 07       	cpc	r19, r21
    1648:	40 f4       	brcc	.+16     	; 0x165a <u8g2_is_intersection_decision_tree+0x32>
      {
	return 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	08 95       	ret
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    165a:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0;
    }
  }
}
    165c:	08 95       	ret

0000165e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ec 01       	movw	r28, r24
    1670:	7b 01       	movw	r14, r22
    1672:	69 01       	movw	r12, r18
    1674:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    1676:	6a ad       	ldd	r22, Y+58	; 0x3a
    1678:	7b ad       	ldd	r23, Y+59	; 0x3b
    167a:	88 ad       	ldd	r24, Y+56	; 0x38
    167c:	99 ad       	ldd	r25, Y+57	; 0x39
    167e:	0e 94 14 0b 	call	0x1628	; 0x1628 <u8g2_is_intersection_decision_tree>
    1682:	88 23       	and	r24, r24
    1684:	41 f0       	breq	.+16     	; 0x1696 <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    1686:	6e a9       	ldd	r22, Y+54	; 0x36
    1688:	7f a9       	ldd	r23, Y+55	; 0x37
    168a:	96 01       	movw	r18, r12
    168c:	a7 01       	movw	r20, r14
    168e:	8c a9       	ldd	r24, Y+52	; 0x34
    1690:	9d a9       	ldd	r25, Y+53	; 0x35
    1692:	0e 94 14 0b 	call	0x1628	; 0x1628 <u8g2_is_intersection_decision_tree>
}
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	08 95       	ret

000016a8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	dc 01       	movw	r26, r24
    16b2:	ca 01       	movw	r24, r20
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    16b4:	54 2f       	mov	r21, r20
    16b6:	57 70       	andi	r21, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    16b8:	c1 e0       	ldi	r28, 0x01	; 1
    16ba:	d0 e0       	ldi	r29, 0x00	; 0
    16bc:	05 2e       	mov	r0, r21
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    16c0:	cc 0f       	add	r28, r28
    16c2:	dd 1f       	adc	r29, r29
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    16c8:	1c 2f       	mov	r17, r28

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    16ca:	fd 01       	movw	r30, r26
    16cc:	ec 58       	subi	r30, 0x8C	; 140
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	e0 81       	ld	r30, Z
    16d2:	e2 30       	cpi	r30, 0x02	; 2
    16d4:	10 f0       	brcs	.+4      	; 0x16da <u8g2_ll_hvline_vertical_top_lsb+0x32>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <u8g2_ll_hvline_vertical_top_lsb+0x34>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    16da:	4c 2f       	mov	r20, r28
  if ( u8g2->draw_color != 1 )
    16dc:	e1 30       	cpi	r30, 0x01	; 1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    16e0:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    16e2:	88 7f       	andi	r24, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    16e4:	ed 91       	ld	r30, X+
    16e6:	fc 91       	ld	r31, X
    16e8:	11 97       	sbiw	r26, 0x01	; 1
    16ea:	c0 89       	ldd	r28, Z+16	; 0x10
    16ec:	c8 9f       	mul	r28, r24
    16ee:	f0 01       	movw	r30, r0
    16f0:	c9 9f       	mul	r28, r25
    16f2:	f0 0d       	add	r31, r0
    16f4:	11 24       	eor	r1, r1
  ptr = u8g2->tile_buf_ptr;
    16f6:	92 96       	adiw	r26, 0x22	; 34
    16f8:	8d 91       	ld	r24, X+
    16fa:	9c 91       	ld	r25, X
    16fc:	93 97       	sbiw	r26, 0x23	; 35
  ptr += offset;
  ptr += x;
    16fe:	6e 0f       	add	r22, r30
    1700:	7f 1f       	adc	r23, r31
    1702:	fc 01       	movw	r30, r24
    1704:	e6 0f       	add	r30, r22
    1706:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    1708:	01 11       	cpse	r16, r1
    170a:	08 c0       	rjmp	.+16     	; 0x171c <u8g2_ll_hvline_vertical_top_lsb+0x74>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    170c:	80 81       	ld	r24, Z
    170e:	84 2b       	or	r24, r20
	*ptr ^= xor_mask;
    1710:	81 27       	eor	r24, r17
    1712:	81 93       	st	Z+, r24
	ptr++;
	len--;
    1714:	21 50       	subi	r18, 0x01	; 1
    1716:	31 09       	sbc	r19, r1
      } while( len != 0 );
    1718:	c9 f7       	brne	.-14     	; 0x170c <u8g2_ll_hvline_vertical_top_lsb+0x64>
    171a:	21 c0       	rjmp	.+66     	; 0x175e <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    171c:	90 81       	ld	r25, Z
    171e:	94 2b       	or	r25, r20
      *ptr ^= xor_mask;
    1720:	91 27       	eor	r25, r17
    1722:	90 83       	st	Z, r25
      
      bit_pos++;
    1724:	5f 5f       	subi	r21, 0xFF	; 255
      bit_pos &= 7;
    1726:	57 70       	andi	r21, 0x07	; 7

      len--;
    1728:	21 50       	subi	r18, 0x01	; 1
    172a:	31 09       	sbc	r19, r1

      if ( bit_pos == 0 )
    172c:	51 11       	cpse	r21, r1
    172e:	10 c0       	rjmp	.+32     	; 0x1750 <u8g2_ll_hvline_vertical_top_lsb+0xa8>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    1730:	96 96       	adiw	r26, 0x26	; 38
    1732:	8d 91       	ld	r24, X+
    1734:	9c 91       	ld	r25, X
    1736:	97 97       	sbiw	r26, 0x27	; 39
    1738:	e8 0f       	add	r30, r24
    173a:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    173c:	ed 01       	movw	r28, r26
    173e:	cc 58       	subi	r28, 0x8C	; 140
    1740:	df 4f       	sbci	r29, 0xFF	; 255
    1742:	88 81       	ld	r24, Y
    1744:	82 30       	cpi	r24, 0x02	; 2
    1746:	08 f4       	brcc	.+2      	; 0x174a <u8g2_ll_hvline_vertical_top_lsb+0xa2>
	  or_mask  = 1;
    1748:	41 e0       	ldi	r20, 0x01	; 1
	if ( u8g2->draw_color != 1 )
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	21 f4       	brne	.+8      	; 0x1756 <u8g2_ll_hvline_vertical_top_lsb+0xae>
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    1750:	44 0f       	add	r20, r20
	xor_mask <<= 1;
    1752:	11 0f       	add	r17, r17
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    1756:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    1758:	21 15       	cp	r18, r1
    175a:	31 05       	cpc	r19, r1
    175c:	f9 f6       	brne	.-66     	; 0x171c <u8g2_ll_hvline_vertical_top_lsb+0x74>
  }
}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	08 95       	ret

00001768 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	fc 01       	movw	r30, r24
    176e:	a0 81       	ld	r26, Z
    1770:	b1 81       	ldd	r27, Z+1	; 0x01
    1772:	84 a1       	ldd	r24, Z+36	; 0x24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9c 01       	movw	r18, r24
    1778:	22 0f       	add	r18, r18
    177a:	33 1f       	adc	r19, r19
    177c:	22 0f       	add	r18, r18
    177e:	33 1f       	adc	r19, r19
    1780:	22 0f       	add	r18, r18
    1782:	33 1f       	adc	r19, r19
    1784:	31 a7       	std	Z+41, r19	; 0x29
    1786:	20 a7       	std	Z+40, r18	; 0x28
    1788:	50 96       	adiw	r26, 0x10	; 16
    178a:	2c 91       	ld	r18, X
    178c:	50 97       	sbiw	r26, 0x10	; 16
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	22 0f       	add	r18, r18
    1796:	33 1f       	adc	r19, r19
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	37 a3       	std	Z+39, r19	; 0x27
    179e:	26 a3       	std	Z+38, r18	; 0x26
    17a0:	75 a1       	ldd	r23, Z+37	; 0x25
    17a2:	27 2f       	mov	r18, r23
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	a9 01       	movw	r20, r18
    17a8:	44 0f       	add	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	44 0f       	add	r20, r20
    17ae:	55 1f       	adc	r21, r21
    17b0:	44 0f       	add	r20, r20
    17b2:	55 1f       	adc	r21, r21
    17b4:	53 a7       	std	Z+43, r21	; 0x2b
    17b6:	42 a7       	std	Z+42, r20	; 0x2a
    17b8:	28 0f       	add	r18, r24
    17ba:	39 1f       	adc	r19, r25
    17bc:	51 96       	adiw	r26, 0x11	; 17
    17be:	6c 91       	ld	r22, X
    17c0:	51 97       	sbiw	r26, 0x11	; 17
    17c2:	c6 2f       	mov	r28, r22
    17c4:	d0 e0       	ldi	r29, 0x00	; 0
    17c6:	c2 17       	cp	r28, r18
    17c8:	d3 07       	cpc	r29, r19
    17ca:	18 f4       	brcc	.+6      	; 0x17d2 <u8g2_update_dimension_common+0x6a>
    17cc:	ce 01       	movw	r24, r28
    17ce:	87 1b       	sub	r24, r23
    17d0:	91 09       	sbc	r25, r1
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	55 a7       	std	Z+45, r21	; 0x2d
    17e0:	44 a7       	std	Z+44, r20	; 0x2c
    17e2:	84 0f       	add	r24, r20
    17e4:	95 1f       	adc	r25, r21
    17e6:	97 a7       	std	Z+47, r25	; 0x2f
    17e8:	86 a7       	std	Z+46, r24	; 0x2e
    17ea:	54 96       	adiw	r26, 0x14	; 20
    17ec:	8d 91       	ld	r24, X+
    17ee:	9c 91       	ld	r25, X
    17f0:	55 97       	sbiw	r26, 0x15	; 21
    17f2:	91 ab       	std	Z+49, r25	; 0x31
    17f4:	80 ab       	std	Z+48, r24	; 0x30
    17f6:	56 96       	adiw	r26, 0x16	; 22
    17f8:	8d 91       	ld	r24, X+
    17fa:	9c 91       	ld	r25, X
    17fc:	57 97       	sbiw	r26, 0x17	; 23
    17fe:	93 ab       	std	Z+51, r25	; 0x33
    1800:	82 ab       	std	Z+50, r24	; 0x32
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	08 95       	ret

00001808 <u8g2_update_dimension_r0>:
    1808:	0e 94 b4 0b 	call	0x1768	; 0x1768 <u8g2_update_dimension_common>
    180c:	08 95       	ret

0000180e <u8g2_apply_clip_window>:
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	ec 01       	movw	r28, r24
    1818:	fc 01       	movw	r30, r24
    181a:	ee 5b       	subi	r30, 0xBE	; 190
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	00 81       	ld	r16, Z
    1820:	11 81       	ldd	r17, Z+1	; 0x01
    1822:	2e ad       	ldd	r18, Y+62	; 0x3e
    1824:	3f ad       	ldd	r19, Y+63	; 0x3f
    1826:	32 97       	sbiw	r30, 0x02	; 2
    1828:	40 81       	ld	r20, Z
    182a:	51 81       	ldd	r21, Z+1	; 0x01
    182c:	6c ad       	ldd	r22, Y+60	; 0x3c
    182e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1830:	0e 94 2f 0b 	call	0x165e	; 0x165e <u8g2_IsIntersection>
    1834:	81 11       	cpse	r24, r1
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <u8g2_apply_clip_window+0x32>
    1838:	c2 59       	subi	r28, 0x92	; 146
    183a:	df 4f       	sbci	r29, 0xFF	; 255
    183c:	18 82       	st	Y, r1
    183e:	2f c0       	rjmp	.+94     	; 0x189e <u8g2_apply_clip_window+0x90>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	fe 01       	movw	r30, r28
    1844:	e2 59       	subi	r30, 0x92	; 146
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 83       	st	Z, r24
    184a:	2c a9       	ldd	r18, Y+52	; 0x34
    184c:	3d a9       	ldd	r19, Y+53	; 0x35
    184e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1850:	9d ad       	ldd	r25, Y+61	; 0x3d
    1852:	28 17       	cp	r18, r24
    1854:	39 07       	cpc	r19, r25
    1856:	10 f4       	brcc	.+4      	; 0x185c <u8g2_apply_clip_window+0x4e>
    1858:	9d ab       	std	Y+53, r25	; 0x35
    185a:	8c ab       	std	Y+52, r24	; 0x34
    185c:	2e a9       	ldd	r18, Y+54	; 0x36
    185e:	3f a9       	ldd	r19, Y+55	; 0x37
    1860:	8e ad       	ldd	r24, Y+62	; 0x3e
    1862:	9f ad       	ldd	r25, Y+63	; 0x3f
    1864:	82 17       	cp	r24, r18
    1866:	93 07       	cpc	r25, r19
    1868:	10 f4       	brcc	.+4      	; 0x186e <u8g2_apply_clip_window+0x60>
    186a:	9f ab       	std	Y+55, r25	; 0x37
    186c:	8e ab       	std	Y+54, r24	; 0x36
    186e:	28 ad       	ldd	r18, Y+56	; 0x38
    1870:	39 ad       	ldd	r19, Y+57	; 0x39
    1872:	fe 01       	movw	r30, r28
    1874:	e0 5c       	subi	r30, 0xC0	; 192
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	28 17       	cp	r18, r24
    187e:	39 07       	cpc	r19, r25
    1880:	10 f4       	brcc	.+4      	; 0x1886 <u8g2_apply_clip_window+0x78>
    1882:	99 af       	std	Y+57, r25	; 0x39
    1884:	88 af       	std	Y+56, r24	; 0x38
    1886:	2a ad       	ldd	r18, Y+58	; 0x3a
    1888:	3b ad       	ldd	r19, Y+59	; 0x3b
    188a:	fe 01       	movw	r30, r28
    188c:	ee 5b       	subi	r30, 0xBE	; 190
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	82 17       	cp	r24, r18
    1896:	93 07       	cpc	r25, r19
    1898:	10 f4       	brcc	.+4      	; 0x189e <u8g2_apply_clip_window+0x90>
    189a:	9b af       	std	Y+59, r25	; 0x3b
    189c:	8a af       	std	Y+58, r24	; 0x3a
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <u8g2_update_page_win_r0>:
    18a8:	fc 01       	movw	r30, r24
    18aa:	15 aa       	std	Z+53, r1	; 0x35
    18ac:	14 aa       	std	Z+52, r1	; 0x34
    18ae:	80 a9       	ldd	r24, Z+48	; 0x30
    18b0:	91 a9       	ldd	r25, Z+49	; 0x31
    18b2:	97 ab       	std	Z+55, r25	; 0x37
    18b4:	86 ab       	std	Z+54, r24	; 0x36
    18b6:	84 a5       	ldd	r24, Z+44	; 0x2c
    18b8:	95 a5       	ldd	r25, Z+45	; 0x2d
    18ba:	91 af       	std	Z+57, r25	; 0x39
    18bc:	80 af       	std	Z+56, r24	; 0x38
    18be:	86 a5       	ldd	r24, Z+46	; 0x2e
    18c0:	97 a5       	ldd	r25, Z+47	; 0x2f
    18c2:	93 af       	std	Z+59, r25	; 0x3b
    18c4:	82 af       	std	Z+58, r24	; 0x3a
    18c6:	cf 01       	movw	r24, r30
    18c8:	0e 94 07 0c 	call	0x180e	; 0x180e <u8g2_apply_clip_window>
    18cc:	08 95       	ret

000018ce <u8g2_draw_mirror_vertical_r0>:
    18ce:	0f 93       	push	r16
    18d0:	fa 01       	movw	r30, r20
    18d2:	dc 01       	movw	r26, r24
    18d4:	d2 96       	adiw	r26, 0x32	; 50
    18d6:	4d 91       	ld	r20, X+
    18d8:	5c 91       	ld	r21, X
    18da:	d3 97       	sbiw	r26, 0x33	; 51
    18dc:	4e 1b       	sub	r20, r30
    18de:	5f 0b       	sbc	r21, r31
    18e0:	00 ff       	sbrs	r16, 0
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <u8g2_draw_mirror_vertical_r0+0x1c>
    18e4:	42 1b       	sub	r20, r18
    18e6:	53 0b       	sbc	r21, r19
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <u8g2_draw_mirror_vertical_r0+0x20>
    18ea:	41 50       	subi	r20, 0x01	; 1
    18ec:	51 09       	sbc	r21, r1
    18ee:	0e 94 42 0a 	call	0x1484	; 0x1484 <u8g2_draw_hv_line_2dir>
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <u8g2_SetMaxClipWindow>:
    18f6:	dc 01       	movw	r26, r24
    18f8:	dd 96       	adiw	r26, 0x3d	; 61
    18fa:	1c 92       	st	X, r1
    18fc:	1e 92       	st	-X, r1
    18fe:	dc 97       	sbiw	r26, 0x3c	; 60
    1900:	fc 01       	movw	r30, r24
    1902:	e0 5c       	subi	r30, 0xC0	; 192
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	11 82       	std	Z+1, r1	; 0x01
    1908:	10 82       	st	Z, r1
    190a:	2f ef       	ldi	r18, 0xFF	; 255
    190c:	3f ef       	ldi	r19, 0xFF	; 255
    190e:	fc 01       	movw	r30, r24
    1910:	37 af       	std	Z+63, r19	; 0x3f
    1912:	26 af       	std	Z+62, r18	; 0x3e
    1914:	ee 5b       	subi	r30, 0xBE	; 190
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	31 83       	std	Z+1, r19	; 0x01
    191a:	20 83       	st	Z, r18
    191c:	90 96       	adiw	r26, 0x20	; 32
    191e:	ed 91       	ld	r30, X+
    1920:	fc 91       	ld	r31, X
    1922:	91 97       	sbiw	r26, 0x21	; 33
    1924:	02 80       	ldd	r0, Z+2	; 0x02
    1926:	f3 81       	ldd	r31, Z+3	; 0x03
    1928:	e0 2d       	mov	r30, r0
    192a:	09 95       	icall
    192c:	08 95       	ret

0000192e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    1938:	fc 01       	movw	r30, r24
    193a:	ec 5b       	subi	r30, 0xBC	; 188
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	11 82       	std	Z+1, r1	; 0x01
    1940:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    1942:	3f 8f       	std	Y+31, r19	; 0x1f
    1944:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    1946:	7b a3       	std	Y+35, r23	; 0x23
    1948:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    194a:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    194c:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    194e:	3f 96       	adiw	r30, 0x0f	; 15
    1950:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    1952:	b0 96       	adiw	r30, 0x20	; 32
    1954:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    1956:	34 97       	sbiw	r30, 0x04	; 4
    1958:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    195a:	35 96       	adiw	r30, 0x05	; 5
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    1960:	31 96       	adiw	r30, 0x01	; 1
    1962:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    1964:	19 a3       	std	Y+33, r17	; 0x21
    1966:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    1968:	d8 01       	movw	r26, r16
    196a:	ed 91       	ld	r30, X+
    196c:	fc 91       	ld	r31, X
    196e:	ce 01       	movw	r24, r28
    1970:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    1972:	ce 01       	movw	r24, r28
    1974:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    1978:	ce 01       	movw	r24, r28
    197a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    197e:	ca 5a       	subi	r28, 0xAA	; 170
    1980:	df 4f       	sbci	r29, 0xFF	; 255
    1982:	18 82       	st	Y, r1
#endif
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <u8x8_ascii_next>:
      tile++;
      xx++;
    } while( xx < th );
    y+=2;
  } while( y < tv );  
}
    198e:	66 23       	and	r22, r22
    1990:	29 f0       	breq	.+10     	; 0x199c <u8x8_ascii_next+0xe>
    1992:	6a 30       	cpi	r22, 0x0A	; 10
    1994:	31 f0       	breq	.+12     	; 0x19a2 <u8x8_ascii_next+0x14>
    1996:	86 2f       	mov	r24, r22
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	08 95       	ret
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	08 95       	ret
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	9f ef       	ldi	r25, 0xFF	; 255
    19a6:	08 95       	ret

000019a8 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    19a8:	fc 01       	movw	r30, r24
    19aa:	10 8e       	std	Z+24, r1	; 0x18
    19ac:	08 95       	ret

000019ae <u8x8_byte_SetDC>:
    case U8X8_MSG_BYTE_START_TRANSFER:
    case U8X8_MSG_BYTE_END_TRANSFER:
      break;	/* do nothing */
  }
  return 1;	/* always succeed */
}
    19ae:	46 2f       	mov	r20, r22
    19b0:	dc 01       	movw	r26, r24
    19b2:	18 96       	adiw	r26, 0x08	; 8
    19b4:	ed 91       	ld	r30, X+
    19b6:	fc 91       	ld	r31, X
    19b8:	19 97       	sbiw	r26, 0x09	; 9
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	60 e2       	ldi	r22, 0x20	; 32
    19c0:	09 95       	icall
    19c2:	08 95       	ret

000019c4 <u8x8_byte_SendBytes>:
    19c4:	9a 01       	movw	r18, r20
    19c6:	dc 01       	movw	r26, r24
    19c8:	18 96       	adiw	r26, 0x08	; 8
    19ca:	ed 91       	ld	r30, X+
    19cc:	fc 91       	ld	r31, X
    19ce:	19 97       	sbiw	r26, 0x09	; 9
    19d0:	46 2f       	mov	r20, r22
    19d2:	67 e1       	ldi	r22, 0x17	; 23
    19d4:	09 95       	icall
    19d6:	08 95       	ret

000019d8 <u8x8_byte_SendByte>:
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	1f 92       	push	r1
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	69 83       	std	Y+1, r22	; 0x01
    19e4:	ae 01       	movw	r20, r28
    19e6:	4f 5f       	subi	r20, 0xFF	; 255
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <u8x8_byte_SendBytes>
    19f0:	0f 90       	pop	r0
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <u8x8_byte_4wire_sw_spi>:
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
*/

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    19f8:	bf 92       	push	r11
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	ec 01       	movw	r28, r24
    1a0c:	b4 2e       	mov	r11, r20
    1a0e:	79 01       	movw	r14, r18
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
    1a10:	a8 81       	ld	r26, Y
    1a12:	b9 81       	ldd	r27, Y+1	; 0x01
    1a14:	1c 96       	adiw	r26, 0x0c	; 12
    1a16:	8c 91       	ld	r24, X
    1a18:	1c 97       	sbiw	r26, 0x0c	; 12
    1a1a:	81 70       	andi	r24, 0x01	; 1
    1a1c:	d8 2e       	mov	r13, r24
  uint8_t not_takeover_edge = 1 - takeover_edge;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	c8 2e       	mov	r12, r24
    1a22:	cd 18       	sub	r12, r13
 
  switch(msg)
    1a24:	68 31       	cpi	r22, 0x18	; 24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <u8x8_byte_4wire_sw_spi+0x32>
    1a28:	56 c0       	rjmp	.+172    	; 0x1ad6 <u8x8_byte_4wire_sw_spi+0xde>
    1a2a:	28 f4       	brcc	.+10     	; 0x1a36 <u8x8_byte_4wire_sw_spi+0x3e>
    1a2c:	64 31       	cpi	r22, 0x14	; 20
    1a2e:	e9 f1       	breq	.+122    	; 0x1aaa <u8x8_byte_4wire_sw_spi+0xb2>
    1a30:	67 31       	cpi	r22, 0x17	; 23
    1a32:	b9 f1       	breq	.+110    	; 0x1aa2 <u8x8_byte_4wire_sw_spi+0xaa>
    1a34:	74 c0       	rjmp	.+232    	; 0x1b1e <u8x8_byte_4wire_sw_spi+0x126>
    1a36:	69 31       	cpi	r22, 0x19	; 25
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <u8x8_byte_4wire_sw_spi+0x44>
    1a3a:	5f c0       	rjmp	.+190    	; 0x1afa <u8x8_byte_4wire_sw_spi+0x102>
    1a3c:	60 32       	cpi	r22, 0x20	; 32
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <u8x8_byte_4wire_sw_spi+0x4a>
    1a40:	44 c0       	rjmp	.+136    	; 0x1aca <u8x8_byte_4wire_sw_spi+0xd2>
    1a42:	6d c0       	rjmp	.+218    	; 0x1b1e <u8x8_byte_4wire_sw_spi+0x126>
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
    1a44:	f7 01       	movw	r30, r14
    1a46:	01 91       	ld	r16, Z+
    1a48:	7f 01       	movw	r14, r30
	data++;
	arg_int--;
    1a4a:	ba 94       	dec	r11
	for( i = 0; i < 8; i++ )
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
    1a4e:	27 c0       	rjmp	.+78     	; 0x1a9e <u8x8_byte_4wire_sw_spi+0xa6>
	{
	  if ( b & 128 )
    1a50:	00 23       	and	r16, r16
    1a52:	34 f4       	brge	.+12     	; 0x1a60 <u8x8_byte_4wire_sw_spi+0x68>
	    u8x8_gpio_SetSPIData(u8x8, 1);
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	61 e4       	ldi	r22, 0x41	; 65
    1a58:	ce 01       	movw	r24, r28
    1a5a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <u8x8_byte_4wire_sw_spi+0x72>
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	61 e4       	ldi	r22, 0x41	; 65
    1a64:	ce 01       	movw	r24, r28
    1a66:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
	  b <<= 1;
    1a6a:	00 0f       	add	r16, r16
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
    1a6c:	4c 2d       	mov	r20, r12
    1a6e:	60 e4       	ldi	r22, 0x40	; 64
    1a70:	ce 01       	movw	r24, r28
    1a72:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
    1a76:	e8 81       	ld	r30, Y
    1a78:	f9 81       	ldd	r31, Y+1	; 0x01
    1a7a:	46 81       	ldd	r20, Z+6	; 0x06
    1a7c:	6c e2       	ldi	r22, 0x2C	; 44
    1a7e:	ce 01       	movw	r24, r28
    1a80:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
    1a84:	4d 2d       	mov	r20, r13
    1a86:	60 e4       	ldi	r22, 0x40	; 64
    1a88:	ce 01       	movw	r24, r28
    1a8a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
    1a8e:	e8 81       	ld	r30, Y
    1a90:	f9 81       	ldd	r31, Y+1	; 0x01
    1a92:	47 81       	ldd	r20, Z+7	; 0x07
    1a94:	6c e2       	ldi	r22, 0x2C	; 44
    1a96:	ce 01       	movw	r24, r28
    1a98:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = 0; i < 8; i++ )
    1a9c:	1f 5f       	subi	r17, 0xFF	; 255
    1a9e:	18 30       	cpi	r17, 0x08	; 8
    1aa0:	b8 f2       	brcs	.-82     	; 0x1a50 <u8x8_byte_4wire_sw_spi+0x58>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
    1aa2:	b1 10       	cpse	r11, r1
    1aa4:	cf cf       	rjmp	.-98     	; 0x1a44 <u8x8_byte_4wire_sw_spi+0x4c>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	3b c0       	rjmp	.+118    	; 0x1b20 <u8x8_byte_4wire_sw_spi+0x128>
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
    1aaa:	11 96       	adiw	r26, 0x01	; 1
    1aac:	4c 91       	ld	r20, X
    1aae:	69 e4       	ldi	r22, 0x49	; 73
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
    1ab6:	e8 81       	ld	r30, Y
    1ab8:	f9 81       	ldd	r31, Y+1	; 0x01
    1aba:	44 85       	ldd	r20, Z+12	; 0x0c
    1abc:	41 70       	andi	r20, 0x01	; 1
    1abe:	60 e4       	ldi	r22, 0x40	; 64
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    1ac8:	2b c0       	rjmp	.+86     	; 0x1b20 <u8x8_byte_4wire_sw_spi+0x128>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
    1aca:	6a e4       	ldi	r22, 0x4A	; 74
    1acc:	ce 01       	movw	r24, r28
    1ace:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    1ad4:	25 c0       	rjmp	.+74     	; 0x1b20 <u8x8_byte_4wire_sw_spi+0x128>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
    1ad6:	4c 91       	ld	r20, X
    1ad8:	69 e4       	ldi	r22, 0x49	; 73
    1ada:	ce 01       	movw	r24, r28
    1adc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
    1ae0:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ae2:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ae4:	a8 81       	ld	r26, Y
    1ae6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	12 96       	adiw	r26, 0x02	; 2
    1aee:	4c 91       	ld	r20, X
    1af0:	6c e2       	ldi	r22, 0x2C	; 44
    1af2:	ce 01       	movw	r24, r28
    1af4:	09 95       	icall
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    1af8:	13 c0       	rjmp	.+38     	; 0x1b20 <u8x8_byte_4wire_sw_spi+0x128>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
    1afa:	ea 85       	ldd	r30, Y+10	; 0x0a
    1afc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	13 96       	adiw	r26, 0x03	; 3
    1b04:	4c 91       	ld	r20, X
    1b06:	6c e2       	ldi	r22, 0x2C	; 44
    1b08:	ce 01       	movw	r24, r28
    1b0a:	09 95       	icall
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
    1b0c:	e8 81       	ld	r30, Y
    1b0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b10:	41 81       	ldd	r20, Z+1	; 0x01
    1b12:	69 e4       	ldi	r22, 0x49	; 73
    1b14:	ce 01       	movw	r24, r28
    1b16:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
      break;
    default:
      return 0;
  }
  return 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <u8x8_byte_4wire_sw_spi+0x128>
    default:
      return 0;
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	df 90       	pop	r13
    1b2e:	cf 90       	pop	r12
    1b30:	bf 90       	pop	r11
    1b32:	08 95       	ret

00001b34 <u8x8_cad_SendCmd>:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
}
    1b34:	46 2f       	mov	r20, r22
    1b36:	dc 01       	movw	r26, r24
    1b38:	16 96       	adiw	r26, 0x06	; 6
    1b3a:	ed 91       	ld	r30, X+
    1b3c:	fc 91       	ld	r31, X
    1b3e:	17 97       	sbiw	r26, 0x07	; 7
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	65 e1       	ldi	r22, 0x15	; 21
    1b46:	09 95       	icall
    1b48:	08 95       	ret

00001b4a <u8x8_cad_SendArg>:
    1b4a:	46 2f       	mov	r20, r22
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	16 96       	adiw	r26, 0x06	; 6
    1b50:	ed 91       	ld	r30, X+
    1b52:	fc 91       	ld	r31, X
    1b54:	17 97       	sbiw	r26, 0x07	; 7
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	66 e1       	ldi	r22, 0x16	; 22
    1b5c:	09 95       	icall
    1b5e:	08 95       	ret

00001b60 <u8x8_cad_SendData>:
    1b60:	9a 01       	movw	r18, r20
    1b62:	dc 01       	movw	r26, r24
    1b64:	16 96       	adiw	r26, 0x06	; 6
    1b66:	ed 91       	ld	r30, X+
    1b68:	fc 91       	ld	r31, X
    1b6a:	17 97       	sbiw	r26, 0x07	; 7
    1b6c:	46 2f       	mov	r20, r22
    1b6e:	67 e1       	ldi	r22, 0x17	; 23
    1b70:	09 95       	icall
    1b72:	08 95       	ret

00001b74 <u8x8_cad_StartTransfer>:
    1b74:	dc 01       	movw	r26, r24
    1b76:	16 96       	adiw	r26, 0x06	; 6
    1b78:	ed 91       	ld	r30, X+
    1b7a:	fc 91       	ld	r31, X
    1b7c:	17 97       	sbiw	r26, 0x07	; 7
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	68 e1       	ldi	r22, 0x18	; 24
    1b86:	09 95       	icall
    1b88:	08 95       	ret

00001b8a <u8x8_cad_EndTransfer>:
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	16 96       	adiw	r26, 0x06	; 6
    1b8e:	ed 91       	ld	r30, X+
    1b90:	fc 91       	ld	r31, X
    1b92:	17 97       	sbiw	r26, 0x07	; 7
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	69 e1       	ldi	r22, 0x19	; 25
    1b9c:	09 95       	icall
    1b9e:	08 95       	ret

00001ba0 <u8x8_cad_SendSequence>:
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	1f 92       	push	r1
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	7c 01       	movw	r14, r24
    1bb4:	8b 01       	movw	r16, r22
    1bb6:	d8 01       	movw	r26, r16
    1bb8:	6d 91       	ld	r22, X+
    1bba:	8d 01       	movw	r16, r26
    1bbc:	67 31       	cpi	r22, 0x17	; 23
    1bbe:	b9 f0       	breq	.+46     	; 0x1bee <u8x8_cad_SendSequence+0x4e>
    1bc0:	18 f4       	brcc	.+6      	; 0x1bc8 <u8x8_cad_SendSequence+0x28>
    1bc2:	65 31       	cpi	r22, 0x15	; 21
    1bc4:	30 f4       	brcc	.+12     	; 0x1bd2 <u8x8_cad_SendSequence+0x32>
    1bc6:	33 c0       	rjmp	.+102    	; 0x1c2e <u8x8_cad_SendSequence+0x8e>
    1bc8:	6a 31       	cpi	r22, 0x1A	; 26
    1bca:	e8 f0       	brcs	.+58     	; 0x1c06 <u8x8_cad_SendSequence+0x66>
    1bcc:	6e 3f       	cpi	r22, 0xFE	; 254
    1bce:	31 f1       	breq	.+76     	; 0x1c1c <u8x8_cad_SendSequence+0x7c>
    1bd0:	2e c0       	rjmp	.+92     	; 0x1c2e <u8x8_cad_SendSequence+0x8e>
    1bd2:	fd 01       	movw	r30, r26
    1bd4:	41 91       	ld	r20, Z+
    1bd6:	8f 01       	movw	r16, r30
    1bd8:	49 83       	std	Y+1, r20	; 0x01
    1bda:	d7 01       	movw	r26, r14
    1bdc:	16 96       	adiw	r26, 0x06	; 6
    1bde:	ed 91       	ld	r30, X+
    1be0:	fc 91       	ld	r31, X
    1be2:	17 97       	sbiw	r26, 0x07	; 7
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	c7 01       	movw	r24, r14
    1bea:	09 95       	icall
    1bec:	e4 cf       	rjmp	.-56     	; 0x1bb6 <u8x8_cad_SendSequence+0x16>
    1bee:	fd 01       	movw	r30, r26
    1bf0:	81 91       	ld	r24, Z+
    1bf2:	8f 01       	movw	r16, r30
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	ae 01       	movw	r20, r28
    1bf8:	4f 5f       	subi	r20, 0xFF	; 255
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	c7 01       	movw	r24, r14
    1c00:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <u8x8_cad_SendData>
    1c04:	d8 cf       	rjmp	.-80     	; 0x1bb6 <u8x8_cad_SendSequence+0x16>
    1c06:	d7 01       	movw	r26, r14
    1c08:	16 96       	adiw	r26, 0x06	; 6
    1c0a:	ed 91       	ld	r30, X+
    1c0c:	fc 91       	ld	r31, X
    1c0e:	17 97       	sbiw	r26, 0x07	; 7
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	c7 01       	movw	r24, r14
    1c18:	09 95       	icall
    1c1a:	cd cf       	rjmp	.-102    	; 0x1bb6 <u8x8_cad_SendSequence+0x16>
    1c1c:	fd 01       	movw	r30, r26
    1c1e:	41 91       	ld	r20, Z+
    1c20:	8f 01       	movw	r16, r30
    1c22:	49 83       	std	Y+1, r20	; 0x01
    1c24:	69 e2       	ldi	r22, 0x29	; 41
    1c26:	c7 01       	movw	r24, r14
    1c28:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
    1c2c:	c4 cf       	rjmp	.-120    	; 0x1bb6 <u8x8_cad_SendSequence+0x16>
    1c2e:	0f 90       	pop	r0
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	08 95       	ret

00001c3e <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	8c 01       	movw	r16, r24
    1c4c:	c6 2f       	mov	r28, r22
    1c4e:	d4 2f       	mov	r29, r20
    1c50:	79 01       	movw	r14, r18
  switch(msg)
    1c52:	66 31       	cpi	r22, 0x16	; 22
    1c54:	a1 f0       	breq	.+40     	; 0x1c7e <u8x8_cad_001+0x40>
    1c56:	28 f4       	brcc	.+10     	; 0x1c62 <u8x8_cad_001+0x24>
    1c58:	64 31       	cpi	r22, 0x14	; 20
    1c5a:	e9 f0       	breq	.+58     	; 0x1c96 <u8x8_cad_001+0x58>
    1c5c:	65 31       	cpi	r22, 0x15	; 21
    1c5e:	31 f0       	breq	.+12     	; 0x1c6c <u8x8_cad_001+0x2e>
    1c60:	25 c0       	rjmp	.+74     	; 0x1cac <u8x8_cad_001+0x6e>
    1c62:	67 31       	cpi	r22, 0x17	; 23
    1c64:	a9 f0       	breq	.+42     	; 0x1c90 <u8x8_cad_001+0x52>
    1c66:	6a 31       	cpi	r22, 0x1A	; 26
    1c68:	08 f5       	brcc	.+66     	; 0x1cac <u8x8_cad_001+0x6e>
    1c6a:	15 c0       	rjmp	.+42     	; 0x1c96 <u8x8_cad_001+0x58>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    1c72:	6d 2f       	mov	r22, r29
    1c74:	c8 01       	movw	r24, r16
    1c76:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1c7c:	18 c0       	rjmp	.+48     	; 0x1cae <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    1c84:	6d 2f       	mov	r22, r29
    1c86:	c8 01       	movw	r24, r16
    1c88:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    1c96:	d8 01       	movw	r26, r16
    1c98:	18 96       	adiw	r26, 0x08	; 8
    1c9a:	ed 91       	ld	r30, X+
    1c9c:	fc 91       	ld	r31, X
    1c9e:	19 97       	sbiw	r26, 0x09	; 9
    1ca0:	97 01       	movw	r18, r14
    1ca2:	4d 2f       	mov	r20, r29
    1ca4:	6c 2f       	mov	r22, r28
    1ca6:	c8 01       	movw	r24, r16
    1ca8:	09 95       	icall
    1caa:	01 c0       	rjmp	.+2      	; 0x1cae <u8x8_cad_001+0x70>
    default:
      return 0;
    1cac:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	08 95       	ret

00001cbc <u8x8_d_helper_display_setup_memory>:
*/
void u8x8_InitInterface(u8x8_t *u8x8)
{
  u8x8_gpio_Init(u8x8);
  u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
}
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	71 83       	std	Z+1, r23	; 0x01
    1cc0:	60 83       	st	Z, r22
    1cc2:	fb 01       	movw	r30, r22
    1cc4:	22 89       	ldd	r18, Z+18	; 0x12
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	24 8b       	std	Z+20, r18	; 0x14
    1cca:	08 95       	ret

00001ccc <u8x8_d_helper_display_init>:
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cd4:	fb 85       	ldd	r31, Y+11	; 0x0b
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	68 e2       	ldi	r22, 0x28	; 40
    1cde:	09 95       	icall
    1ce0:	ee 81       	ldd	r30, Y+6	; 0x06
    1ce2:	ff 81       	ldd	r31, Y+7	; 0x07
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	64 e1       	ldi	r22, 0x14	; 20
    1cec:	ce 01       	movw	r24, r28
    1cee:	09 95       	icall
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	6b e4       	ldi	r22, 0x4B	; 75
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
    1cfa:	e8 81       	ld	r30, Y
    1cfc:	f9 81       	ldd	r31, Y+1	; 0x01
    1cfe:	44 81       	ldd	r20, Z+4	; 0x04
    1d00:	69 e2       	ldi	r22, 0x29	; 41
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	6b e4       	ldi	r22, 0x4B	; 75
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
    1d12:	e8 81       	ld	r30, Y
    1d14:	f9 81       	ldd	r31, Y+1	; 0x01
    1d16:	44 81       	ldd	r20, Z+4	; 0x04
    1d18:	69 e2       	ldi	r22, 0x29	; 41
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	6b e4       	ldi	r22, 0x4B	; 75
    1d24:	ce 01       	movw	r24, r28
    1d26:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
    1d2a:	e8 81       	ld	r30, Y
    1d2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d2e:	45 81       	ldd	r20, Z+5	; 0x05
    1d30:	69 e2       	ldi	r22, 0x29	; 41
    1d32:	ce 01       	movw	r24, r28
    1d34:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <u8x8_gpio_call>
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <u8x8_DrawTile>:
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <u8x8_DrawTile+0xa>
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <u8x8_DrawTile+0xc>
    1d4a:	1f 92       	push	r1
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	6c 83       	std	Y+4, r22	; 0x04
    1d52:	4d 83       	std	Y+5, r20	; 0x05
    1d54:	2b 83       	std	Y+3, r18	; 0x03
    1d56:	1a 83       	std	Y+2, r17	; 0x02
    1d58:	09 83       	std	Y+1, r16	; 0x01
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	14 96       	adiw	r26, 0x04	; 4
    1d5e:	ed 91       	ld	r30, X+
    1d60:	fc 91       	ld	r31, X
    1d62:	15 97       	sbiw	r26, 0x05	; 5
    1d64:	9e 01       	movw	r18, r28
    1d66:	2f 5f       	subi	r18, 0xFF	; 255
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	41 e0       	ldi	r20, 0x01	; 1
    1d6c:	6f e0       	ldi	r22, 0x0F	; 15
    1d6e:	09 95       	icall
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	08 95       	ret

00001d84 <u8x8_SetupMemory>:
    1d84:	dc 01       	movw	r26, r24
    1d86:	14 96       	adiw	r26, 0x04	; 4
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	15 97       	sbiw	r26, 0x05	; 5
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	69 e0       	ldi	r22, 0x09	; 9
    1d96:	09 95       	icall
    1d98:	08 95       	ret

00001d9a <u8x8_InitDisplay>:
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	14 96       	adiw	r26, 0x04	; 4
    1d9e:	ed 91       	ld	r30, X+
    1da0:	fc 91       	ld	r31, X
    1da2:	15 97       	sbiw	r26, 0x05	; 5
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	6a e0       	ldi	r22, 0x0A	; 10
    1dac:	09 95       	icall
    1dae:	08 95       	ret

00001db0 <u8x8_SetPowerSave>:
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    1db0:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    1db2:	dc 01       	movw	r26, r24
    1db4:	14 96       	adiw	r26, 0x04	; 4
    1db6:	ed 91       	ld	r30, X+
    1db8:	fc 91       	ld	r31, X
    1dba:	15 97       	sbiw	r26, 0x05	; 5
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	6b e0       	ldi	r22, 0x0B	; 11
    1dc2:	09 95       	icall
    1dc4:	08 95       	ret

00001dc6 <u8x8_SetFlipMode>:
}

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
    1dc6:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
    1dc8:	dc 01       	movw	r26, r24
    1dca:	14 96       	adiw	r26, 0x04	; 4
    1dcc:	ed 91       	ld	r30, X+
    1dce:	fc 91       	ld	r31, X
    1dd0:	15 97       	sbiw	r26, 0x05	; 5
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	6d e0       	ldi	r22, 0x0D	; 13
    1dd8:	09 95       	icall
    1dda:	08 95       	ret

00001ddc <u8x8_SetContrast>:
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
    1ddc:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    1dde:	dc 01       	movw	r26, r24
    1de0:	14 96       	adiw	r26, 0x04	; 4
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	15 97       	sbiw	r26, 0x05	; 5
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	6e e0       	ldi	r22, 0x0E	; 14
    1dee:	09 95       	icall
    1df0:	08 95       	ret

00001df2 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    1df2:	dc 01       	movw	r26, r24
    1df4:	14 96       	adiw	r26, 0x04	; 4
    1df6:	ed 91       	ld	r30, X+
    1df8:	fc 91       	ld	r31, X
    1dfa:	15 97       	sbiw	r26, 0x05	; 5
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	60 e1       	ldi	r22, 0x10	; 16
    1e04:	09 95       	icall
    1e06:	08 95       	ret

00001e08 <u8x8_d_st7565_common>:
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
}
    1e08:	df 92       	push	r13
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	8c 01       	movw	r16, r24
    1e18:	c4 2f       	mov	r28, r20
    1e1a:	79 01       	movw	r14, r18
    1e1c:	6e 30       	cpi	r22, 0x0E	; 14
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <u8x8_d_st7565_common+0x1a>
    1e20:	4c c0       	rjmp	.+152    	; 0x1eba <u8x8_d_st7565_common+0xb2>
    1e22:	6f 30       	cpi	r22, 0x0F	; 15
    1e24:	21 f0       	breq	.+8      	; 0x1e2e <u8x8_d_st7565_common+0x26>
    1e26:	6b 30       	cpi	r22, 0x0B	; 11
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <u8x8_d_st7565_common+0x24>
    1e2a:	58 c0       	rjmp	.+176    	; 0x1edc <u8x8_d_st7565_common+0xd4>
    1e2c:	38 c0       	rjmp	.+112    	; 0x1e9e <u8x8_d_st7565_common+0x96>
    1e2e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <u8x8_cad_StartTransfer>
    1e32:	f7 01       	movw	r30, r14
    1e34:	d3 80       	ldd	r13, Z+3	; 0x03
    1e36:	dd 0c       	add	r13, r13
    1e38:	dd 0c       	add	r13, r13
    1e3a:	dd 0c       	add	r13, r13
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	84 89       	ldd	r24, Z+20	; 0x14
    1e40:	d8 0e       	add	r13, r24
    1e42:	6d 2d       	mov	r22, r13
    1e44:	62 95       	swap	r22
    1e46:	6f 70       	andi	r22, 0x0F	; 15
    1e48:	60 61       	ori	r22, 0x10	; 16
    1e4a:	c8 01       	movw	r24, r16
    1e4c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <u8x8_cad_SendCmd>
    1e50:	6d 2d       	mov	r22, r13
    1e52:	6f 70       	andi	r22, 0x0F	; 15
    1e54:	c8 01       	movw	r24, r16
    1e56:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <u8x8_cad_SendCmd>
    1e5a:	f7 01       	movw	r30, r14
    1e5c:	64 81       	ldd	r22, Z+4	; 0x04
    1e5e:	60 6b       	ori	r22, 0xB0	; 176
    1e60:	c8 01       	movw	r24, r16
    1e62:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <u8x8_cad_SendCmd>
    1e66:	f7 01       	movw	r30, r14
    1e68:	d2 81       	ldd	r29, Z+2	; 0x02
    1e6a:	dd 0f       	add	r29, r29
    1e6c:	dd 0f       	add	r29, r29
    1e6e:	dd 0f       	add	r29, r29
    1e70:	e0 80       	ld	r14, Z
    1e72:	f1 80       	ldd	r15, Z+1	; 0x01
    1e74:	8d 2d       	mov	r24, r13
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	8d 0f       	add	r24, r29
    1e7a:	91 1d       	adc	r25, r1
    1e7c:	85 38       	cpi	r24, 0x85	; 133
    1e7e:	91 05       	cpc	r25, r1
    1e80:	10 f0       	brcs	.+4      	; 0x1e86 <u8x8_d_st7565_common+0x7e>
    1e82:	d4 e8       	ldi	r29, 0x84	; 132
    1e84:	dd 19       	sub	r29, r13
    1e86:	a7 01       	movw	r20, r14
    1e88:	6d 2f       	mov	r22, r29
    1e8a:	c8 01       	movw	r24, r16
    1e8c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <u8x8_cad_SendData>
    1e90:	c1 50       	subi	r28, 0x01	; 1
    1e92:	c9 f7       	brne	.-14     	; 0x1e86 <u8x8_d_st7565_common+0x7e>
    1e94:	c8 01       	movw	r24, r16
    1e96:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <u8x8_cad_EndTransfer>
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	20 c0       	rjmp	.+64     	; 0x1ede <u8x8_d_st7565_common+0xd6>
    1e9e:	41 11       	cpse	r20, r1
    1ea0:	06 c0       	rjmp	.+12     	; 0x1eae <u8x8_d_st7565_common+0xa6>
    1ea2:	6d e8       	ldi	r22, 0x8D	; 141
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <u8x8_cad_SendSequence>
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	18 c0       	rjmp	.+48     	; 0x1ede <u8x8_d_st7565_common+0xd6>
    1eae:	66 e8       	ldi	r22, 0x86	; 134
    1eb0:	71 e0       	ldi	r23, 0x01	; 1
    1eb2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <u8x8_cad_SendSequence>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	12 c0       	rjmp	.+36     	; 0x1ede <u8x8_d_st7565_common+0xd6>
    1eba:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <u8x8_cad_StartTransfer>
    1ebe:	61 e8       	ldi	r22, 0x81	; 129
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <u8x8_cad_SendCmd>
    1ec6:	6c 2f       	mov	r22, r28
    1ec8:	66 95       	lsr	r22
    1eca:	66 95       	lsr	r22
    1ecc:	c8 01       	movw	r24, r16
    1ece:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <u8x8_cad_SendArg>
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <u8x8_cad_EndTransfer>
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <u8x8_d_st7565_common+0xd6>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	df 90       	pop	r13
    1eec:	08 95       	ret

00001eee <u8x8_d_st7565_zolen_128x64>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_zolen_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	8c 01       	movw	r16, r24
    1ef8:	c6 2f       	mov	r28, r22
    1efa:	d4 2f       	mov	r29, r20
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
    1efc:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <u8x8_d_st7565_common>
    1f00:	81 11       	cpse	r24, r1
    1f02:	35 c0       	rjmp	.+106    	; 0x1f6e <u8x8_d_st7565_zolen_128x64+0x80>
  {
    /* msg not handled, then try here */
    switch(msg)
    1f04:	ca 30       	cpi	r28, 0x0A	; 10
    1f06:	59 f0       	breq	.+22     	; 0x1f1e <u8x8_d_st7565_zolen_128x64+0x30>
    1f08:	cd 30       	cpi	r28, 0x0D	; 13
    1f0a:	99 f0       	breq	.+38     	; 0x1f32 <u8x8_d_st7565_zolen_128x64+0x44>
    1f0c:	c9 30       	cpi	r28, 0x09	; 9
    1f0e:	81 f5       	brne	.+96     	; 0x1f70 <u8x8_d_st7565_zolen_128x64+0x82>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
    1f10:	60 e6       	ldi	r22, 0x60	; 96
    1f12:	71 e0       	ldi	r23, 0x01	; 1
    1f14:	c8 01       	movw	r24, r16
    1f16:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <u8x8_d_helper_display_setup_memory>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    /* msg not handled, then try here */
    switch(msg)
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
	break;
    1f1c:	29 c0       	rjmp	.+82     	; 0x1f70 <u8x8_d_st7565_zolen_128x64+0x82>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
    1f1e:	c8 01       	movw	r24, r16
    1f20:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zolen_128x64_init_seq);
    1f24:	6f e3       	ldi	r22, 0x3F	; 63
    1f26:	71 e0       	ldi	r23, 0x01	; 1
    1f28:	c8 01       	movw	r24, r16
    1f2a:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <u8x8_cad_SendSequence>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
	break;
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zolen_128x64_init_seq);
	break;
    1f30:	1f c0       	rjmp	.+62     	; 0x1f70 <u8x8_d_st7565_zolen_128x64+0x82>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
    1f32:	d1 11       	cpse	r29, r1
    1f34:	0e c0       	rjmp	.+28     	; 0x1f52 <u8x8_d_st7565_zolen_128x64+0x64>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip0_seq);
    1f36:	6f e7       	ldi	r22, 0x7F	; 127
    1f38:	71 e0       	ldi	r23, 0x01	; 1
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
    1f40:	d8 01       	movw	r26, r16
    1f42:	ed 91       	ld	r30, X+
    1f44:	fc 91       	ld	r31, X
    1f46:	11 97       	sbiw	r26, 0x01	; 1
    1f48:	82 89       	ldd	r24, Z+18	; 0x12
    1f4a:	54 96       	adiw	r26, 0x14	; 20
    1f4c:	8c 93       	st	X, r24
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <u8x8_d_st7565_zolen_128x64+0x82>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip0_seq);
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
	}
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip1_seq);
    1f52:	68 e7       	ldi	r22, 0x78	; 120
    1f54:	71 e0       	ldi	r23, 0x01	; 1
    1f56:	c8 01       	movw	r24, r16
    1f58:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1f5c:	d8 01       	movw	r26, r16
    1f5e:	ed 91       	ld	r30, X+
    1f60:	fc 91       	ld	r31, X
    1f62:	11 97       	sbiw	r26, 0x01	; 1
    1f64:	83 89       	ldd	r24, Z+19	; 0x13
    1f66:	54 96       	adiw	r26, 0x14	; 20
    1f68:	8c 93       	st	X, r24
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <u8x8_d_st7565_zolen_128x64+0x82>
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
}
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	08 95       	ret

00001f7a <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	1a 96       	adiw	r26, 0x0a	; 10
    1f7e:	ed 91       	ld	r30, X+
    1f80:	fc 91       	ld	r31, X
    1f82:	1b 97       	sbiw	r26, 0x0b	; 11
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	09 95       	icall
    1f8a:	08 95       	ret

00001f8c <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	08 95       	ret

00001f90 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    1f90:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    1f92:	11 82       	std	Z+1, r1	; 0x01
    1f94:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    1f96:	86 ec       	ldi	r24, 0xC6	; 198
    1f98:	9f e0       	ldi	r25, 0x0F	; 15
    1f9a:	95 83       	std	Z+5, r25	; 0x05
    1f9c:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    1f9e:	97 83       	std	Z+7, r25	; 0x07
    1fa0:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    1fa2:	91 87       	std	Z+9, r25	; 0x09
    1fa4:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1fa6:	93 87       	std	Z+11, r25	; 0x0b
    1fa8:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    1faa:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1fac:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    1fae:	14 86       	std	Z+12, r1	; 0x0c
    1fb0:	15 86       	std	Z+13, r1	; 0x0d
    1fb2:	16 86       	std	Z+14, r1	; 0x0e
    1fb4:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    1fb6:	8f ef       	ldi	r24, 0xFF	; 255
    1fb8:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1fba:	82 8f       	std	Z+26, r24	; 0x1a
    1fbc:	08 95       	ret

00001fbe <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1fbe:	af 92       	push	r10
    1fc0:	bf 92       	push	r11
    1fc2:	cf 92       	push	r12
    1fc4:	df 92       	push	r13
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	0f 93       	push	r16
    1fcc:	1f 93       	push	r17
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	ec 01       	movw	r28, r24
    1fd4:	5b 01       	movw	r10, r22
    1fd6:	6a 01       	movw	r12, r20
    1fd8:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1fda:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1fde:	bd 82       	std	Y+5, r11	; 0x05
    1fe0:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1fe2:	df 82       	std	Y+7, r13	; 0x07
    1fe4:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1fe6:	f9 86       	std	Y+9, r15	; 0x09
    1fe8:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1fea:	1b 87       	std	Y+11, r17	; 0x0b
    1fec:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1fee:	ce 01       	movw	r24, r28
    1ff0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <u8x8_SetupMemory>
}
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	df 90       	pop	r13
    2002:	cf 90       	pop	r12
    2004:	bf 90       	pop	r11
    2006:	af 90       	pop	r10
    2008:	08 95       	ret

0000200a <__vector_21>:
 */ 
#include "adc_hal.h"

volatile static uint8_t adc_convert_done = 1;

ISR(ADC_vect){
    200a:	1f 92       	push	r1
    200c:	0f 92       	push	r0
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	0f 92       	push	r0
    2012:	11 24       	eor	r1, r1
    2014:	8f 93       	push	r24
	adc_convert_done = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
    201c:	8f 91       	pop	r24
    201e:	0f 90       	pop	r0
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	0f 90       	pop	r0
    2024:	1f 90       	pop	r1
    2026:	18 95       	reti

00002028 <adc_init>:

void adc_init(void){
	ADMUX |= REFS_1_1V << REFS0 | 1 << REFS1;
    2028:	ec e7       	ldi	r30, 0x7C	; 124
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	80 6c       	ori	r24, 0xC0	; 192
    2030:	80 83       	st	Z, r24
	ADCSRA |= 1 << ADEN | 1 << ADIE | 0b111 << ADPS0;
    2032:	ea e7       	ldi	r30, 0x7A	; 122
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8f 68       	ori	r24, 0x8F	; 143
    203a:	80 83       	st	Z, r24
    203c:	08 95       	ret

0000203e <u8x8_avr_gpio_and_delay>:

uint8_t u8x8_avr_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
	// Re-use library for delays

	switch(msg)
    203e:	61 34       	cpi	r22, 0x41	; 65
    2040:	41 f1       	breq	.+80     	; 0x2092 <u8x8_avr_gpio_and_delay+0x54>
    2042:	28 f4       	brcc	.+10     	; 0x204e <u8x8_avr_gpio_and_delay+0x10>
    2044:	68 32       	cpi	r22, 0x28	; 40
    2046:	59 f0       	breq	.+22     	; 0x205e <u8x8_avr_gpio_and_delay+0x20>
    2048:	60 34       	cpi	r22, 0x40	; 64
    204a:	c9 f0       	breq	.+50     	; 0x207e <u8x8_avr_gpio_and_delay+0x40>
    204c:	49 c0       	rjmp	.+146    	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
    204e:	6a 34       	cpi	r22, 0x4A	; 74
    2050:	a1 f1       	breq	.+104    	; 0x20ba <u8x8_avr_gpio_and_delay+0x7c>
    2052:	6b 34       	cpi	r22, 0x4B	; 75
    2054:	e1 f1       	breq	.+120    	; 0x20ce <u8x8_avr_gpio_and_delay+0x90>
    2056:	69 34       	cpi	r22, 0x49	; 73
    2058:	09 f0       	breq	.+2      	; 0x205c <u8x8_avr_gpio_and_delay+0x1e>
    205a:	42 c0       	rjmp	.+132    	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
    205c:	24 c0       	rjmp	.+72     	; 0x20a6 <u8x8_avr_gpio_and_delay+0x68>
	{
		case U8X8_MSG_GPIO_AND_DELAY_INIT:  // called once during init phase of u8g2/u8x8
		DISPLAY_CLK_DIR |= 1<<DISPLAY_CLK_PIN;
    205e:	87 b1       	in	r24, 0x07	; 7
    2060:	84 60       	ori	r24, 0x04	; 4
    2062:	87 b9       	out	0x07, r24	; 7
		DISPLAY_DATA_DIR |= 1<<DISPLAY_DATA_PIN;
    2064:	87 b1       	in	r24, 0x07	; 7
    2066:	88 60       	ori	r24, 0x08	; 8
    2068:	87 b9       	out	0x07, r24	; 7
		DISPLAY_CS_DIR |= 1<<DISPLAY_CS_PIN;
    206a:	8d b1       	in	r24, 0x0d	; 13
    206c:	88 60       	ori	r24, 0x08	; 8
    206e:	8d b9       	out	0x0d, r24	; 13
		DISPLAY_DC_DIR |= 1<<DISPLAY_DC_PIN;
    2070:	87 b1       	in	r24, 0x07	; 7
    2072:	82 60       	ori	r24, 0x02	; 2
    2074:	87 b9       	out	0x07, r24	; 7
		DISPLAY_RESET_DIR |= 1<<DISPLAY_RESET_PIN;
    2076:	87 b1       	in	r24, 0x07	; 7
    2078:	81 60       	ori	r24, 0x01	; 1
    207a:	87 b9       	out	0x07, r24	; 7
		
		break;              // can be used to setup pins
    207c:	31 c0       	rjmp	.+98     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		case U8X8_MSG_GPIO_SPI_CLOCK:        // Clock pin: Output level in arg_int
		if(arg_int)
    207e:	44 23       	and	r20, r20
    2080:	21 f0       	breq	.+8      	; 0x208a <u8x8_avr_gpio_and_delay+0x4c>
		DISPLAY_CLK_PORT |= (1<<DISPLAY_CLK_PIN);
    2082:	88 b1       	in	r24, 0x08	; 8
    2084:	84 60       	ori	r24, 0x04	; 4
    2086:	88 b9       	out	0x08, r24	; 8
    2088:	2b c0       	rjmp	.+86     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_CLK_PORT &= ~(1<<DISPLAY_CLK_PIN);
    208a:	88 b1       	in	r24, 0x08	; 8
    208c:	8b 7f       	andi	r24, 0xFB	; 251
    208e:	88 b9       	out	0x08, r24	; 8
    2090:	27 c0       	rjmp	.+78     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		break;
		case U8X8_MSG_GPIO_SPI_DATA:        // MOSI pin: Output level in arg_int
		if(arg_int)
    2092:	44 23       	and	r20, r20
    2094:	21 f0       	breq	.+8      	; 0x209e <u8x8_avr_gpio_and_delay+0x60>
		DISPLAY_DATA_PORT |= (1<<DISPLAY_DATA_PIN);
    2096:	88 b1       	in	r24, 0x08	; 8
    2098:	88 60       	ori	r24, 0x08	; 8
    209a:	88 b9       	out	0x08, r24	; 8
    209c:	21 c0       	rjmp	.+66     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_DATA_PORT &= ~(1<<DISPLAY_DATA_PIN);
    209e:	88 b1       	in	r24, 0x08	; 8
    20a0:	87 7f       	andi	r24, 0xF7	; 247
    20a2:	88 b9       	out	0x08, r24	; 8
    20a4:	1d c0       	rjmp	.+58     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		break;
		case U8X8_MSG_GPIO_CS:        // CS (chip select) pin: Output level in arg_int
		if(arg_int)
    20a6:	44 23       	and	r20, r20
    20a8:	21 f0       	breq	.+8      	; 0x20b2 <u8x8_avr_gpio_and_delay+0x74>
		DISPLAY_CS_PORT |= (1<<DISPLAY_CS_PIN);
    20aa:	8e b1       	in	r24, 0x0e	; 14
    20ac:	88 60       	ori	r24, 0x08	; 8
    20ae:	8e b9       	out	0x0e, r24	; 14
    20b0:	17 c0       	rjmp	.+46     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_CS_PORT &= ~(1<<DISPLAY_CS_PIN);
    20b2:	8e b1       	in	r24, 0x0e	; 14
    20b4:	87 7f       	andi	r24, 0xF7	; 247
    20b6:	8e b9       	out	0x0e, r24	; 14
    20b8:	13 c0       	rjmp	.+38     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		break;
		case U8X8_MSG_GPIO_DC:        // DC (data/cmd, A0, register select) pin: Output level in arg_int
		if(arg_int)
    20ba:	44 23       	and	r20, r20
    20bc:	21 f0       	breq	.+8      	; 0x20c6 <u8x8_avr_gpio_and_delay+0x88>
		DISPLAY_DC_PORT |= (1<<DISPLAY_DC_PIN);
    20be:	88 b1       	in	r24, 0x08	; 8
    20c0:	82 60       	ori	r24, 0x02	; 2
    20c2:	88 b9       	out	0x08, r24	; 8
    20c4:	0d c0       	rjmp	.+26     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_DC_PORT &= ~(1<<DISPLAY_DC_PIN);
    20c6:	88 b1       	in	r24, 0x08	; 8
    20c8:	8d 7f       	andi	r24, 0xFD	; 253
    20ca:	88 b9       	out	0x08, r24	; 8
    20cc:	09 c0       	rjmp	.+18     	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		break;
		
		case U8X8_MSG_GPIO_RESET:     // Reset pin: Output level in arg_int
		if(arg_int)
    20ce:	44 23       	and	r20, r20
    20d0:	21 f0       	breq	.+8      	; 0x20da <u8x8_avr_gpio_and_delay+0x9c>
		DISPLAY_RESET_PORT |= (1<<DISPLAY_RESET_PIN);
    20d2:	88 b1       	in	r24, 0x08	; 8
    20d4:	81 60       	ori	r24, 0x01	; 1
    20d6:	88 b9       	out	0x08, r24	; 8
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_RESET_PORT &= ~(1<<DISPLAY_RESET_PIN);
    20da:	88 b1       	in	r24, 0x08	; 8
    20dc:	8e 7f       	andi	r24, 0xFE	; 254
    20de:	88 b9       	out	0x08, r24	; 8
		return 1;
		u8x8_SetGPIOResult(u8x8, 1);      // default return value
		break;
	}
	return 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	08 95       	ret

000020e4 <set_pin_level>:

}


void set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
    20e4:	66 23       	and	r22, r22
    20e6:	99 f0       	breq	.+38     	; 0x210e <set_pin_level+0x2a>
    20e8:	dc 01       	movw	r26, r24
    20ea:	ed 91       	ld	r30, X+
    20ec:	fc 91       	ld	r31, X
    20ee:	11 97       	sbiw	r26, 0x01	; 1
    20f0:	21 e0       	ldi	r18, 0x01	; 1
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	12 96       	adiw	r26, 0x02	; 2
    20f8:	0c 90       	ld	r0, X
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <set_pin_level+0x1c>
    20fc:	44 0f       	add	r20, r20
    20fe:	55 1f       	adc	r21, r21
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <set_pin_level+0x18>
    2104:	ca 01       	movw	r24, r20
    2106:	90 81       	ld	r25, Z
    2108:	89 2b       	or	r24, r25
    210a:	80 83       	st	Z, r24
    210c:	08 95       	ret
    210e:	dc 01       	movw	r26, r24
    2110:	ed 91       	ld	r30, X+
    2112:	fc 91       	ld	r31, X
    2114:	11 97       	sbiw	r26, 0x01	; 1
    2116:	21 e0       	ldi	r18, 0x01	; 1
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	a9 01       	movw	r20, r18
    211c:	12 96       	adiw	r26, 0x02	; 2
    211e:	0c 90       	ld	r0, X
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <set_pin_level+0x42>
    2122:	44 0f       	add	r20, r20
    2124:	55 1f       	adc	r21, r21
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <set_pin_level+0x3e>
    212a:	ca 01       	movw	r24, r20
    212c:	80 95       	com	r24
    212e:	90 81       	ld	r25, Z
    2130:	89 23       	and	r24, r25
    2132:	80 83       	st	Z, r24
    2134:	08 95       	ret

00002136 <set_pin_dir>:
    2136:	fc 01       	movw	r30, r24
    2138:	30 81       	ld	r19, Z
    213a:	21 81       	ldd	r18, Z+1	; 0x01
    213c:	61 30       	cpi	r22, 0x01	; 1
    213e:	99 f0       	breq	.+38     	; 0x2166 <set_pin_dir+0x30>
    2140:	18 f0       	brcs	.+6      	; 0x2148 <set_pin_dir+0x12>
    2142:	62 30       	cpi	r22, 0x02	; 2
    2144:	f1 f0       	breq	.+60     	; 0x2182 <set_pin_dir+0x4c>
    2146:	08 95       	ret
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 80       	ldd	r0, Z+2	; 0x02
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <set_pin_dir+0x1e>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <set_pin_dir+0x1a>
    2158:	e3 2f       	mov	r30, r19
    215a:	f2 2f       	mov	r31, r18
    215c:	80 95       	com	r24
    215e:	92 91       	ld	r25, -Z
    2160:	89 23       	and	r24, r25
    2162:	80 83       	st	Z, r24
    2164:	08 95       	ret
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 80       	ldd	r0, Z+2	; 0x02
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <set_pin_dir+0x3c>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <set_pin_dir+0x38>
    2176:	e3 2f       	mov	r30, r19
    2178:	f2 2f       	mov	r31, r18
    217a:	92 91       	ld	r25, -Z
    217c:	89 2b       	or	r24, r25
    217e:	80 83       	st	Z, r24
    2180:	08 95       	ret
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	ac 01       	movw	r20, r24
    2188:	02 80       	ldd	r0, Z+2	; 0x02
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <set_pin_dir+0x5a>
    218c:	44 0f       	add	r20, r20
    218e:	55 1f       	adc	r21, r21
    2190:	0a 94       	dec	r0
    2192:	e2 f7       	brpl	.-8      	; 0x218c <set_pin_dir+0x56>
    2194:	a3 2f       	mov	r26, r19
    2196:	b2 2f       	mov	r27, r18
    2198:	40 95       	com	r20
    219a:	2e 91       	ld	r18, -X
    219c:	42 23       	and	r20, r18
    219e:	4c 93       	st	X, r20
    21a0:	a0 81       	ld	r26, Z
    21a2:	b1 81       	ldd	r27, Z+1	; 0x01
    21a4:	02 80       	ldd	r0, Z+2	; 0x02
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <set_pin_dir+0x76>
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	0a 94       	dec	r0
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <set_pin_dir+0x72>
    21b0:	80 95       	com	r24
    21b2:	9c 91       	ld	r25, X
    21b4:	89 23       	and	r24, r25
    21b6:	8c 93       	st	X, r24
    21b8:	08 95       	ret

000021ba <toggle_pin_level>:
}

void toggle_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
    21ba:	dc 01       	movw	r26, r24
    21bc:	ed 91       	ld	r30, X+
    21be:	fc 91       	ld	r31, X
    21c0:	11 97       	sbiw	r26, 0x01	; 1
	if (*tmp_port & (1 << GPIOx->pin)) {
    21c2:	12 96       	adiw	r26, 0x02	; 2
    21c4:	2c 91       	ld	r18, X
    21c6:	df 01       	movw	r26, r30
    21c8:	12 97       	sbiw	r26, 0x02	; 2
    21ca:	8c 91       	ld	r24, X
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	02 2e       	mov	r0, r18
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <toggle_pin_level+0x1c>
    21d2:	95 95       	asr	r25
    21d4:	87 95       	ror	r24
    21d6:	0a 94       	dec	r0
    21d8:	e2 f7       	brpl	.-8      	; 0x21d2 <toggle_pin_level+0x18>
    21da:	80 ff       	sbrs	r24, 0
    21dc:	0c c0       	rjmp	.+24     	; 0x21f6 <toggle_pin_level+0x3c>
		*GPIOx->port &= ~(1 << GPIOx->pin);
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <toggle_pin_level+0x2e>
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	2a 95       	dec	r18
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <toggle_pin_level+0x2a>
    21ec:	80 95       	com	r24
    21ee:	90 81       	ld	r25, Z
    21f0:	89 23       	and	r24, r25
    21f2:	80 83       	st	Z, r24
    21f4:	08 95       	ret
		} else {
		*GPIOx->port |= 1 << GPIOx->pin;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <toggle_pin_level+0x46>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	2a 95       	dec	r18
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <toggle_pin_level+0x42>
    2204:	90 81       	ld	r25, Z
    2206:	89 2b       	or	r24, r25
    2208:	80 83       	st	Z, r24
    220a:	08 95       	ret

0000220c <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
    220c:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <rtc_config_3>
    2210:	80 61       	ori	r24, 0x10	; 16
    2212:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <rtc_config_3>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
    2216:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <rtc_config_2>
    221a:	81 61       	ori	r24, 0x11	; 17
    221c:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
    2220:	22 e0       	ldi	r18, 0x02	; 2
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	51 e0       	ldi	r21, 0x01	; 1
    2228:	6b e0       	ldi	r22, 0x0B	; 11
    222a:	82 e3       	ldi	r24, 0x32	; 50
    222c:	0e 94 8e 12 	call	0x251c	; 0x251c <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
    2230:	21 e0       	ldi	r18, 0x01	; 1
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4b eb       	ldi	r20, 0xBB	; 187
    2236:	55 e0       	ldi	r21, 0x05	; 5
    2238:	6d e0       	ldi	r22, 0x0D	; 13
    223a:	82 e3       	ldi	r24, 0x32	; 50
    223c:	0e 94 8e 12 	call	0x251c	; 0x251c <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
    2240:	21 e0       	ldi	r18, 0x01	; 1
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a eb       	ldi	r20, 0xBA	; 186
    2246:	55 e0       	ldi	r21, 0x05	; 5
    2248:	6f e0       	ldi	r22, 0x0F	; 15
    224a:	82 e3       	ldi	r24, 0x32	; 50
    224c:	0e 94 8e 12 	call	0x251c	; 0x251c <twi_write>
    2250:	08 95       	ret

00002252 <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
    2252:	98 2f       	mov	r25, r24
    2254:	92 95       	swap	r25
    2256:	9f 70       	andi	r25, 0x0F	; 15
    2258:	99 0f       	add	r25, r25
    225a:	29 2f       	mov	r18, r25
    225c:	22 0f       	add	r18, r18
    225e:	22 0f       	add	r18, r18
    2260:	92 0f       	add	r25, r18
    2262:	8f 70       	andi	r24, 0x0F	; 15
}
    2264:	89 0f       	add	r24, r25
    2266:	08 95       	ret

00002268 <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	27 97       	sbiw	r28, 0x07	; 7
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
    2282:	27 e0       	ldi	r18, 0x07	; 7
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	ae 01       	movw	r20, r28
    2288:	4f 5f       	subi	r20, 0xFF	; 255
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	82 e3       	ldi	r24, 0x32	; 50
    2290:	0e 94 13 12 	call	0x2426	; 0x2426 <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	0e 94 29 11 	call	0x2252	; 0x2252 <BCDtoDEC>
    229a:	f8 01       	movw	r30, r16
    229c:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	0e 94 29 11 	call	0x2252	; 0x2252 <BCDtoDEC>
    22a4:	f8 01       	movw	r30, r16
    22a6:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	0e 94 29 11 	call	0x2252	; 0x2252 <BCDtoDEC>
    22ae:	f8 01       	movw	r30, r16
    22b0:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
    22b2:	8c 81       	ldd	r24, Y+4	; 0x04
    22b4:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	0e 94 29 11 	call	0x2252	; 0x2252 <BCDtoDEC>
    22bc:	f8 01       	movw	r30, r16
    22be:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
    22c0:	8e 81       	ldd	r24, Y+6	; 0x06
    22c2:	0e 94 29 11 	call	0x2252	; 0x2252 <BCDtoDEC>
    22c6:	f8 01       	movw	r30, r16
    22c8:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
    22ca:	8f 81       	ldd	r24, Y+7	; 0x07
    22cc:	0e 94 29 11 	call	0x2252	; 0x2252 <BCDtoDEC>
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	f8 01       	movw	r30, r16
    22d4:	96 83       	std	Z+6, r25	; 0x06
    22d6:	85 83       	std	Z+5, r24	; 0x05
}
    22d8:	27 96       	adiw	r28, 0x07	; 7
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	08 95       	ret

000022ee <twi_start>:
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
    22ee:	85 ea       	ldi	r24, 0xA5	; 165
    22f0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
ISR(TWI1_vect){
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
    22f8:	05 c0       	rjmp	.+10     	; 0x2304 <twi_start+0x16>
		i++;
    22fa:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
    22fc:	80 34       	cpi	r24, 0x40	; 64
    22fe:	26 e0       	ldi	r18, 0x06	; 6
    2300:	92 07       	cpc	r25, r18
    2302:	30 f4       	brcc	.+12     	; 0x2310 <twi_start+0x22>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
    2304:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
    2308:	28 30       	cpi	r18, 0x08	; 8
    230a:	b9 f7       	brne	.-18     	; 0x22fa <twi_start+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    2310:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
    2312:	08 95       	ret

00002314 <twi_stop>:

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
    2314:	85 e9       	ldi	r24, 0x95	; 149
    2316:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    231a:	08 95       	ret

0000231c <twi_restart>:
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
    231c:	85 ea       	ldi	r24, 0xA5	; 165
    231e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
    2326:	05 c0       	rjmp	.+10     	; 0x2332 <twi_restart+0x16>
		i++;
    2328:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
    232a:	80 34       	cpi	r24, 0x40	; 64
    232c:	26 e0       	ldi	r18, 0x06	; 6
    232e:	92 07       	cpc	r25, r18
    2330:	30 f4       	brcc	.+12     	; 0x233e <twi_restart+0x22>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
    2332:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
    2336:	20 31       	cpi	r18, 0x10	; 16
    2338:	b9 f7       	brne	.-18     	; 0x2328 <twi_restart+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    233e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
    2340:	08 95       	ret

00002342 <twi_addr_write_ack>:

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    2342:	85 e8       	ldi	r24, 0x85	; 133
    2344:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	}
	return TWI_OK;
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <twi_addr_write_ack+0x16>
		i++;
    234e:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
    2350:	80 34       	cpi	r24, 0x40	; 64
    2352:	26 e0       	ldi	r18, 0x06	; 6
    2354:	92 07       	cpc	r25, r18
    2356:	30 f4       	brcc	.+12     	; 0x2364 <twi_addr_write_ack+0x22>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
    2358:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
    235c:	28 31       	cpi	r18, 0x18	; 24
    235e:	b9 f7       	brne	.-18     	; 0x234e <twi_addr_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    2364:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
    2366:	08 95       	ret

00002368 <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    2368:	85 e8       	ldi	r24, 0x85	; 133
    236a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
    2372:	05 c0       	rjmp	.+10     	; 0x237e <twi_data_write_ack+0x16>
		i++;
    2374:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
    2376:	80 34       	cpi	r24, 0x40	; 64
    2378:	26 e0       	ldi	r18, 0x06	; 6
    237a:	92 07       	cpc	r25, r18
    237c:	30 f4       	brcc	.+12     	; 0x238a <twi_data_write_ack+0x22>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
    237e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
    2382:	28 32       	cpi	r18, 0x28	; 40
    2384:	b9 f7       	brne	.-18     	; 0x2374 <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    238a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
    238c:	08 95       	ret

0000238e <twi_addr_read_ack>:


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    238e:	85 e8       	ldi	r24, 0x85	; 133
    2390:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <twi_addr_read_ack+0x16>
		i++;
    239a:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
    239c:	80 34       	cpi	r24, 0x40	; 64
    239e:	26 e0       	ldi	r18, 0x06	; 6
    23a0:	92 07       	cpc	r25, r18
    23a2:	30 f4       	brcc	.+12     	; 0x23b0 <twi_addr_read_ack+0x22>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
    23a4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
    23a8:	20 34       	cpi	r18, 0x40	; 64
    23aa:	b9 f7       	brne	.-18     	; 0x239a <twi_addr_read_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
    23b2:	08 95       	ret

000023b4 <twi_data_read_ack>:


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
    23b4:	88 23       	and	r24, r24
    23b6:	89 f0       	breq	.+34     	; 0x23da <twi_data_read_ack+0x26>
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
    23b8:	85 ec       	ldi	r24, 0xC5	; 197
    23ba:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
    23c2:	05 c0       	rjmp	.+10     	; 0x23ce <twi_data_read_ack+0x1a>
			i++;
    23c4:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
    23c6:	80 34       	cpi	r24, 0x40	; 64
    23c8:	26 e0       	ldi	r18, 0x06	; 6
    23ca:	92 07       	cpc	r25, r18
    23cc:	b8 f4       	brcc	.+46     	; 0x23fc <twi_data_read_ack+0x48>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
    23ce:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
    23d2:	20 35       	cpi	r18, 0x50	; 80
    23d4:	b9 f7       	brne	.-18     	; 0x23c4 <twi_data_read_ack+0x10>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	08 95       	ret
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
    23da:	85 e8       	ldi	r24, 0x85	; 133
    23dc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
    23e4:	05 c0       	rjmp	.+10     	; 0x23f0 <twi_data_read_ack+0x3c>
			i++;
    23e6:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
    23e8:	80 34       	cpi	r24, 0x40	; 64
    23ea:	26 e0       	ldi	r18, 0x06	; 6
    23ec:	92 07       	cpc	r25, r18
    23ee:	40 f4       	brcc	.+16     	; 0x2400 <twi_data_read_ack+0x4c>
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
    23f0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
    23f4:	28 35       	cpi	r18, 0x58	; 88
    23f6:	b9 f7       	brne	.-18     	; 0x23e6 <twi_data_read_ack+0x32>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	08 95       	ret
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	08 95       	ret
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
    2400:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		
	}
	return TWI_OK;
}
    2402:	08 95       	ret

00002404 <__vector_40>:

#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
    2404:	1f 92       	push	r1
    2406:	0f 92       	push	r0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	8f 93       	push	r24
	status = (TWSR1 & 0xF8);
    2410:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    2414:	88 7f       	andi	r24, 0xF8	; 248
    2416:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
}
    241a:	8f 91       	pop	r24
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	0f 90       	pop	r0
    2422:	1f 90       	pop	r1
    2424:	18 95       	reti

00002426 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	d8 2e       	mov	r13, r24
    2436:	c6 2e       	mov	r12, r22
    2438:	7a 01       	movw	r14, r20
    243a:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
    243c:	0e 94 77 11 	call	0x22ee	; 0x22ee <twi_start>
    2440:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    2442:	88 23       	and	r24, r24
    2444:	21 f0       	breq	.+8      	; 0x244e <twi_read+0x28>
		twi_stop();
    2446:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    244a:	8c 2f       	mov	r24, r28
    244c:	5f c0       	rjmp	.+190    	; 0x250c <twi_read+0xe6>
	}
	TWDR1 = (addr << 1) | 0;
    244e:	8d 2d       	mov	r24, r13
    2450:	88 0f       	add	r24, r24
    2452:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
    2456:	0e 94 a1 11 	call	0x2342	; 0x2342 <twi_addr_write_ack>
    245a:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    245c:	88 23       	and	r24, r24
    245e:	21 f0       	breq	.+8      	; 0x2468 <twi_read+0x42>
		twi_stop();
    2460:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    2464:	8c 2f       	mov	r24, r28
    2466:	52 c0       	rjmp	.+164    	; 0x250c <twi_read+0xe6>
	}
	
	TWDR1 = reg;
    2468:	c0 92 db 00 	sts	0x00DB, r12	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
    246c:	0e 94 b4 11 	call	0x2368	; 0x2368 <twi_data_write_ack>
    2470:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    2472:	88 23       	and	r24, r24
    2474:	21 f0       	breq	.+8      	; 0x247e <twi_read+0x58>
		twi_stop();
    2476:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    247a:	8c 2f       	mov	r24, r28
    247c:	47 c0       	rjmp	.+142    	; 0x250c <twi_read+0xe6>
	}
	
	err = twi_restart();
    247e:	0e 94 8e 11 	call	0x231c	; 0x231c <twi_restart>
    2482:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    2484:	88 23       	and	r24, r24
    2486:	21 f0       	breq	.+8      	; 0x2490 <twi_read+0x6a>
		twi_stop();
    2488:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    248c:	8c 2f       	mov	r24, r28
    248e:	3e c0       	rjmp	.+124    	; 0x250c <twi_read+0xe6>
	}
	
	TWDR1 = (addr << 1) | 1;
    2490:	8d 2d       	mov	r24, r13
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	81 60       	ori	r24, 0x01	; 1
    249a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>

	err = twi_addr_read_ack();
    249e:	0e 94 c7 11 	call	0x238e	; 0x238e <twi_addr_read_ack>
    24a2:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    24a4:	88 23       	and	r24, r24
    24a6:	c1 f0       	breq	.+48     	; 0x24d8 <twi_read+0xb2>
		twi_stop();
    24a8:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    24ac:	8c 2f       	mov	r24, r28
    24ae:	2e c0       	rjmp	.+92     	; 0x250c <twi_read+0xe6>
	}
	
	for(i = 0; i < (len - 1);i++){
		err = twi_data_read_ack(1);
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <twi_data_read_ack>
    24b6:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
    24b8:	88 23       	and	r24, r24
    24ba:	21 f0       	breq	.+8      	; 0x24c4 <twi_read+0x9e>
			twi_stop();
    24bc:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
			return err;
    24c0:	8c 2f       	mov	r24, r28
    24c2:	24 c0       	rjmp	.+72     	; 0x250c <twi_read+0xe6>
		}
		data[i] = TWDR1;
    24c4:	f7 01       	movw	r30, r14
    24c6:	ec 0d       	add	r30, r12
    24c8:	fd 1d       	adc	r31, r13
    24ca:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    24ce:	80 83       	st	Z, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
    24d0:	8f ef       	ldi	r24, 0xFF	; 255
    24d2:	c8 1a       	sub	r12, r24
    24d4:	d8 0a       	sbc	r13, r24
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <twi_read+0xb6>
    24d8:	c1 2c       	mov	r12, r1
    24da:	d1 2c       	mov	r13, r1
    24dc:	c8 01       	movw	r24, r16
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	c8 16       	cp	r12, r24
    24e2:	d9 06       	cpc	r13, r25
    24e4:	28 f3       	brcs	.-54     	; 0x24b0 <twi_read+0x8a>
			return err;
		}
		data[i] = TWDR1;
	}
	
	err = twi_data_read_ack(0);
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <twi_data_read_ack>
    24ec:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    24ee:	88 23       	and	r24, r24
    24f0:	21 f0       	breq	.+8      	; 0x24fa <twi_read+0xd4>
		twi_stop();
    24f2:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    24f6:	8c 2f       	mov	r24, r28
    24f8:	09 c0       	rjmp	.+18     	; 0x250c <twi_read+0xe6>
	}
	data[i] = TWDR1;
    24fa:	f7 01       	movw	r30, r14
    24fc:	ec 0d       	add	r30, r12
    24fe:	fd 1d       	adc	r31, r13
    2500:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    2504:	80 83       	st	Z, r24
	
	twi_stop();
    2506:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
	
	return err;
    250a:	8c 2f       	mov	r24, r28
}
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	ff 90       	pop	r15
    2514:	ef 90       	pop	r14
    2516:	df 90       	pop	r13
    2518:	cf 90       	pop	r12
    251a:	08 95       	ret

0000251c <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
    251c:	cf 92       	push	r12
    251e:	df 92       	push	r13
    2520:	ef 92       	push	r14
    2522:	ff 92       	push	r15
    2524:	0f 93       	push	r16
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	18 2f       	mov	r17, r24
    252c:	06 2f       	mov	r16, r22
    252e:	6a 01       	movw	r12, r20
    2530:	79 01       	movw	r14, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
    2532:	0e 94 77 11 	call	0x22ee	; 0x22ee <twi_start>
    2536:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    2538:	88 23       	and	r24, r24
    253a:	21 f0       	breq	.+8      	; 0x2544 <twi_write+0x28>
		twi_stop();
    253c:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    2540:	8c 2f       	mov	r24, r28
    2542:	31 c0       	rjmp	.+98     	; 0x25a6 <twi_write+0x8a>
	}
	TWDR1 = (addr << 1) | 0;
    2544:	11 0f       	add	r17, r17
    2546:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
    254a:	0e 94 a1 11 	call	0x2342	; 0x2342 <twi_addr_write_ack>
    254e:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    2550:	88 23       	and	r24, r24
    2552:	21 f0       	breq	.+8      	; 0x255c <twi_write+0x40>
		twi_stop();
    2554:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    2558:	8c 2f       	mov	r24, r28
    255a:	25 c0       	rjmp	.+74     	; 0x25a6 <twi_write+0x8a>
	}
	
	TWDR1 = reg;
    255c:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
    2560:	0e 94 b4 11 	call	0x2368	; 0x2368 <twi_data_write_ack>
    2564:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
    2566:	88 23       	and	r24, r24
    2568:	b1 f0       	breq	.+44     	; 0x2596 <twi_write+0x7a>
		twi_stop();
    256a:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
		return err;
    256e:	8c 2f       	mov	r24, r28
    2570:	1a c0       	rjmp	.+52     	; 0x25a6 <twi_write+0x8a>
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
    2572:	f6 01       	movw	r30, r12
    2574:	e0 0f       	add	r30, r16
    2576:	f1 1f       	adc	r31, r17
    2578:	80 81       	ld	r24, Z
    257a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
    257e:	0e 94 b4 11 	call	0x2368	; 0x2368 <twi_data_write_ack>
    2582:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
    2584:	88 23       	and	r24, r24
    2586:	21 f0       	breq	.+8      	; 0x2590 <twi_write+0x74>
			twi_stop();
    2588:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
			return err;
    258c:	8c 2f       	mov	r24, r28
    258e:	0b c0       	rjmp	.+22     	; 0x25a6 <twi_write+0x8a>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
    2590:	0f 5f       	subi	r16, 0xFF	; 255
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	02 c0       	rjmp	.+4      	; 0x259a <twi_write+0x7e>
    2596:	00 e0       	ldi	r16, 0x00	; 0
    2598:	10 e0       	ldi	r17, 0x00	; 0
    259a:	0e 15       	cp	r16, r14
    259c:	1f 05       	cpc	r17, r15
    259e:	48 f3       	brcs	.-46     	; 0x2572 <twi_write+0x56>
			return err;
		}
	}
	
	
	twi_stop();
    25a0:	0e 94 8a 11 	call	0x2314	; 0x2314 <twi_stop>
	
	return err;
    25a4:	8c 2f       	mov	r24, r28
}
    25a6:	cf 91       	pop	r28
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	df 90       	pop	r13
    25b2:	cf 90       	pop	r12
    25b4:	08 95       	ret

000025b6 <twi_init>:





void twi_init(uint32_t speed){
    25b6:	9b 01       	movw	r18, r22
    25b8:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
    25ba:	60 e0       	ldi	r22, 0x00	; 0
    25bc:	74 e2       	ldi	r23, 0x24	; 36
    25be:	84 ef       	ldi	r24, 0xF4	; 244
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 a2 19 	call	0x3344	; 0x3344 <__udivmodsi4>
    25c6:	da 01       	movw	r26, r20
    25c8:	c9 01       	movw	r24, r18
    25ca:	40 97       	sbiw	r24, 0x10	; 16
    25cc:	a1 09       	sbc	r26, r1
    25ce:	b1 09       	sbc	r27, r1
    25d0:	b6 95       	lsr	r27
    25d2:	a7 95       	ror	r26
    25d4:	97 95       	ror	r25
    25d6:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
    25d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
    25dc:	85 e0       	ldi	r24, 0x05	; 5
    25de:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    25e2:	08 95       	ret

000025e4 <__vector_18>:
	read_complete = false;
	rx_count=0;
	return test_array;
}

ISR(USART0_RX_vect){
    25e4:	1f 92       	push	r1
    25e6:	0f 92       	push	r0
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	0f 92       	push	r0
    25ec:	11 24       	eor	r1, r1
    25ee:	8f 93       	push	r24
    25f0:	9f 93       	push	r25
    25f2:	ef 93       	push	r30
    25f4:	ff 93       	push	r31
	
	//volatile static uint16_t rx_write_pos = 0;
	test_array[rx_count] = UDR0;
    25f6:	e0 91 3c 06 	lds	r30, 0x063C	; 0x80063c <rx_count>
    25fa:	f0 91 3d 06 	lds	r31, 0x063D	; 0x80063d <rx_count+0x1>
    25fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2602:	e4 54       	subi	r30, 0x44	; 68
    2604:	fa 4f       	sbci	r31, 0xFA	; 250
    2606:	80 83       	st	Z, r24
	if (test_array[rx_count] == 0x0D){
    2608:	e0 91 3c 06 	lds	r30, 0x063C	; 0x80063c <rx_count>
    260c:	f0 91 3d 06 	lds	r31, 0x063D	; 0x80063d <rx_count+0x1>
    2610:	e4 54       	subi	r30, 0x44	; 68
    2612:	fa 4f       	sbci	r31, 0xFA	; 250
    2614:	80 81       	ld	r24, Z
    2616:	8d 30       	cpi	r24, 0x0D	; 13
    2618:	51 f4       	brne	.+20     	; 0x262e <__vector_18+0x4a>
		read_complete = true;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <read_complete>
		test_array[rx_count+1] = 0;
    2620:	e0 91 3c 06 	lds	r30, 0x063C	; 0x80063c <rx_count>
    2624:	f0 91 3d 06 	lds	r31, 0x063D	; 0x80063d <rx_count+0x1>
    2628:	e3 54       	subi	r30, 0x43	; 67
    262a:	fa 4f       	sbci	r31, 0xFA	; 250
    262c:	10 82       	st	Z, r1
	}
	rx_count +=1;
    262e:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <rx_count>
    2632:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <rx_count+0x1>
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <rx_count+0x1>
    263c:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <rx_count>
	
}
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	0f 90       	pop	r0
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	0f 90       	pop	r0
    264e:	1f 90       	pop	r1
    2650:	18 95       	reti

00002652 <__vector_20>:

//memset(rx_buffer, 0, sizeof(rx_buffer));

ISR(USART0_TX_vect){
    2652:	1f 92       	push	r1
    2654:	0f 92       	push	r0
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	0f 92       	push	r0
    265a:	11 24       	eor	r1, r1
    265c:	8f 93       	push	r24
	uart_tx_busy = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <uart_tx_busy>
}
    2664:	8f 91       	pop	r24
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <uart_init>:

void uart_init(uint32_t baud,uint8_t high_speed){
	
	uint8_t speed = 16;
	
	if(high_speed != 0){
    2670:	44 23       	and	r20, r20
    2672:	39 f0       	breq	.+14     	; 0x2682 <uart_init+0x12>
		speed = 8;
		UCSR0A |= 1 << U2X0;
    2674:	e0 ec       	ldi	r30, 0xC0	; 192
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	20 81       	ld	r18, Z
    267a:	22 60       	ori	r18, 0x02	; 2
    267c:	20 83       	st	Z, r18
void uart_init(uint32_t baud,uint8_t high_speed){
	
	uint8_t speed = 16;
	
	if(high_speed != 0){
		speed = 8;
    267e:	a8 e0       	ldi	r26, 0x08	; 8
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <uart_init+0x14>
}


void uart_init(uint32_t baud,uint8_t high_speed){
	
	uint8_t speed = 16;
    2682:	a0 e1       	ldi	r26, 0x10	; 16
	if(high_speed != 0){
		speed = 8;
		UCSR0A |= 1 << U2X0;
	}
	
	baud = (F_CPU/(speed*baud)) - 1;
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	9b 01       	movw	r18, r22
    2688:	ac 01       	movw	r20, r24
    268a:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__muluhisi3>
    268e:	9b 01       	movw	r18, r22
    2690:	ac 01       	movw	r20, r24
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	74 e2       	ldi	r23, 0x24	; 36
    2696:	84 ef       	ldi	r24, 0xF4	; 244
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 a2 19 	call	0x3344	; 0x3344 <__udivmodsi4>
    269e:	ba 01       	movw	r22, r20
    26a0:	a9 01       	movw	r20, r18
    26a2:	41 50       	subi	r20, 0x01	; 1
    26a4:	51 09       	sbc	r21, r1
    26a6:	61 09       	sbc	r22, r1
    26a8:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud & 0x0F00) >> 8;
    26aa:	db 01       	movw	r26, r22
    26ac:	ca 01       	movw	r24, r20
    26ae:	88 27       	eor	r24, r24
    26b0:	9f 70       	andi	r25, 0x0F	; 15
    26b2:	aa 27       	eor	r26, r26
    26b4:	bb 27       	eor	r27, r27
    26b6:	89 2f       	mov	r24, r25
    26b8:	9a 2f       	mov	r25, r26
    26ba:	ab 2f       	mov	r26, r27
    26bc:	bb 27       	eor	r27, r27
    26be:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);
    26c2:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0);
    26c6:	e1 ec       	ldi	r30, 0xC1	; 193
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	88 6d       	ori	r24, 0xD8	; 216
    26ce:	80 83       	st	Z, r24
	UCSR0C=0b10000110;
    26d0:	86 e8       	ldi	r24, 0x86	; 134
    26d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    26d6:	08 95       	ret

000026d8 <uart_send_byte>:
}


void uart_send_byte(uint8_t c){
	while(uart_tx_busy == 0);
    26d8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <uart_tx_busy>
    26dc:	99 23       	and	r25, r25
    26de:	e1 f3       	breq	.-8      	; 0x26d8 <uart_send_byte>
	uart_tx_busy = 0;
    26e0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <uart_tx_busy>
	UDR0 = c;
    26e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    26e8:	08 95       	ret

000026ea <__vector_1>:
u8g2_t u8g2;
dashboard_struc dashboard ;



ISR(INT0_vect){
    26ea:	1f 92       	push	r1
    26ec:	0f 92       	push	r0
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	0f 92       	push	r0
    26f2:	11 24       	eor	r1, r1
    26f4:	2f 93       	push	r18
    26f6:	3f 93       	push	r19
    26f8:	4f 93       	push	r20
    26fa:	5f 93       	push	r21
    26fc:	6f 93       	push	r22
    26fe:	7f 93       	push	r23
    2700:	8f 93       	push	r24
    2702:	9f 93       	push	r25
    2704:	af 93       	push	r26
    2706:	bf 93       	push	r27
    2708:	ef 93       	push	r30
    270a:	ff 93       	push	r31
	rtc_int_request=1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <rtc_int_request>
	toggle_pin_level(&health);
    2712:	8c e1       	ldi	r24, 0x1C	; 28
    2714:	91 e0       	ldi	r25, 0x01	; 1
    2716:	0e 94 dd 10 	call	0x21ba	; 0x21ba <toggle_pin_level>
}
    271a:	ff 91       	pop	r31
    271c:	ef 91       	pop	r30
    271e:	bf 91       	pop	r27
    2720:	af 91       	pop	r26
    2722:	9f 91       	pop	r25
    2724:	8f 91       	pop	r24
    2726:	7f 91       	pop	r23
    2728:	6f 91       	pop	r22
    272a:	5f 91       	pop	r21
    272c:	4f 91       	pop	r20
    272e:	3f 91       	pop	r19
    2730:	2f 91       	pop	r18
    2732:	0f 90       	pop	r0
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	0f 90       	pop	r0
    2738:	1f 90       	pop	r1
    273a:	18 95       	reti

0000273c <__vector_2>:

ISR(INT1_vect){
    273c:	1f 92       	push	r1
    273e:	0f 92       	push	r0
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	0f 92       	push	r0
    2744:	11 24       	eor	r1, r1
    2746:	2f 93       	push	r18
    2748:	3f 93       	push	r19
    274a:	4f 93       	push	r20
    274c:	5f 93       	push	r21
    274e:	6f 93       	push	r22
    2750:	7f 93       	push	r23
    2752:	8f 93       	push	r24
    2754:	9f 93       	push	r25
    2756:	af 93       	push	r26
    2758:	bf 93       	push	r27
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	ef 93       	push	r30
    2760:	ff 93       	push	r31
	dashboard.daily_odo = dashboard.daily_odo + wheel_lenght;
    2762:	cf e3       	ldi	r28, 0x3F	; 63
    2764:	d6 e0       	ldi	r29, 0x06	; 6
    2766:	68 81       	ld	r22, Y
    2768:	79 81       	ldd	r23, Y+1	; 0x01
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	9b 81       	ldd	r25, Y+3	; 0x03
    276e:	2b e4       	ldi	r18, 0x4B	; 75
    2770:	39 e5       	ldi	r19, 0x59	; 89
    2772:	46 e0       	ldi	r20, 0x06	; 6
    2774:	5b e3       	ldi	r21, 0x3B	; 59
    2776:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__addsf3>
    277a:	68 83       	st	Y, r22
    277c:	79 83       	std	Y+1, r23	; 0x01
    277e:	8a 83       	std	Y+2, r24	; 0x02
    2780:	9b 83       	std	Y+3, r25	; 0x03
	dashboard.full_odo = dashboard.full_odo + wheel_lenght;
    2782:	6c 81       	ldd	r22, Y+4	; 0x04
    2784:	7d 81       	ldd	r23, Y+5	; 0x05
    2786:	8e 81       	ldd	r24, Y+6	; 0x06
    2788:	9f 81       	ldd	r25, Y+7	; 0x07
    278a:	2b e4       	ldi	r18, 0x4B	; 75
    278c:	39 e5       	ldi	r19, 0x59	; 89
    278e:	46 e0       	ldi	r20, 0x06	; 6
    2790:	5b e3       	ldi	r21, 0x3B	; 59
    2792:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__addsf3>
    2796:	6c 83       	std	Y+4, r22	; 0x04
    2798:	7d 83       	std	Y+5, r23	; 0x05
    279a:	8e 83       	std	Y+6, r24	; 0x06
    279c:	9f 83       	std	Y+7, r25	; 0x07
}
    279e:	ff 91       	pop	r31
    27a0:	ef 91       	pop	r30
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	bf 91       	pop	r27
    27a8:	af 91       	pop	r26
    27aa:	9f 91       	pop	r25
    27ac:	8f 91       	pop	r24
    27ae:	7f 91       	pop	r23
    27b0:	6f 91       	pop	r22
    27b2:	5f 91       	pop	r21
    27b4:	4f 91       	pop	r20
    27b6:	3f 91       	pop	r19
    27b8:	2f 91       	pop	r18
    27ba:	0f 90       	pop	r0
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	0f 90       	pop	r0
    27c0:	1f 90       	pop	r1
    27c2:	18 95       	reti

000027c4 <main>:


int main(void)
{
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	a4 97       	sbiw	r28, 0x24	; 36
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
	sei();
    27d8:	78 94       	sei
	EICRA |= (0b10 << ISC00) | (0b10 << ISC10);
    27da:	e9 e6       	ldi	r30, 0x69	; 105
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	8a 60       	ori	r24, 0x0A	; 10
    27e2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1); 
    27e4:	8d b3       	in	r24, 0x1d	; 29
    27e6:	83 60       	ori	r24, 0x03	; 3
    27e8:	8d bb       	out	0x1d, r24	; 29
	stdout = &mystdout;
    27ea:	86 e0       	ldi	r24, 0x06	; 6
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	90 93 c4 06 	sts	0x06C4, r25	; 0x8006c4 <__iob+0x3>
    27f2:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <__iob+0x2>

	char time_line[10]="00:00:00";
    27f6:	89 e0       	ldi	r24, 0x09	; 9
    27f8:	e5 e2       	ldi	r30, 0x25	; 37
    27fa:	f1 e0       	ldi	r31, 0x01	; 1
    27fc:	de 01       	movw	r26, r28
    27fe:	11 96       	adiw	r26, 0x01	; 1
    2800:	01 90       	ld	r0, Z+
    2802:	0d 92       	st	X+, r0
    2804:	8a 95       	dec	r24
    2806:	e1 f7       	brne	.-8      	; 0x2800 <main+0x3c>
    2808:	1a 86       	std	Y+10, r1	; 0x0a
	char speed[3]="00";
    280a:	80 e3       	ldi	r24, 0x30	; 48
    280c:	90 e3       	ldi	r25, 0x30	; 48
    280e:	9c 87       	std	Y+12, r25	; 0x0c
    2810:	8b 87       	std	Y+11, r24	; 0x0b
    2812:	1d 86       	std	Y+13, r1	; 0x0d
	char max_speed[3]="00";
    2814:	9f 87       	std	Y+15, r25	; 0x0f
    2816:	8e 87       	std	Y+14, r24	; 0x0e
    2818:	18 8a       	std	Y+16, r1	; 0x10
	char d_odo[10]="\0";
    281a:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <rtc_int+0xd>
    281e:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <rtc_int+0xe>
    2822:	3a 8b       	std	Y+18, r19	; 0x12
    2824:	29 8b       	std	Y+17, r18	; 0x11
    2826:	88 e0       	ldi	r24, 0x08	; 8
    2828:	fe 01       	movw	r30, r28
    282a:	73 96       	adiw	r30, 0x13	; 19
    282c:	df 01       	movw	r26, r30
    282e:	98 2f       	mov	r25, r24
    2830:	1d 92       	st	X+, r1
    2832:	9a 95       	dec	r25
    2834:	e9 f7       	brne	.-6      	; 0x2830 <main+0x6c>
	char f_odo[10]="\0";
    2836:	3c 8f       	std	Y+28, r19	; 0x1c
    2838:	2b 8f       	std	Y+27, r18	; 0x1b
    283a:	3a 96       	adiw	r30, 0x0a	; 10
    283c:	df 01       	movw	r26, r30
    283e:	1d 92       	st	X+, r1
    2840:	8a 95       	dec	r24
    2842:	e9 f7       	brne	.-6      	; 0x283e <main+0x7a>

	u8g2_Setup_st7565_zolen_128x64_f( &u8g2, U8G2_MIRROR_VERTICAL, u8x8_byte_4wire_sw_spi, u8x8_avr_gpio_and_delay );
    2844:	2f e1       	ldi	r18, 0x1F	; 31
    2846:	30 e1       	ldi	r19, 0x10	; 16
    2848:	4c ef       	ldi	r20, 0xFC	; 252
    284a:	5c e0       	ldi	r21, 0x0C	; 12
    284c:	69 e3       	ldi	r22, 0x39	; 57
    284e:	71 e0       	ldi	r23, 0x01	; 1
    2850:	8b e4       	ldi	r24, 0x4B	; 75
    2852:	96 e0       	ldi	r25, 0x06	; 6
    2854:	0e 94 d5 05 	call	0xbaa	; 0xbaa <u8g2_Setup_st7565_zolen_128x64_f>
	uart_init(250000,0);
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	60 e9       	ldi	r22, 0x90	; 144
    285c:	70 ed       	ldi	r23, 0xD0	; 208
    285e:	83 e0       	ldi	r24, 0x03	; 3
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 38 13 	call	0x2670	; 0x2670 <uart_init>
	twi_init(400000);
    2866:	60 e8       	ldi	r22, 0x80	; 128
    2868:	7a e1       	ldi	r23, 0x1A	; 26
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <twi_init>
	adc_init();
    2872:	0e 94 14 10 	call	0x2028	; 0x2028 <adc_init>
	rtc_int_enable(&sys_rtc ,0);
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	84 e1       	ldi	r24, 0x14	; 20
    287c:	91 e0       	ldi	r25, 0x01	; 1
    287e:	0e 94 06 11 	call	0x220c	; 0x220c <rtc_int_enable>
	adc_init();
    2882:	0e 94 14 10 	call	0x2028	; 0x2028 <adc_init>
	//rtc_set(&sys_rtc);
	
	u8g2_InitDisplay(&u8g2);
    2886:	8b e4       	ldi	r24, 0x4B	; 75
    2888:	96 e0       	ldi	r25, 0x06	; 6
    288a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	8b e4       	ldi	r24, 0x4B	; 75
    2892:	96 e0       	ldi	r25, 0x06	; 6
    2894:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&u8g2, 1);
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	8b e4       	ldi	r24, 0x4B	; 75
    289c:	96 e0       	ldi	r25, 0x06	; 6
    289e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <u8x8_SetFlipMode>
	u8g2_SetContrast(&u8g2, 100);
    28a2:	64 e6       	ldi	r22, 0x64	; 100
    28a4:	8b e4       	ldi	r24, 0x4B	; 75
    28a6:	96 e0       	ldi	r25, 0x06	; 6
    28a8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <u8x8_SetContrast>
    
	set_pin_dir(&lcd_blk , PORT_DIR_OUT); set_pin_level(&lcd_blk, true);
    28ac:	61 e0       	ldi	r22, 0x01	; 1
    28ae:	8f e1       	ldi	r24, 0x1F	; 31
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	0e 94 9b 10 	call	0x2136	; 0x2136 <set_pin_dir>
    28b6:	61 e0       	ldi	r22, 0x01	; 1
    28b8:	8f e1       	ldi	r24, 0x1F	; 31
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	0e 94 72 10 	call	0x20e4	; 0x20e4 <set_pin_level>
	set_pin_dir(&rtc_int, PORT_DIR_IN);
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	82 e2       	ldi	r24, 0x22	; 34
    28c4:	91 e0       	ldi	r25, 0x01	; 1
    28c6:	0e 94 9b 10 	call	0x2136	; 0x2136 <set_pin_dir>
	
	u8g2_ClearBuffer(&u8g2);
    28ca:	8b e4       	ldi	r24, 0x4B	; 75
    28cc:	96 e0       	ldi	r25, 0x06	; 6
    28ce:	0e 94 9a 04 	call	0x934	; 0x934 <u8g2_ClearBuffer>
	
	u8g2_SetFont(&u8g2, u8g2_font_freedoomr10_mu);
    28d2:	68 e7       	ldi	r22, 0x78	; 120
    28d4:	73 e0       	ldi	r23, 0x03	; 3
    28d6:	8b e4       	ldi	r24, 0x4B	; 75
    28d8:	96 e0       	ldi	r25, 0x06	; 6
    28da:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <u8g2_SetFont>
    u8g2_DrawRFrame(&u8g2, 0, 38, 74, 26 , 3);
    28de:	0f 2e       	mov	r0, r31
    28e0:	f3 e0       	ldi	r31, 0x03	; 3
    28e2:	ef 2e       	mov	r14, r31
    28e4:	f1 2c       	mov	r15, r1
    28e6:	f0 2d       	mov	r31, r0
    28e8:	0a e1       	ldi	r16, 0x1A	; 26
    28ea:	10 e0       	ldi	r17, 0x00	; 0
    28ec:	2a e4       	ldi	r18, 0x4A	; 74
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	46 e2       	ldi	r20, 0x26	; 38
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	8b e4       	ldi	r24, 0x4B	; 75
    28fa:	96 e0       	ldi	r25, 0x06	; 6
    28fc:	0e 94 90 03 	call	0x720	; 0x720 <u8g2_DrawRFrame>
	u8g2_DrawRFrame(&u8g2, 0, 25, 74, 14 , 3);
    2900:	0e e0       	ldi	r16, 0x0E	; 14
    2902:	10 e0       	ldi	r17, 0x00	; 0
    2904:	2a e4       	ldi	r18, 0x4A	; 74
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	49 e1       	ldi	r20, 0x19	; 25
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	8b e4       	ldi	r24, 0x4B	; 75
    2912:	96 e0       	ldi	r25, 0x06	; 6
    2914:	0e 94 90 03 	call	0x720	; 0x720 <u8g2_DrawRFrame>
	
	u8g2_DrawStr(&u8g2, 77, 64, "KM");
    2918:	24 e9       	ldi	r18, 0x94	; 148
    291a:	31 e0       	ldi	r19, 0x01	; 1
    291c:	40 e4       	ldi	r20, 0x40	; 64
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	6d e4       	ldi	r22, 0x4D	; 77
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	8b e4       	ldi	r24, 0x4B	; 75
    2926:	96 e0       	ldi	r25, 0x06	; 6
    2928:	0e 94 a3 09 	call	0x1346	; 0x1346 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 50, 25, "KM/H");
    292c:	27 e9       	ldi	r18, 0x97	; 151
    292e:	31 e0       	ldi	r19, 0x01	; 1
    2930:	49 e1       	ldi	r20, 0x19	; 25
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	62 e3       	ldi	r22, 0x32	; 50
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	8b e4       	ldi	r24, 0x4B	; 75
    293a:	96 e0       	ldi	r25, 0x06	; 6
    293c:	0e 94 a3 09 	call	0x1346	; 0x1346 <u8g2_DrawStr>
	
	u8g2_SendBuffer(&u8g2);
    2940:	8b e4       	ldi	r24, 0x4B	; 75
    2942:	96 e0       	ldi	r25, 0x06	; 6
    2944:	0e 94 b0 04 	call	0x960	; 0x960 <u8g2_SendBuffer>
	sleep_enable();
    2948:	83 b7       	in	r24, 0x33	; 51
    294a:	81 60       	ori	r24, 0x01	; 1
    294c:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    294e:	83 b7       	in	r24, 0x33	; 51
    2950:	81 7f       	andi	r24, 0xF1	; 241
    2952:	84 60       	ori	r24, 0x04	; 4
    2954:	83 bf       	out	0x33, r24	; 51
	
	while (1) 
    {
		if (rtc_int_request != 0){
    2956:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <rtc_int_request>
    295a:	88 23       	and	r24, r24
    295c:	e1 f3       	breq	.-8      	; 0x2956 <main+0x192>
			rtc_int_request = 0;
    295e:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <rtc_int_request>
			rtc_sync(&sys_rtc);
    2962:	84 e1       	ldi	r24, 0x14	; 20
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	0e 94 34 11 	call	0x2268	; 0x2268 <rtc_sync>

			sprintf(time_line , "%02d:%02d:%02d", sys_rtc.hour, sys_rtc.minute, sys_rtc.second);
    296a:	e4 e1       	ldi	r30, 0x14	; 20
    296c:	f1 e0       	ldi	r31, 0x01	; 1
    296e:	20 81       	ld	r18, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	82 81       	ldd	r24, Z+2	; 0x02
    2974:	1f 92       	push	r1
    2976:	2f 93       	push	r18
    2978:	1f 92       	push	r1
    297a:	9f 93       	push	r25
    297c:	1f 92       	push	r1
    297e:	8f 93       	push	r24
    2980:	8c e9       	ldi	r24, 0x9C	; 156
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	9f 93       	push	r25
    2986:	8f 93       	push	r24
    2988:	fe 01       	movw	r30, r28
    298a:	31 96       	adiw	r30, 0x01	; 1
    298c:	5f 01       	movw	r10, r30
    298e:	ff 93       	push	r31
    2990:	ef 93       	push	r30
    2992:	0e 94 46 1b 	call	0x368c	; 0x368c <sprintf>
			sprintf(speed, "%02d", dashboard.speed);
    2996:	0f e3       	ldi	r16, 0x3F	; 63
    2998:	16 e0       	ldi	r17, 0x06	; 6
    299a:	d8 01       	movw	r26, r16
    299c:	1b 96       	adiw	r26, 0x0b	; 11
    299e:	8c 91       	ld	r24, X
    29a0:	1b 97       	sbiw	r26, 0x0b	; 11
    29a2:	8f 93       	push	r24
    29a4:	1a 96       	adiw	r26, 0x0a	; 10
    29a6:	8c 91       	ld	r24, X
    29a8:	8f 93       	push	r24
    29aa:	0f 2e       	mov	r0, r31
    29ac:	f6 ea       	ldi	r31, 0xA6	; 166
    29ae:	ef 2e       	mov	r14, r31
    29b0:	f1 e0       	ldi	r31, 0x01	; 1
    29b2:	ff 2e       	mov	r15, r31
    29b4:	f0 2d       	mov	r31, r0
    29b6:	ff 92       	push	r15
    29b8:	ef 92       	push	r14
    29ba:	6e 01       	movw	r12, r28
    29bc:	bb e0       	ldi	r27, 0x0B	; 11
    29be:	cb 0e       	add	r12, r27
    29c0:	d1 1c       	adc	r13, r1
    29c2:	df 92       	push	r13
    29c4:	cf 92       	push	r12
    29c6:	0e 94 46 1b 	call	0x368c	; 0x368c <sprintf>
			sprintf(max_speed, "%02d", dashboard.max_speed);
    29ca:	f8 01       	movw	r30, r16
    29cc:	81 85       	ldd	r24, Z+9	; 0x09
    29ce:	8f 93       	push	r24
    29d0:	80 85       	ldd	r24, Z+8	; 0x08
    29d2:	8f 93       	push	r24
    29d4:	ff 92       	push	r15
    29d6:	ef 92       	push	r14
    29d8:	4e 01       	movw	r8, r28
    29da:	fe e0       	ldi	r31, 0x0E	; 14
    29dc:	8f 0e       	add	r8, r31
    29de:	91 1c       	adc	r9, r1
    29e0:	9f 92       	push	r9
    29e2:	8f 92       	push	r8
    29e4:	0e 94 46 1b 	call	0x368c	; 0x368c <sprintf>
			sprintf(d_odo,"%08.3f", dashboard.daily_odo);
    29e8:	d8 01       	movw	r26, r16
    29ea:	13 96       	adiw	r26, 0x03	; 3
    29ec:	8c 91       	ld	r24, X
    29ee:	13 97       	sbiw	r26, 0x03	; 3
    29f0:	8f 93       	push	r24
    29f2:	12 96       	adiw	r26, 0x02	; 2
    29f4:	8c 91       	ld	r24, X
    29f6:	12 97       	sbiw	r26, 0x02	; 2
    29f8:	8f 93       	push	r24
    29fa:	11 96       	adiw	r26, 0x01	; 1
    29fc:	8c 91       	ld	r24, X
    29fe:	11 97       	sbiw	r26, 0x01	; 1
    2a00:	8f 93       	push	r24
    2a02:	8c 91       	ld	r24, X
    2a04:	8f 93       	push	r24
    2a06:	8b ea       	ldi	r24, 0xAB	; 171
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	9f 93       	push	r25
    2a0c:	8f 93       	push	r24
    2a0e:	7e 01       	movw	r14, r28
    2a10:	b1 e1       	ldi	r27, 0x11	; 17
    2a12:	eb 0e       	add	r14, r27
    2a14:	f1 1c       	adc	r15, r1
    2a16:	ff 92       	push	r15
    2a18:	ef 92       	push	r14
    2a1a:	0e 94 46 1b 	call	0x368c	; 0x368c <sprintf>
			sprintf(f_odo,"%08.2f", dashboard.full_odo);
    2a1e:	f8 01       	movw	r30, r16
    2a20:	87 81       	ldd	r24, Z+7	; 0x07
    2a22:	8f 93       	push	r24
    2a24:	86 81       	ldd	r24, Z+6	; 0x06
    2a26:	8f 93       	push	r24
    2a28:	85 81       	ldd	r24, Z+5	; 0x05
    2a2a:	8f 93       	push	r24
    2a2c:	84 81       	ldd	r24, Z+4	; 0x04
    2a2e:	8f 93       	push	r24
    2a30:	82 eb       	ldi	r24, 0xB2	; 178
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	9f 93       	push	r25
    2a36:	8f 93       	push	r24
    2a38:	8e 01       	movw	r16, r28
    2a3a:	05 5e       	subi	r16, 0xE5	; 229
    2a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3e:	1f 93       	push	r17
    2a40:	0f 93       	push	r16
    2a42:	0e 94 46 1b 	call	0x368c	; 0x368c <sprintf>
		
			u8g2_SetFont(&u8g2, u8g2_font_freedoomr25_mn);
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	66 eb       	ldi	r22, 0xB6	; 182
    2a52:	71 e0       	ldi	r23, 0x01	; 1
    2a54:	8b e4       	ldi	r24, 0x4B	; 75
    2a56:	96 e0       	ldi	r25, 0x06	; 6
    2a58:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 1, 25, speed);
    2a5c:	96 01       	movw	r18, r12
    2a5e:	49 e1       	ldi	r20, 0x19	; 25
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	8b e4       	ldi	r24, 0x4B	; 75
    2a68:	96 e0       	ldi	r25, 0x06	; 6
    2a6a:	0e 94 a3 09 	call	0x1346	; 0x1346 <u8g2_DrawStr>
			u8g2_SetFont(&u8g2, u8g2_font_freedoomr10_mu);
    2a6e:	68 e7       	ldi	r22, 0x78	; 120
    2a70:	73 e0       	ldi	r23, 0x03	; 3
    2a72:	8b e4       	ldi	r24, 0x4B	; 75
    2a74:	96 e0       	ldi	r25, 0x06	; 6
    2a76:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 50, 12, max_speed);
    2a7a:	94 01       	movw	r18, r8
    2a7c:	4c e0       	ldi	r20, 0x0C	; 12
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	62 e3       	ldi	r22, 0x32	; 50
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	8b e4       	ldi	r24, 0x4B	; 75
    2a86:	96 e0       	ldi	r25, 0x06	; 6
    2a88:	0e 94 a3 09 	call	0x1346	; 0x1346 <u8g2_DrawStr>
			
			u8g2_DrawStr(&u8g2, 5, 52, d_odo);
    2a8c:	97 01       	movw	r18, r14
    2a8e:	44 e3       	ldi	r20, 0x34	; 52
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	65 e0       	ldi	r22, 0x05	; 5
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	8b e4       	ldi	r24, 0x4B	; 75
    2a98:	96 e0       	ldi	r25, 0x06	; 6
    2a9a:	0e 94 a3 09 	call	0x1346	; 0x1346 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 5, 64, f_odo);
    2a9e:	98 01       	movw	r18, r16
    2aa0:	40 e4       	ldi	r20, 0x40	; 64
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	65 e0       	ldi	r22, 0x05	; 5
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	8b e4       	ldi	r24, 0x4B	; 75
    2aaa:	96 e0       	ldi	r25, 0x06	; 6
    2aac:	0e 94 a3 09 	call	0x1346	; 0x1346 <u8g2_DrawStr>
			
			u8g2_DrawStr(&u8g2, 5, 39, time_line);
    2ab0:	95 01       	movw	r18, r10
    2ab2:	47 e2       	ldi	r20, 0x27	; 39
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	65 e0       	ldi	r22, 0x05	; 5
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	8b e4       	ldi	r24, 0x4B	; 75
    2abc:	96 e0       	ldi	r25, 0x06	; 6
    2abe:	0e 94 a3 09 	call	0x1346	; 0x1346 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    2ac2:	8b e4       	ldi	r24, 0x4B	; 75
    2ac4:	96 e0       	ldi	r25, 0x06	; 6
    2ac6:	0e 94 b0 04 	call	0x960	; 0x960 <u8g2_SendBuffer>
			sleep_cpu();
    2aca:	88 95       	sleep
    2acc:	44 cf       	rjmp	.-376    	; 0x2956 <main+0x192>

00002ace <__subsf3>:
    2ace:	50 58       	subi	r21, 0x80	; 128

00002ad0 <__addsf3>:
    2ad0:	bb 27       	eor	r27, r27
    2ad2:	aa 27       	eor	r26, r26
    2ad4:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__addsf3x>
    2ad8:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__fp_round>
    2adc:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__fp_pscA>
    2ae0:	38 f0       	brcs	.+14     	; 0x2af0 <__addsf3+0x20>
    2ae2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__fp_pscB>
    2ae6:	20 f0       	brcs	.+8      	; 0x2af0 <__addsf3+0x20>
    2ae8:	39 f4       	brne	.+14     	; 0x2af8 <__addsf3+0x28>
    2aea:	9f 3f       	cpi	r25, 0xFF	; 255
    2aec:	19 f4       	brne	.+6      	; 0x2af4 <__addsf3+0x24>
    2aee:	26 f4       	brtc	.+8      	; 0x2af8 <__addsf3+0x28>
    2af0:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_nan>
    2af4:	0e f4       	brtc	.+2      	; 0x2af8 <__addsf3+0x28>
    2af6:	e0 95       	com	r30
    2af8:	e7 fb       	bst	r30, 7
    2afa:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <__fp_inf>

00002afe <__addsf3x>:
    2afe:	e9 2f       	mov	r30, r25
    2b00:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__fp_split3>
    2b04:	58 f3       	brcs	.-42     	; 0x2adc <__addsf3+0xc>
    2b06:	ba 17       	cp	r27, r26
    2b08:	62 07       	cpc	r22, r18
    2b0a:	73 07       	cpc	r23, r19
    2b0c:	84 07       	cpc	r24, r20
    2b0e:	95 07       	cpc	r25, r21
    2b10:	20 f0       	brcs	.+8      	; 0x2b1a <__addsf3x+0x1c>
    2b12:	79 f4       	brne	.+30     	; 0x2b32 <__addsf3x+0x34>
    2b14:	a6 f5       	brtc	.+104    	; 0x2b7e <__addsf3x+0x80>
    2b16:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__fp_zero>
    2b1a:	0e f4       	brtc	.+2      	; 0x2b1e <__addsf3x+0x20>
    2b1c:	e0 95       	com	r30
    2b1e:	0b 2e       	mov	r0, r27
    2b20:	ba 2f       	mov	r27, r26
    2b22:	a0 2d       	mov	r26, r0
    2b24:	0b 01       	movw	r0, r22
    2b26:	b9 01       	movw	r22, r18
    2b28:	90 01       	movw	r18, r0
    2b2a:	0c 01       	movw	r0, r24
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	a0 01       	movw	r20, r0
    2b30:	11 24       	eor	r1, r1
    2b32:	ff 27       	eor	r31, r31
    2b34:	59 1b       	sub	r21, r25
    2b36:	99 f0       	breq	.+38     	; 0x2b5e <__addsf3x+0x60>
    2b38:	59 3f       	cpi	r21, 0xF9	; 249
    2b3a:	50 f4       	brcc	.+20     	; 0x2b50 <__addsf3x+0x52>
    2b3c:	50 3e       	cpi	r21, 0xE0	; 224
    2b3e:	68 f1       	brcs	.+90     	; 0x2b9a <__addsf3x+0x9c>
    2b40:	1a 16       	cp	r1, r26
    2b42:	f0 40       	sbci	r31, 0x00	; 0
    2b44:	a2 2f       	mov	r26, r18
    2b46:	23 2f       	mov	r18, r19
    2b48:	34 2f       	mov	r19, r20
    2b4a:	44 27       	eor	r20, r20
    2b4c:	58 5f       	subi	r21, 0xF8	; 248
    2b4e:	f3 cf       	rjmp	.-26     	; 0x2b36 <__addsf3x+0x38>
    2b50:	46 95       	lsr	r20
    2b52:	37 95       	ror	r19
    2b54:	27 95       	ror	r18
    2b56:	a7 95       	ror	r26
    2b58:	f0 40       	sbci	r31, 0x00	; 0
    2b5a:	53 95       	inc	r21
    2b5c:	c9 f7       	brne	.-14     	; 0x2b50 <__addsf3x+0x52>
    2b5e:	7e f4       	brtc	.+30     	; 0x2b7e <__addsf3x+0x80>
    2b60:	1f 16       	cp	r1, r31
    2b62:	ba 0b       	sbc	r27, r26
    2b64:	62 0b       	sbc	r22, r18
    2b66:	73 0b       	sbc	r23, r19
    2b68:	84 0b       	sbc	r24, r20
    2b6a:	ba f0       	brmi	.+46     	; 0x2b9a <__addsf3x+0x9c>
    2b6c:	91 50       	subi	r25, 0x01	; 1
    2b6e:	a1 f0       	breq	.+40     	; 0x2b98 <__addsf3x+0x9a>
    2b70:	ff 0f       	add	r31, r31
    2b72:	bb 1f       	adc	r27, r27
    2b74:	66 1f       	adc	r22, r22
    2b76:	77 1f       	adc	r23, r23
    2b78:	88 1f       	adc	r24, r24
    2b7a:	c2 f7       	brpl	.-16     	; 0x2b6c <__addsf3x+0x6e>
    2b7c:	0e c0       	rjmp	.+28     	; 0x2b9a <__addsf3x+0x9c>
    2b7e:	ba 0f       	add	r27, r26
    2b80:	62 1f       	adc	r22, r18
    2b82:	73 1f       	adc	r23, r19
    2b84:	84 1f       	adc	r24, r20
    2b86:	48 f4       	brcc	.+18     	; 0x2b9a <__addsf3x+0x9c>
    2b88:	87 95       	ror	r24
    2b8a:	77 95       	ror	r23
    2b8c:	67 95       	ror	r22
    2b8e:	b7 95       	ror	r27
    2b90:	f7 95       	ror	r31
    2b92:	9e 3f       	cpi	r25, 0xFE	; 254
    2b94:	08 f0       	brcs	.+2      	; 0x2b98 <__addsf3x+0x9a>
    2b96:	b0 cf       	rjmp	.-160    	; 0x2af8 <__addsf3+0x28>
    2b98:	93 95       	inc	r25
    2b9a:	88 0f       	add	r24, r24
    2b9c:	08 f0       	brcs	.+2      	; 0x2ba0 <__addsf3x+0xa2>
    2b9e:	99 27       	eor	r25, r25
    2ba0:	ee 0f       	add	r30, r30
    2ba2:	97 95       	ror	r25
    2ba4:	87 95       	ror	r24
    2ba6:	08 95       	ret

00002ba8 <__fp_inf>:
    2ba8:	97 f9       	bld	r25, 7
    2baa:	9f 67       	ori	r25, 0x7F	; 127
    2bac:	80 e8       	ldi	r24, 0x80	; 128
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	08 95       	ret

00002bb4 <__fp_nan>:
    2bb4:	9f ef       	ldi	r25, 0xFF	; 255
    2bb6:	80 ec       	ldi	r24, 0xC0	; 192
    2bb8:	08 95       	ret

00002bba <__fp_pscA>:
    2bba:	00 24       	eor	r0, r0
    2bbc:	0a 94       	dec	r0
    2bbe:	16 16       	cp	r1, r22
    2bc0:	17 06       	cpc	r1, r23
    2bc2:	18 06       	cpc	r1, r24
    2bc4:	09 06       	cpc	r0, r25
    2bc6:	08 95       	ret

00002bc8 <__fp_pscB>:
    2bc8:	00 24       	eor	r0, r0
    2bca:	0a 94       	dec	r0
    2bcc:	12 16       	cp	r1, r18
    2bce:	13 06       	cpc	r1, r19
    2bd0:	14 06       	cpc	r1, r20
    2bd2:	05 06       	cpc	r0, r21
    2bd4:	08 95       	ret

00002bd6 <__fp_round>:
    2bd6:	09 2e       	mov	r0, r25
    2bd8:	03 94       	inc	r0
    2bda:	00 0c       	add	r0, r0
    2bdc:	11 f4       	brne	.+4      	; 0x2be2 <__fp_round+0xc>
    2bde:	88 23       	and	r24, r24
    2be0:	52 f0       	brmi	.+20     	; 0x2bf6 <__fp_round+0x20>
    2be2:	bb 0f       	add	r27, r27
    2be4:	40 f4       	brcc	.+16     	; 0x2bf6 <__fp_round+0x20>
    2be6:	bf 2b       	or	r27, r31
    2be8:	11 f4       	brne	.+4      	; 0x2bee <__fp_round+0x18>
    2bea:	60 ff       	sbrs	r22, 0
    2bec:	04 c0       	rjmp	.+8      	; 0x2bf6 <__fp_round+0x20>
    2bee:	6f 5f       	subi	r22, 0xFF	; 255
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf6:	08 95       	ret

00002bf8 <__fp_split3>:
    2bf8:	57 fd       	sbrc	r21, 7
    2bfa:	90 58       	subi	r25, 0x80	; 128
    2bfc:	44 0f       	add	r20, r20
    2bfe:	55 1f       	adc	r21, r21
    2c00:	59 f0       	breq	.+22     	; 0x2c18 <__fp_splitA+0x10>
    2c02:	5f 3f       	cpi	r21, 0xFF	; 255
    2c04:	71 f0       	breq	.+28     	; 0x2c22 <__fp_splitA+0x1a>
    2c06:	47 95       	ror	r20

00002c08 <__fp_splitA>:
    2c08:	88 0f       	add	r24, r24
    2c0a:	97 fb       	bst	r25, 7
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	61 f0       	breq	.+24     	; 0x2c28 <__fp_splitA+0x20>
    2c10:	9f 3f       	cpi	r25, 0xFF	; 255
    2c12:	79 f0       	breq	.+30     	; 0x2c32 <__fp_splitA+0x2a>
    2c14:	87 95       	ror	r24
    2c16:	08 95       	ret
    2c18:	12 16       	cp	r1, r18
    2c1a:	13 06       	cpc	r1, r19
    2c1c:	14 06       	cpc	r1, r20
    2c1e:	55 1f       	adc	r21, r21
    2c20:	f2 cf       	rjmp	.-28     	; 0x2c06 <__fp_split3+0xe>
    2c22:	46 95       	lsr	r20
    2c24:	f1 df       	rcall	.-30     	; 0x2c08 <__fp_splitA>
    2c26:	08 c0       	rjmp	.+16     	; 0x2c38 <__fp_splitA+0x30>
    2c28:	16 16       	cp	r1, r22
    2c2a:	17 06       	cpc	r1, r23
    2c2c:	18 06       	cpc	r1, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	f1 cf       	rjmp	.-30     	; 0x2c14 <__fp_splitA+0xc>
    2c32:	86 95       	lsr	r24
    2c34:	71 05       	cpc	r23, r1
    2c36:	61 05       	cpc	r22, r1
    2c38:	08 94       	sec
    2c3a:	08 95       	ret

00002c3c <__fp_zero>:
    2c3c:	e8 94       	clt

00002c3e <__fp_szero>:
    2c3e:	bb 27       	eor	r27, r27
    2c40:	66 27       	eor	r22, r22
    2c42:	77 27       	eor	r23, r23
    2c44:	cb 01       	movw	r24, r22
    2c46:	97 f9       	bld	r25, 7
    2c48:	08 95       	ret

00002c4a <vfprintf>:
    2c4a:	a0 e1       	ldi	r26, 0x10	; 16
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	eb e2       	ldi	r30, 0x2B	; 43
    2c50:	f6 e1       	ldi	r31, 0x16	; 22
    2c52:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__prologue_saves__>
    2c56:	7c 01       	movw	r14, r24
    2c58:	1b 01       	movw	r2, r22
    2c5a:	6a 01       	movw	r12, r20
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	17 82       	std	Z+7, r1	; 0x07
    2c60:	16 82       	std	Z+6, r1	; 0x06
    2c62:	83 81       	ldd	r24, Z+3	; 0x03
    2c64:	81 ff       	sbrs	r24, 1
    2c66:	44 c3       	rjmp	.+1672   	; 0x32f0 <vfprintf+0x6a6>
    2c68:	9e 01       	movw	r18, r28
    2c6a:	2f 5f       	subi	r18, 0xFF	; 255
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	39 01       	movw	r6, r18
    2c70:	f7 01       	movw	r30, r14
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	f1 01       	movw	r30, r2
    2c76:	93 fd       	sbrc	r25, 3
    2c78:	85 91       	lpm	r24, Z+
    2c7a:	93 ff       	sbrs	r25, 3
    2c7c:	81 91       	ld	r24, Z+
    2c7e:	1f 01       	movw	r2, r30
    2c80:	88 23       	and	r24, r24
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <vfprintf+0x3c>
    2c84:	31 c3       	rjmp	.+1634   	; 0x32e8 <vfprintf+0x69e>
    2c86:	85 32       	cpi	r24, 0x25	; 37
    2c88:	39 f4       	brne	.+14     	; 0x2c98 <vfprintf+0x4e>
    2c8a:	93 fd       	sbrc	r25, 3
    2c8c:	85 91       	lpm	r24, Z+
    2c8e:	93 ff       	sbrs	r25, 3
    2c90:	81 91       	ld	r24, Z+
    2c92:	1f 01       	movw	r2, r30
    2c94:	85 32       	cpi	r24, 0x25	; 37
    2c96:	39 f4       	brne	.+14     	; 0x2ca6 <vfprintf+0x5c>
    2c98:	b7 01       	movw	r22, r14
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2ca0:	56 01       	movw	r10, r12
    2ca2:	65 01       	movw	r12, r10
    2ca4:	e5 cf       	rjmp	.-54     	; 0x2c70 <vfprintf+0x26>
    2ca6:	10 e0       	ldi	r17, 0x00	; 0
    2ca8:	51 2c       	mov	r5, r1
    2caa:	91 2c       	mov	r9, r1
    2cac:	ff e1       	ldi	r31, 0x1F	; 31
    2cae:	f9 15       	cp	r31, r9
    2cb0:	d8 f0       	brcs	.+54     	; 0x2ce8 <vfprintf+0x9e>
    2cb2:	8b 32       	cpi	r24, 0x2B	; 43
    2cb4:	79 f0       	breq	.+30     	; 0x2cd4 <vfprintf+0x8a>
    2cb6:	38 f4       	brcc	.+14     	; 0x2cc6 <vfprintf+0x7c>
    2cb8:	80 32       	cpi	r24, 0x20	; 32
    2cba:	79 f0       	breq	.+30     	; 0x2cda <vfprintf+0x90>
    2cbc:	83 32       	cpi	r24, 0x23	; 35
    2cbe:	a1 f4       	brne	.+40     	; 0x2ce8 <vfprintf+0x9e>
    2cc0:	f9 2d       	mov	r31, r9
    2cc2:	f0 61       	ori	r31, 0x10	; 16
    2cc4:	2e c0       	rjmp	.+92     	; 0x2d22 <vfprintf+0xd8>
    2cc6:	8d 32       	cpi	r24, 0x2D	; 45
    2cc8:	61 f0       	breq	.+24     	; 0x2ce2 <vfprintf+0x98>
    2cca:	80 33       	cpi	r24, 0x30	; 48
    2ccc:	69 f4       	brne	.+26     	; 0x2ce8 <vfprintf+0x9e>
    2cce:	29 2d       	mov	r18, r9
    2cd0:	21 60       	ori	r18, 0x01	; 1
    2cd2:	2d c0       	rjmp	.+90     	; 0x2d2e <vfprintf+0xe4>
    2cd4:	39 2d       	mov	r19, r9
    2cd6:	32 60       	ori	r19, 0x02	; 2
    2cd8:	93 2e       	mov	r9, r19
    2cda:	89 2d       	mov	r24, r9
    2cdc:	84 60       	ori	r24, 0x04	; 4
    2cde:	98 2e       	mov	r9, r24
    2ce0:	2a c0       	rjmp	.+84     	; 0x2d36 <vfprintf+0xec>
    2ce2:	e9 2d       	mov	r30, r9
    2ce4:	e8 60       	ori	r30, 0x08	; 8
    2ce6:	15 c0       	rjmp	.+42     	; 0x2d12 <vfprintf+0xc8>
    2ce8:	97 fc       	sbrc	r9, 7
    2cea:	2d c0       	rjmp	.+90     	; 0x2d46 <vfprintf+0xfc>
    2cec:	20 ed       	ldi	r18, 0xD0	; 208
    2cee:	28 0f       	add	r18, r24
    2cf0:	2a 30       	cpi	r18, 0x0A	; 10
    2cf2:	88 f4       	brcc	.+34     	; 0x2d16 <vfprintf+0xcc>
    2cf4:	96 fe       	sbrs	r9, 6
    2cf6:	06 c0       	rjmp	.+12     	; 0x2d04 <vfprintf+0xba>
    2cf8:	3a e0       	ldi	r19, 0x0A	; 10
    2cfa:	13 9f       	mul	r17, r19
    2cfc:	20 0d       	add	r18, r0
    2cfe:	11 24       	eor	r1, r1
    2d00:	12 2f       	mov	r17, r18
    2d02:	19 c0       	rjmp	.+50     	; 0x2d36 <vfprintf+0xec>
    2d04:	8a e0       	ldi	r24, 0x0A	; 10
    2d06:	58 9e       	mul	r5, r24
    2d08:	20 0d       	add	r18, r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	52 2e       	mov	r5, r18
    2d0e:	e9 2d       	mov	r30, r9
    2d10:	e0 62       	ori	r30, 0x20	; 32
    2d12:	9e 2e       	mov	r9, r30
    2d14:	10 c0       	rjmp	.+32     	; 0x2d36 <vfprintf+0xec>
    2d16:	8e 32       	cpi	r24, 0x2E	; 46
    2d18:	31 f4       	brne	.+12     	; 0x2d26 <vfprintf+0xdc>
    2d1a:	96 fc       	sbrc	r9, 6
    2d1c:	e5 c2       	rjmp	.+1482   	; 0x32e8 <vfprintf+0x69e>
    2d1e:	f9 2d       	mov	r31, r9
    2d20:	f0 64       	ori	r31, 0x40	; 64
    2d22:	9f 2e       	mov	r9, r31
    2d24:	08 c0       	rjmp	.+16     	; 0x2d36 <vfprintf+0xec>
    2d26:	8c 36       	cpi	r24, 0x6C	; 108
    2d28:	21 f4       	brne	.+8      	; 0x2d32 <vfprintf+0xe8>
    2d2a:	29 2d       	mov	r18, r9
    2d2c:	20 68       	ori	r18, 0x80	; 128
    2d2e:	92 2e       	mov	r9, r18
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <vfprintf+0xec>
    2d32:	88 36       	cpi	r24, 0x68	; 104
    2d34:	41 f4       	brne	.+16     	; 0x2d46 <vfprintf+0xfc>
    2d36:	f1 01       	movw	r30, r2
    2d38:	93 fd       	sbrc	r25, 3
    2d3a:	85 91       	lpm	r24, Z+
    2d3c:	93 ff       	sbrs	r25, 3
    2d3e:	81 91       	ld	r24, Z+
    2d40:	1f 01       	movw	r2, r30
    2d42:	81 11       	cpse	r24, r1
    2d44:	b3 cf       	rjmp	.-154    	; 0x2cac <vfprintf+0x62>
    2d46:	9b eb       	ldi	r25, 0xBB	; 187
    2d48:	98 0f       	add	r25, r24
    2d4a:	93 30       	cpi	r25, 0x03	; 3
    2d4c:	20 f4       	brcc	.+8      	; 0x2d56 <vfprintf+0x10c>
    2d4e:	99 2d       	mov	r25, r9
    2d50:	90 61       	ori	r25, 0x10	; 16
    2d52:	80 5e       	subi	r24, 0xE0	; 224
    2d54:	07 c0       	rjmp	.+14     	; 0x2d64 <vfprintf+0x11a>
    2d56:	9b e9       	ldi	r25, 0x9B	; 155
    2d58:	98 0f       	add	r25, r24
    2d5a:	93 30       	cpi	r25, 0x03	; 3
    2d5c:	08 f0       	brcs	.+2      	; 0x2d60 <vfprintf+0x116>
    2d5e:	66 c1       	rjmp	.+716    	; 0x302c <vfprintf+0x3e2>
    2d60:	99 2d       	mov	r25, r9
    2d62:	9f 7e       	andi	r25, 0xEF	; 239
    2d64:	96 ff       	sbrs	r25, 6
    2d66:	16 e0       	ldi	r17, 0x06	; 6
    2d68:	9f 73       	andi	r25, 0x3F	; 63
    2d6a:	99 2e       	mov	r9, r25
    2d6c:	85 36       	cpi	r24, 0x65	; 101
    2d6e:	19 f4       	brne	.+6      	; 0x2d76 <vfprintf+0x12c>
    2d70:	90 64       	ori	r25, 0x40	; 64
    2d72:	99 2e       	mov	r9, r25
    2d74:	08 c0       	rjmp	.+16     	; 0x2d86 <vfprintf+0x13c>
    2d76:	86 36       	cpi	r24, 0x66	; 102
    2d78:	21 f4       	brne	.+8      	; 0x2d82 <vfprintf+0x138>
    2d7a:	39 2f       	mov	r19, r25
    2d7c:	30 68       	ori	r19, 0x80	; 128
    2d7e:	93 2e       	mov	r9, r19
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <vfprintf+0x13c>
    2d82:	11 11       	cpse	r17, r1
    2d84:	11 50       	subi	r17, 0x01	; 1
    2d86:	97 fe       	sbrs	r9, 7
    2d88:	07 c0       	rjmp	.+14     	; 0x2d98 <vfprintf+0x14e>
    2d8a:	1c 33       	cpi	r17, 0x3C	; 60
    2d8c:	50 f4       	brcc	.+20     	; 0x2da2 <vfprintf+0x158>
    2d8e:	44 24       	eor	r4, r4
    2d90:	43 94       	inc	r4
    2d92:	41 0e       	add	r4, r17
    2d94:	27 e0       	ldi	r18, 0x07	; 7
    2d96:	0b c0       	rjmp	.+22     	; 0x2dae <vfprintf+0x164>
    2d98:	18 30       	cpi	r17, 0x08	; 8
    2d9a:	38 f0       	brcs	.+14     	; 0x2daa <vfprintf+0x160>
    2d9c:	27 e0       	ldi	r18, 0x07	; 7
    2d9e:	17 e0       	ldi	r17, 0x07	; 7
    2da0:	05 c0       	rjmp	.+10     	; 0x2dac <vfprintf+0x162>
    2da2:	27 e0       	ldi	r18, 0x07	; 7
    2da4:	9c e3       	ldi	r25, 0x3C	; 60
    2da6:	49 2e       	mov	r4, r25
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <vfprintf+0x164>
    2daa:	21 2f       	mov	r18, r17
    2dac:	41 2c       	mov	r4, r1
    2dae:	56 01       	movw	r10, r12
    2db0:	84 e0       	ldi	r24, 0x04	; 4
    2db2:	a8 0e       	add	r10, r24
    2db4:	b1 1c       	adc	r11, r1
    2db6:	f6 01       	movw	r30, r12
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	04 2d       	mov	r16, r4
    2dc2:	a3 01       	movw	r20, r6
    2dc4:	0e 94 15 1a 	call	0x342a	; 0x342a <__ftoa_engine>
    2dc8:	6c 01       	movw	r12, r24
    2dca:	f9 81       	ldd	r31, Y+1	; 0x01
    2dcc:	fc 87       	std	Y+12, r31	; 0x0c
    2dce:	f0 ff       	sbrs	r31, 0
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <vfprintf+0x18c>
    2dd2:	f3 ff       	sbrs	r31, 3
    2dd4:	06 c0       	rjmp	.+12     	; 0x2de2 <vfprintf+0x198>
    2dd6:	91 fc       	sbrc	r9, 1
    2dd8:	06 c0       	rjmp	.+12     	; 0x2de6 <vfprintf+0x19c>
    2dda:	92 fe       	sbrs	r9, 2
    2ddc:	06 c0       	rjmp	.+12     	; 0x2dea <vfprintf+0x1a0>
    2dde:	00 e2       	ldi	r16, 0x20	; 32
    2de0:	05 c0       	rjmp	.+10     	; 0x2dec <vfprintf+0x1a2>
    2de2:	0d e2       	ldi	r16, 0x2D	; 45
    2de4:	03 c0       	rjmp	.+6      	; 0x2dec <vfprintf+0x1a2>
    2de6:	0b e2       	ldi	r16, 0x2B	; 43
    2de8:	01 c0       	rjmp	.+2      	; 0x2dec <vfprintf+0x1a2>
    2dea:	00 e0       	ldi	r16, 0x00	; 0
    2dec:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dee:	8c 70       	andi	r24, 0x0C	; 12
    2df0:	19 f0       	breq	.+6      	; 0x2df8 <vfprintf+0x1ae>
    2df2:	01 11       	cpse	r16, r1
    2df4:	5a c2       	rjmp	.+1204   	; 0x32aa <vfprintf+0x660>
    2df6:	9b c2       	rjmp	.+1334   	; 0x332e <vfprintf+0x6e4>
    2df8:	97 fe       	sbrs	r9, 7
    2dfa:	10 c0       	rjmp	.+32     	; 0x2e1c <vfprintf+0x1d2>
    2dfc:	4c 0c       	add	r4, r12
    2dfe:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e00:	f4 ff       	sbrs	r31, 4
    2e02:	04 c0       	rjmp	.+8      	; 0x2e0c <vfprintf+0x1c2>
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	81 33       	cpi	r24, 0x31	; 49
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <vfprintf+0x1c2>
    2e0a:	4a 94       	dec	r4
    2e0c:	14 14       	cp	r1, r4
    2e0e:	74 f5       	brge	.+92     	; 0x2e6c <vfprintf+0x222>
    2e10:	28 e0       	ldi	r18, 0x08	; 8
    2e12:	24 15       	cp	r18, r4
    2e14:	78 f5       	brcc	.+94     	; 0x2e74 <vfprintf+0x22a>
    2e16:	88 e0       	ldi	r24, 0x08	; 8
    2e18:	48 2e       	mov	r4, r24
    2e1a:	2c c0       	rjmp	.+88     	; 0x2e74 <vfprintf+0x22a>
    2e1c:	96 fc       	sbrc	r9, 6
    2e1e:	2a c0       	rjmp	.+84     	; 0x2e74 <vfprintf+0x22a>
    2e20:	81 2f       	mov	r24, r17
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	8c 15       	cp	r24, r12
    2e26:	9d 05       	cpc	r25, r13
    2e28:	9c f0       	brlt	.+38     	; 0x2e50 <vfprintf+0x206>
    2e2a:	3c ef       	ldi	r19, 0xFC	; 252
    2e2c:	c3 16       	cp	r12, r19
    2e2e:	3f ef       	ldi	r19, 0xFF	; 255
    2e30:	d3 06       	cpc	r13, r19
    2e32:	74 f0       	brlt	.+28     	; 0x2e50 <vfprintf+0x206>
    2e34:	89 2d       	mov	r24, r9
    2e36:	80 68       	ori	r24, 0x80	; 128
    2e38:	98 2e       	mov	r9, r24
    2e3a:	0a c0       	rjmp	.+20     	; 0x2e50 <vfprintf+0x206>
    2e3c:	e2 e0       	ldi	r30, 0x02	; 2
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	ec 0f       	add	r30, r28
    2e42:	fd 1f       	adc	r31, r29
    2e44:	e1 0f       	add	r30, r17
    2e46:	f1 1d       	adc	r31, r1
    2e48:	80 81       	ld	r24, Z
    2e4a:	80 33       	cpi	r24, 0x30	; 48
    2e4c:	19 f4       	brne	.+6      	; 0x2e54 <vfprintf+0x20a>
    2e4e:	11 50       	subi	r17, 0x01	; 1
    2e50:	11 11       	cpse	r17, r1
    2e52:	f4 cf       	rjmp	.-24     	; 0x2e3c <vfprintf+0x1f2>
    2e54:	97 fe       	sbrs	r9, 7
    2e56:	0e c0       	rjmp	.+28     	; 0x2e74 <vfprintf+0x22a>
    2e58:	44 24       	eor	r4, r4
    2e5a:	43 94       	inc	r4
    2e5c:	41 0e       	add	r4, r17
    2e5e:	81 2f       	mov	r24, r17
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	c8 16       	cp	r12, r24
    2e64:	d9 06       	cpc	r13, r25
    2e66:	2c f4       	brge	.+10     	; 0x2e72 <vfprintf+0x228>
    2e68:	1c 19       	sub	r17, r12
    2e6a:	04 c0       	rjmp	.+8      	; 0x2e74 <vfprintf+0x22a>
    2e6c:	44 24       	eor	r4, r4
    2e6e:	43 94       	inc	r4
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <vfprintf+0x22a>
    2e72:	10 e0       	ldi	r17, 0x00	; 0
    2e74:	97 fe       	sbrs	r9, 7
    2e76:	06 c0       	rjmp	.+12     	; 0x2e84 <vfprintf+0x23a>
    2e78:	1c 14       	cp	r1, r12
    2e7a:	1d 04       	cpc	r1, r13
    2e7c:	34 f4       	brge	.+12     	; 0x2e8a <vfprintf+0x240>
    2e7e:	c6 01       	movw	r24, r12
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	05 c0       	rjmp	.+10     	; 0x2e8e <vfprintf+0x244>
    2e84:	85 e0       	ldi	r24, 0x05	; 5
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <vfprintf+0x244>
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	01 11       	cpse	r16, r1
    2e90:	01 96       	adiw	r24, 0x01	; 1
    2e92:	11 23       	and	r17, r17
    2e94:	31 f0       	breq	.+12     	; 0x2ea2 <vfprintf+0x258>
    2e96:	21 2f       	mov	r18, r17
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	2f 5f       	subi	r18, 0xFF	; 255
    2e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9e:	82 0f       	add	r24, r18
    2ea0:	93 1f       	adc	r25, r19
    2ea2:	25 2d       	mov	r18, r5
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	82 17       	cp	r24, r18
    2ea8:	93 07       	cpc	r25, r19
    2eaa:	14 f4       	brge	.+4      	; 0x2eb0 <vfprintf+0x266>
    2eac:	58 1a       	sub	r5, r24
    2eae:	01 c0       	rjmp	.+2      	; 0x2eb2 <vfprintf+0x268>
    2eb0:	51 2c       	mov	r5, r1
    2eb2:	89 2d       	mov	r24, r9
    2eb4:	89 70       	andi	r24, 0x09	; 9
    2eb6:	49 f4       	brne	.+18     	; 0x2eca <vfprintf+0x280>
    2eb8:	55 20       	and	r5, r5
    2eba:	39 f0       	breq	.+14     	; 0x2eca <vfprintf+0x280>
    2ebc:	b7 01       	movw	r22, r14
    2ebe:	80 e2       	ldi	r24, 0x20	; 32
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2ec6:	5a 94       	dec	r5
    2ec8:	f7 cf       	rjmp	.-18     	; 0x2eb8 <vfprintf+0x26e>
    2eca:	00 23       	and	r16, r16
    2ecc:	29 f0       	breq	.+10     	; 0x2ed8 <vfprintf+0x28e>
    2ece:	b7 01       	movw	r22, r14
    2ed0:	80 2f       	mov	r24, r16
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2ed8:	93 fc       	sbrc	r9, 3
    2eda:	09 c0       	rjmp	.+18     	; 0x2eee <vfprintf+0x2a4>
    2edc:	55 20       	and	r5, r5
    2ede:	39 f0       	breq	.+14     	; 0x2eee <vfprintf+0x2a4>
    2ee0:	b7 01       	movw	r22, r14
    2ee2:	80 e3       	ldi	r24, 0x30	; 48
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2eea:	5a 94       	dec	r5
    2eec:	f7 cf       	rjmp	.-18     	; 0x2edc <vfprintf+0x292>
    2eee:	97 fe       	sbrs	r9, 7
    2ef0:	4c c0       	rjmp	.+152    	; 0x2f8a <vfprintf+0x340>
    2ef2:	46 01       	movw	r8, r12
    2ef4:	d7 fe       	sbrs	r13, 7
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <vfprintf+0x2b2>
    2ef8:	81 2c       	mov	r8, r1
    2efa:	91 2c       	mov	r9, r1
    2efc:	c6 01       	movw	r24, r12
    2efe:	88 19       	sub	r24, r8
    2f00:	99 09       	sbc	r25, r9
    2f02:	f3 01       	movw	r30, r6
    2f04:	e8 0f       	add	r30, r24
    2f06:	f9 1f       	adc	r31, r25
    2f08:	fe 87       	std	Y+14, r31	; 0x0e
    2f0a:	ed 87       	std	Y+13, r30	; 0x0d
    2f0c:	96 01       	movw	r18, r12
    2f0e:	24 19       	sub	r18, r4
    2f10:	31 09       	sbc	r19, r1
    2f12:	38 8b       	std	Y+16, r19	; 0x10
    2f14:	2f 87       	std	Y+15, r18	; 0x0f
    2f16:	01 2f       	mov	r16, r17
    2f18:	10 e0       	ldi	r17, 0x00	; 0
    2f1a:	11 95       	neg	r17
    2f1c:	01 95       	neg	r16
    2f1e:	11 09       	sbc	r17, r1
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	83 16       	cp	r8, r19
    2f24:	93 06       	cpc	r9, r19
    2f26:	29 f4       	brne	.+10     	; 0x2f32 <vfprintf+0x2e8>
    2f28:	b7 01       	movw	r22, r14
    2f2a:	8e e2       	ldi	r24, 0x2E	; 46
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2f32:	c8 14       	cp	r12, r8
    2f34:	d9 04       	cpc	r13, r9
    2f36:	4c f0       	brlt	.+18     	; 0x2f4a <vfprintf+0x300>
    2f38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3a:	98 89       	ldd	r25, Y+16	; 0x10
    2f3c:	88 15       	cp	r24, r8
    2f3e:	99 05       	cpc	r25, r9
    2f40:	24 f4       	brge	.+8      	; 0x2f4a <vfprintf+0x300>
    2f42:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f44:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f46:	81 81       	ldd	r24, Z+1	; 0x01
    2f48:	01 c0       	rjmp	.+2      	; 0x2f4c <vfprintf+0x302>
    2f4a:	80 e3       	ldi	r24, 0x30	; 48
    2f4c:	f1 e0       	ldi	r31, 0x01	; 1
    2f4e:	8f 1a       	sub	r8, r31
    2f50:	91 08       	sbc	r9, r1
    2f52:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f54:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f56:	2f 5f       	subi	r18, 0xFF	; 255
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	3e 87       	std	Y+14, r19	; 0x0e
    2f5c:	2d 87       	std	Y+13, r18	; 0x0d
    2f5e:	80 16       	cp	r8, r16
    2f60:	91 06       	cpc	r9, r17
    2f62:	2c f0       	brlt	.+10     	; 0x2f6e <vfprintf+0x324>
    2f64:	b7 01       	movw	r22, r14
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2f6c:	d9 cf       	rjmp	.-78     	; 0x2f20 <vfprintf+0x2d6>
    2f6e:	c8 14       	cp	r12, r8
    2f70:	d9 04       	cpc	r13, r9
    2f72:	41 f4       	brne	.+16     	; 0x2f84 <vfprintf+0x33a>
    2f74:	9a 81       	ldd	r25, Y+2	; 0x02
    2f76:	96 33       	cpi	r25, 0x36	; 54
    2f78:	20 f4       	brcc	.+8      	; 0x2f82 <vfprintf+0x338>
    2f7a:	95 33       	cpi	r25, 0x35	; 53
    2f7c:	19 f4       	brne	.+6      	; 0x2f84 <vfprintf+0x33a>
    2f7e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f80:	34 ff       	sbrs	r19, 4
    2f82:	81 e3       	ldi	r24, 0x31	; 49
    2f84:	b7 01       	movw	r22, r14
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	4e c0       	rjmp	.+156    	; 0x3026 <vfprintf+0x3dc>
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	81 33       	cpi	r24, 0x31	; 49
    2f8e:	19 f0       	breq	.+6      	; 0x2f96 <vfprintf+0x34c>
    2f90:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f92:	9f 7e       	andi	r25, 0xEF	; 239
    2f94:	9c 87       	std	Y+12, r25	; 0x0c
    2f96:	b7 01       	movw	r22, r14
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2f9e:	11 11       	cpse	r17, r1
    2fa0:	05 c0       	rjmp	.+10     	; 0x2fac <vfprintf+0x362>
    2fa2:	94 fc       	sbrc	r9, 4
    2fa4:	18 c0       	rjmp	.+48     	; 0x2fd6 <vfprintf+0x38c>
    2fa6:	85 e6       	ldi	r24, 0x65	; 101
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	17 c0       	rjmp	.+46     	; 0x2fda <vfprintf+0x390>
    2fac:	b7 01       	movw	r22, r14
    2fae:	8e e2       	ldi	r24, 0x2E	; 46
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2fb6:	1e 5f       	subi	r17, 0xFE	; 254
    2fb8:	82 e0       	ldi	r24, 0x02	; 2
    2fba:	01 e0       	ldi	r16, 0x01	; 1
    2fbc:	08 0f       	add	r16, r24
    2fbe:	f3 01       	movw	r30, r6
    2fc0:	e8 0f       	add	r30, r24
    2fc2:	f1 1d       	adc	r31, r1
    2fc4:	80 81       	ld	r24, Z
    2fc6:	b7 01       	movw	r22, r14
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2fce:	80 2f       	mov	r24, r16
    2fd0:	01 13       	cpse	r16, r17
    2fd2:	f3 cf       	rjmp	.-26     	; 0x2fba <vfprintf+0x370>
    2fd4:	e6 cf       	rjmp	.-52     	; 0x2fa2 <vfprintf+0x358>
    2fd6:	85 e4       	ldi	r24, 0x45	; 69
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	b7 01       	movw	r22, r14
    2fdc:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2fe0:	d7 fc       	sbrc	r13, 7
    2fe2:	06 c0       	rjmp	.+12     	; 0x2ff0 <vfprintf+0x3a6>
    2fe4:	c1 14       	cp	r12, r1
    2fe6:	d1 04       	cpc	r13, r1
    2fe8:	41 f4       	brne	.+16     	; 0x2ffa <vfprintf+0x3b0>
    2fea:	ec 85       	ldd	r30, Y+12	; 0x0c
    2fec:	e4 ff       	sbrs	r30, 4
    2fee:	05 c0       	rjmp	.+10     	; 0x2ffa <vfprintf+0x3b0>
    2ff0:	d1 94       	neg	r13
    2ff2:	c1 94       	neg	r12
    2ff4:	d1 08       	sbc	r13, r1
    2ff6:	8d e2       	ldi	r24, 0x2D	; 45
    2ff8:	01 c0       	rjmp	.+2      	; 0x2ffc <vfprintf+0x3b2>
    2ffa:	8b e2       	ldi	r24, 0x2B	; 43
    2ffc:	b7 01       	movw	r22, r14
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3004:	80 e3       	ldi	r24, 0x30	; 48
    3006:	2a e0       	ldi	r18, 0x0A	; 10
    3008:	c2 16       	cp	r12, r18
    300a:	d1 04       	cpc	r13, r1
    300c:	2c f0       	brlt	.+10     	; 0x3018 <vfprintf+0x3ce>
    300e:	8f 5f       	subi	r24, 0xFF	; 255
    3010:	fa e0       	ldi	r31, 0x0A	; 10
    3012:	cf 1a       	sub	r12, r31
    3014:	d1 08       	sbc	r13, r1
    3016:	f7 cf       	rjmp	.-18     	; 0x3006 <vfprintf+0x3bc>
    3018:	b7 01       	movw	r22, r14
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3020:	b7 01       	movw	r22, r14
    3022:	c6 01       	movw	r24, r12
    3024:	c0 96       	adiw	r24, 0x30	; 48
    3026:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    302a:	54 c1       	rjmp	.+680    	; 0x32d4 <vfprintf+0x68a>
    302c:	83 36       	cpi	r24, 0x63	; 99
    302e:	31 f0       	breq	.+12     	; 0x303c <vfprintf+0x3f2>
    3030:	83 37       	cpi	r24, 0x73	; 115
    3032:	79 f0       	breq	.+30     	; 0x3052 <vfprintf+0x408>
    3034:	83 35       	cpi	r24, 0x53	; 83
    3036:	09 f0       	breq	.+2      	; 0x303a <vfprintf+0x3f0>
    3038:	56 c0       	rjmp	.+172    	; 0x30e6 <vfprintf+0x49c>
    303a:	20 c0       	rjmp	.+64     	; 0x307c <vfprintf+0x432>
    303c:	56 01       	movw	r10, r12
    303e:	32 e0       	ldi	r19, 0x02	; 2
    3040:	a3 0e       	add	r10, r19
    3042:	b1 1c       	adc	r11, r1
    3044:	f6 01       	movw	r30, r12
    3046:	80 81       	ld	r24, Z
    3048:	89 83       	std	Y+1, r24	; 0x01
    304a:	01 e0       	ldi	r16, 0x01	; 1
    304c:	10 e0       	ldi	r17, 0x00	; 0
    304e:	63 01       	movw	r12, r6
    3050:	12 c0       	rjmp	.+36     	; 0x3076 <vfprintf+0x42c>
    3052:	56 01       	movw	r10, r12
    3054:	f2 e0       	ldi	r31, 0x02	; 2
    3056:	af 0e       	add	r10, r31
    3058:	b1 1c       	adc	r11, r1
    305a:	f6 01       	movw	r30, r12
    305c:	c0 80       	ld	r12, Z
    305e:	d1 80       	ldd	r13, Z+1	; 0x01
    3060:	96 fe       	sbrs	r9, 6
    3062:	03 c0       	rjmp	.+6      	; 0x306a <vfprintf+0x420>
    3064:	61 2f       	mov	r22, r17
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	02 c0       	rjmp	.+4      	; 0x306e <vfprintf+0x424>
    306a:	6f ef       	ldi	r22, 0xFF	; 255
    306c:	7f ef       	ldi	r23, 0xFF	; 255
    306e:	c6 01       	movw	r24, r12
    3070:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <strnlen>
    3074:	8c 01       	movw	r16, r24
    3076:	f9 2d       	mov	r31, r9
    3078:	ff 77       	andi	r31, 0x7F	; 127
    307a:	14 c0       	rjmp	.+40     	; 0x30a4 <vfprintf+0x45a>
    307c:	56 01       	movw	r10, r12
    307e:	22 e0       	ldi	r18, 0x02	; 2
    3080:	a2 0e       	add	r10, r18
    3082:	b1 1c       	adc	r11, r1
    3084:	f6 01       	movw	r30, r12
    3086:	c0 80       	ld	r12, Z
    3088:	d1 80       	ldd	r13, Z+1	; 0x01
    308a:	96 fe       	sbrs	r9, 6
    308c:	03 c0       	rjmp	.+6      	; 0x3094 <vfprintf+0x44a>
    308e:	61 2f       	mov	r22, r17
    3090:	70 e0       	ldi	r23, 0x00	; 0
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <vfprintf+0x44e>
    3094:	6f ef       	ldi	r22, 0xFF	; 255
    3096:	7f ef       	ldi	r23, 0xFF	; 255
    3098:	c6 01       	movw	r24, r12
    309a:	0e 94 ed 1a 	call	0x35da	; 0x35da <strnlen_P>
    309e:	8c 01       	movw	r16, r24
    30a0:	f9 2d       	mov	r31, r9
    30a2:	f0 68       	ori	r31, 0x80	; 128
    30a4:	9f 2e       	mov	r9, r31
    30a6:	f3 fd       	sbrc	r31, 3
    30a8:	1a c0       	rjmp	.+52     	; 0x30de <vfprintf+0x494>
    30aa:	85 2d       	mov	r24, r5
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	08 17       	cp	r16, r24
    30b0:	19 07       	cpc	r17, r25
    30b2:	a8 f4       	brcc	.+42     	; 0x30de <vfprintf+0x494>
    30b4:	b7 01       	movw	r22, r14
    30b6:	80 e2       	ldi	r24, 0x20	; 32
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    30be:	5a 94       	dec	r5
    30c0:	f4 cf       	rjmp	.-24     	; 0x30aa <vfprintf+0x460>
    30c2:	f6 01       	movw	r30, r12
    30c4:	97 fc       	sbrc	r9, 7
    30c6:	85 91       	lpm	r24, Z+
    30c8:	97 fe       	sbrs	r9, 7
    30ca:	81 91       	ld	r24, Z+
    30cc:	6f 01       	movw	r12, r30
    30ce:	b7 01       	movw	r22, r14
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    30d6:	51 10       	cpse	r5, r1
    30d8:	5a 94       	dec	r5
    30da:	01 50       	subi	r16, 0x01	; 1
    30dc:	11 09       	sbc	r17, r1
    30de:	01 15       	cp	r16, r1
    30e0:	11 05       	cpc	r17, r1
    30e2:	79 f7       	brne	.-34     	; 0x30c2 <vfprintf+0x478>
    30e4:	f7 c0       	rjmp	.+494    	; 0x32d4 <vfprintf+0x68a>
    30e6:	84 36       	cpi	r24, 0x64	; 100
    30e8:	11 f0       	breq	.+4      	; 0x30ee <vfprintf+0x4a4>
    30ea:	89 36       	cpi	r24, 0x69	; 105
    30ec:	61 f5       	brne	.+88     	; 0x3146 <vfprintf+0x4fc>
    30ee:	56 01       	movw	r10, r12
    30f0:	97 fe       	sbrs	r9, 7
    30f2:	09 c0       	rjmp	.+18     	; 0x3106 <vfprintf+0x4bc>
    30f4:	24 e0       	ldi	r18, 0x04	; 4
    30f6:	a2 0e       	add	r10, r18
    30f8:	b1 1c       	adc	r11, r1
    30fa:	f6 01       	movw	r30, r12
    30fc:	60 81       	ld	r22, Z
    30fe:	71 81       	ldd	r23, Z+1	; 0x01
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	0a c0       	rjmp	.+20     	; 0x311a <vfprintf+0x4d0>
    3106:	f2 e0       	ldi	r31, 0x02	; 2
    3108:	af 0e       	add	r10, r31
    310a:	b1 1c       	adc	r11, r1
    310c:	f6 01       	movw	r30, r12
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	07 2e       	mov	r0, r23
    3114:	00 0c       	add	r0, r0
    3116:	88 0b       	sbc	r24, r24
    3118:	99 0b       	sbc	r25, r25
    311a:	f9 2d       	mov	r31, r9
    311c:	ff 76       	andi	r31, 0x6F	; 111
    311e:	9f 2e       	mov	r9, r31
    3120:	97 ff       	sbrs	r25, 7
    3122:	09 c0       	rjmp	.+18     	; 0x3136 <vfprintf+0x4ec>
    3124:	90 95       	com	r25
    3126:	80 95       	com	r24
    3128:	70 95       	com	r23
    312a:	61 95       	neg	r22
    312c:	7f 4f       	sbci	r23, 0xFF	; 255
    312e:	8f 4f       	sbci	r24, 0xFF	; 255
    3130:	9f 4f       	sbci	r25, 0xFF	; 255
    3132:	f0 68       	ori	r31, 0x80	; 128
    3134:	9f 2e       	mov	r9, r31
    3136:	2a e0       	ldi	r18, 0x0A	; 10
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	a3 01       	movw	r20, r6
    313c:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__ultoa_invert>
    3140:	c8 2e       	mov	r12, r24
    3142:	c6 18       	sub	r12, r6
    3144:	3f c0       	rjmp	.+126    	; 0x31c4 <vfprintf+0x57a>
    3146:	09 2d       	mov	r16, r9
    3148:	85 37       	cpi	r24, 0x75	; 117
    314a:	21 f4       	brne	.+8      	; 0x3154 <vfprintf+0x50a>
    314c:	0f 7e       	andi	r16, 0xEF	; 239
    314e:	2a e0       	ldi	r18, 0x0A	; 10
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	1d c0       	rjmp	.+58     	; 0x318e <vfprintf+0x544>
    3154:	09 7f       	andi	r16, 0xF9	; 249
    3156:	8f 36       	cpi	r24, 0x6F	; 111
    3158:	91 f0       	breq	.+36     	; 0x317e <vfprintf+0x534>
    315a:	18 f4       	brcc	.+6      	; 0x3162 <vfprintf+0x518>
    315c:	88 35       	cpi	r24, 0x58	; 88
    315e:	59 f0       	breq	.+22     	; 0x3176 <vfprintf+0x52c>
    3160:	c3 c0       	rjmp	.+390    	; 0x32e8 <vfprintf+0x69e>
    3162:	80 37       	cpi	r24, 0x70	; 112
    3164:	19 f0       	breq	.+6      	; 0x316c <vfprintf+0x522>
    3166:	88 37       	cpi	r24, 0x78	; 120
    3168:	11 f0       	breq	.+4      	; 0x316e <vfprintf+0x524>
    316a:	be c0       	rjmp	.+380    	; 0x32e8 <vfprintf+0x69e>
    316c:	00 61       	ori	r16, 0x10	; 16
    316e:	04 ff       	sbrs	r16, 4
    3170:	09 c0       	rjmp	.+18     	; 0x3184 <vfprintf+0x53a>
    3172:	04 60       	ori	r16, 0x04	; 4
    3174:	07 c0       	rjmp	.+14     	; 0x3184 <vfprintf+0x53a>
    3176:	94 fe       	sbrs	r9, 4
    3178:	08 c0       	rjmp	.+16     	; 0x318a <vfprintf+0x540>
    317a:	06 60       	ori	r16, 0x06	; 6
    317c:	06 c0       	rjmp	.+12     	; 0x318a <vfprintf+0x540>
    317e:	28 e0       	ldi	r18, 0x08	; 8
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	05 c0       	rjmp	.+10     	; 0x318e <vfprintf+0x544>
    3184:	20 e1       	ldi	r18, 0x10	; 16
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	02 c0       	rjmp	.+4      	; 0x318e <vfprintf+0x544>
    318a:	20 e1       	ldi	r18, 0x10	; 16
    318c:	32 e0       	ldi	r19, 0x02	; 2
    318e:	56 01       	movw	r10, r12
    3190:	07 ff       	sbrs	r16, 7
    3192:	09 c0       	rjmp	.+18     	; 0x31a6 <vfprintf+0x55c>
    3194:	84 e0       	ldi	r24, 0x04	; 4
    3196:	a8 0e       	add	r10, r24
    3198:	b1 1c       	adc	r11, r1
    319a:	f6 01       	movw	r30, r12
    319c:	60 81       	ld	r22, Z
    319e:	71 81       	ldd	r23, Z+1	; 0x01
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	08 c0       	rjmp	.+16     	; 0x31b6 <vfprintf+0x56c>
    31a6:	f2 e0       	ldi	r31, 0x02	; 2
    31a8:	af 0e       	add	r10, r31
    31aa:	b1 1c       	adc	r11, r1
    31ac:	f6 01       	movw	r30, r12
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	a3 01       	movw	r20, r6
    31b8:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__ultoa_invert>
    31bc:	c8 2e       	mov	r12, r24
    31be:	c6 18       	sub	r12, r6
    31c0:	0f 77       	andi	r16, 0x7F	; 127
    31c2:	90 2e       	mov	r9, r16
    31c4:	96 fe       	sbrs	r9, 6
    31c6:	0b c0       	rjmp	.+22     	; 0x31de <vfprintf+0x594>
    31c8:	09 2d       	mov	r16, r9
    31ca:	0e 7f       	andi	r16, 0xFE	; 254
    31cc:	c1 16       	cp	r12, r17
    31ce:	50 f4       	brcc	.+20     	; 0x31e4 <vfprintf+0x59a>
    31d0:	94 fe       	sbrs	r9, 4
    31d2:	0a c0       	rjmp	.+20     	; 0x31e8 <vfprintf+0x59e>
    31d4:	92 fc       	sbrc	r9, 2
    31d6:	08 c0       	rjmp	.+16     	; 0x31e8 <vfprintf+0x59e>
    31d8:	09 2d       	mov	r16, r9
    31da:	0e 7e       	andi	r16, 0xEE	; 238
    31dc:	05 c0       	rjmp	.+10     	; 0x31e8 <vfprintf+0x59e>
    31de:	dc 2c       	mov	r13, r12
    31e0:	09 2d       	mov	r16, r9
    31e2:	03 c0       	rjmp	.+6      	; 0x31ea <vfprintf+0x5a0>
    31e4:	dc 2c       	mov	r13, r12
    31e6:	01 c0       	rjmp	.+2      	; 0x31ea <vfprintf+0x5a0>
    31e8:	d1 2e       	mov	r13, r17
    31ea:	04 ff       	sbrs	r16, 4
    31ec:	0d c0       	rjmp	.+26     	; 0x3208 <vfprintf+0x5be>
    31ee:	fe 01       	movw	r30, r28
    31f0:	ec 0d       	add	r30, r12
    31f2:	f1 1d       	adc	r31, r1
    31f4:	80 81       	ld	r24, Z
    31f6:	80 33       	cpi	r24, 0x30	; 48
    31f8:	11 f4       	brne	.+4      	; 0x31fe <vfprintf+0x5b4>
    31fa:	09 7e       	andi	r16, 0xE9	; 233
    31fc:	09 c0       	rjmp	.+18     	; 0x3210 <vfprintf+0x5c6>
    31fe:	02 ff       	sbrs	r16, 2
    3200:	06 c0       	rjmp	.+12     	; 0x320e <vfprintf+0x5c4>
    3202:	d3 94       	inc	r13
    3204:	d3 94       	inc	r13
    3206:	04 c0       	rjmp	.+8      	; 0x3210 <vfprintf+0x5c6>
    3208:	80 2f       	mov	r24, r16
    320a:	86 78       	andi	r24, 0x86	; 134
    320c:	09 f0       	breq	.+2      	; 0x3210 <vfprintf+0x5c6>
    320e:	d3 94       	inc	r13
    3210:	03 fd       	sbrc	r16, 3
    3212:	11 c0       	rjmp	.+34     	; 0x3236 <vfprintf+0x5ec>
    3214:	00 ff       	sbrs	r16, 0
    3216:	06 c0       	rjmp	.+12     	; 0x3224 <vfprintf+0x5da>
    3218:	1c 2d       	mov	r17, r12
    321a:	d5 14       	cp	r13, r5
    321c:	80 f4       	brcc	.+32     	; 0x323e <vfprintf+0x5f4>
    321e:	15 0d       	add	r17, r5
    3220:	1d 19       	sub	r17, r13
    3222:	0d c0       	rjmp	.+26     	; 0x323e <vfprintf+0x5f4>
    3224:	d5 14       	cp	r13, r5
    3226:	58 f4       	brcc	.+22     	; 0x323e <vfprintf+0x5f4>
    3228:	b7 01       	movw	r22, r14
    322a:	80 e2       	ldi	r24, 0x20	; 32
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3232:	d3 94       	inc	r13
    3234:	f7 cf       	rjmp	.-18     	; 0x3224 <vfprintf+0x5da>
    3236:	d5 14       	cp	r13, r5
    3238:	10 f4       	brcc	.+4      	; 0x323e <vfprintf+0x5f4>
    323a:	5d 18       	sub	r5, r13
    323c:	01 c0       	rjmp	.+2      	; 0x3240 <vfprintf+0x5f6>
    323e:	51 2c       	mov	r5, r1
    3240:	04 ff       	sbrs	r16, 4
    3242:	10 c0       	rjmp	.+32     	; 0x3264 <vfprintf+0x61a>
    3244:	b7 01       	movw	r22, r14
    3246:	80 e3       	ldi	r24, 0x30	; 48
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    324e:	02 ff       	sbrs	r16, 2
    3250:	17 c0       	rjmp	.+46     	; 0x3280 <vfprintf+0x636>
    3252:	01 fd       	sbrc	r16, 1
    3254:	03 c0       	rjmp	.+6      	; 0x325c <vfprintf+0x612>
    3256:	88 e7       	ldi	r24, 0x78	; 120
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <vfprintf+0x616>
    325c:	88 e5       	ldi	r24, 0x58	; 88
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	b7 01       	movw	r22, r14
    3262:	0c c0       	rjmp	.+24     	; 0x327c <vfprintf+0x632>
    3264:	80 2f       	mov	r24, r16
    3266:	86 78       	andi	r24, 0x86	; 134
    3268:	59 f0       	breq	.+22     	; 0x3280 <vfprintf+0x636>
    326a:	01 ff       	sbrs	r16, 1
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <vfprintf+0x628>
    326e:	8b e2       	ldi	r24, 0x2B	; 43
    3270:	01 c0       	rjmp	.+2      	; 0x3274 <vfprintf+0x62a>
    3272:	80 e2       	ldi	r24, 0x20	; 32
    3274:	07 fd       	sbrc	r16, 7
    3276:	8d e2       	ldi	r24, 0x2D	; 45
    3278:	b7 01       	movw	r22, r14
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3280:	c1 16       	cp	r12, r17
    3282:	38 f4       	brcc	.+14     	; 0x3292 <vfprintf+0x648>
    3284:	b7 01       	movw	r22, r14
    3286:	80 e3       	ldi	r24, 0x30	; 48
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    328e:	11 50       	subi	r17, 0x01	; 1
    3290:	f7 cf       	rjmp	.-18     	; 0x3280 <vfprintf+0x636>
    3292:	ca 94       	dec	r12
    3294:	f3 01       	movw	r30, r6
    3296:	ec 0d       	add	r30, r12
    3298:	f1 1d       	adc	r31, r1
    329a:	80 81       	ld	r24, Z
    329c:	b7 01       	movw	r22, r14
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    32a4:	c1 10       	cpse	r12, r1
    32a6:	f5 cf       	rjmp	.-22     	; 0x3292 <vfprintf+0x648>
    32a8:	15 c0       	rjmp	.+42     	; 0x32d4 <vfprintf+0x68a>
    32aa:	f4 e0       	ldi	r31, 0x04	; 4
    32ac:	f5 15       	cp	r31, r5
    32ae:	60 f5       	brcc	.+88     	; 0x3308 <vfprintf+0x6be>
    32b0:	84 e0       	ldi	r24, 0x04	; 4
    32b2:	58 1a       	sub	r5, r24
    32b4:	93 fe       	sbrs	r9, 3
    32b6:	1f c0       	rjmp	.+62     	; 0x32f6 <vfprintf+0x6ac>
    32b8:	01 11       	cpse	r16, r1
    32ba:	27 c0       	rjmp	.+78     	; 0x330a <vfprintf+0x6c0>
    32bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    32be:	23 ff       	sbrs	r18, 3
    32c0:	2a c0       	rjmp	.+84     	; 0x3316 <vfprintf+0x6cc>
    32c2:	04 eb       	ldi	r16, 0xB4	; 180
    32c4:	10 e0       	ldi	r17, 0x00	; 0
    32c6:	39 2d       	mov	r19, r9
    32c8:	30 71       	andi	r19, 0x10	; 16
    32ca:	93 2e       	mov	r9, r19
    32cc:	f8 01       	movw	r30, r16
    32ce:	84 91       	lpm	r24, Z
    32d0:	81 11       	cpse	r24, r1
    32d2:	24 c0       	rjmp	.+72     	; 0x331c <vfprintf+0x6d2>
    32d4:	55 20       	and	r5, r5
    32d6:	09 f4       	brne	.+2      	; 0x32da <vfprintf+0x690>
    32d8:	e4 cc       	rjmp	.-1592   	; 0x2ca2 <vfprintf+0x58>
    32da:	b7 01       	movw	r22, r14
    32dc:	80 e2       	ldi	r24, 0x20	; 32
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    32e4:	5a 94       	dec	r5
    32e6:	f6 cf       	rjmp	.-20     	; 0x32d4 <vfprintf+0x68a>
    32e8:	f7 01       	movw	r30, r14
    32ea:	86 81       	ldd	r24, Z+6	; 0x06
    32ec:	97 81       	ldd	r25, Z+7	; 0x07
    32ee:	26 c0       	rjmp	.+76     	; 0x333c <vfprintf+0x6f2>
    32f0:	8f ef       	ldi	r24, 0xFF	; 255
    32f2:	9f ef       	ldi	r25, 0xFF	; 255
    32f4:	23 c0       	rjmp	.+70     	; 0x333c <vfprintf+0x6f2>
    32f6:	b7 01       	movw	r22, r14
    32f8:	80 e2       	ldi	r24, 0x20	; 32
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3300:	5a 94       	dec	r5
    3302:	51 10       	cpse	r5, r1
    3304:	f8 cf       	rjmp	.-16     	; 0x32f6 <vfprintf+0x6ac>
    3306:	d8 cf       	rjmp	.-80     	; 0x32b8 <vfprintf+0x66e>
    3308:	51 2c       	mov	r5, r1
    330a:	b7 01       	movw	r22, r14
    330c:	80 2f       	mov	r24, r16
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3314:	d3 cf       	rjmp	.-90     	; 0x32bc <vfprintf+0x672>
    3316:	08 eb       	ldi	r16, 0xB8	; 184
    3318:	10 e0       	ldi	r17, 0x00	; 0
    331a:	d5 cf       	rjmp	.-86     	; 0x32c6 <vfprintf+0x67c>
    331c:	91 10       	cpse	r9, r1
    331e:	80 52       	subi	r24, 0x20	; 32
    3320:	b7 01       	movw	r22, r14
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3328:	0f 5f       	subi	r16, 0xFF	; 255
    332a:	1f 4f       	sbci	r17, 0xFF	; 255
    332c:	cf cf       	rjmp	.-98     	; 0x32cc <vfprintf+0x682>
    332e:	23 e0       	ldi	r18, 0x03	; 3
    3330:	25 15       	cp	r18, r5
    3332:	10 f4       	brcc	.+4      	; 0x3338 <vfprintf+0x6ee>
    3334:	83 e0       	ldi	r24, 0x03	; 3
    3336:	bd cf       	rjmp	.-134    	; 0x32b2 <vfprintf+0x668>
    3338:	51 2c       	mov	r5, r1
    333a:	c0 cf       	rjmp	.-128    	; 0x32bc <vfprintf+0x672>
    333c:	60 96       	adiw	r28, 0x10	; 16
    333e:	e2 e1       	ldi	r30, 0x12	; 18
    3340:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__epilogue_restores__>

00003344 <__udivmodsi4>:
    3344:	a1 e2       	ldi	r26, 0x21	; 33
    3346:	1a 2e       	mov	r1, r26
    3348:	aa 1b       	sub	r26, r26
    334a:	bb 1b       	sub	r27, r27
    334c:	fd 01       	movw	r30, r26
    334e:	0d c0       	rjmp	.+26     	; 0x336a <__udivmodsi4_ep>

00003350 <__udivmodsi4_loop>:
    3350:	aa 1f       	adc	r26, r26
    3352:	bb 1f       	adc	r27, r27
    3354:	ee 1f       	adc	r30, r30
    3356:	ff 1f       	adc	r31, r31
    3358:	a2 17       	cp	r26, r18
    335a:	b3 07       	cpc	r27, r19
    335c:	e4 07       	cpc	r30, r20
    335e:	f5 07       	cpc	r31, r21
    3360:	20 f0       	brcs	.+8      	; 0x336a <__udivmodsi4_ep>
    3362:	a2 1b       	sub	r26, r18
    3364:	b3 0b       	sbc	r27, r19
    3366:	e4 0b       	sbc	r30, r20
    3368:	f5 0b       	sbc	r31, r21

0000336a <__udivmodsi4_ep>:
    336a:	66 1f       	adc	r22, r22
    336c:	77 1f       	adc	r23, r23
    336e:	88 1f       	adc	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	1a 94       	dec	r1
    3374:	69 f7       	brne	.-38     	; 0x3350 <__udivmodsi4_loop>
    3376:	60 95       	com	r22
    3378:	70 95       	com	r23
    337a:	80 95       	com	r24
    337c:	90 95       	com	r25
    337e:	9b 01       	movw	r18, r22
    3380:	ac 01       	movw	r20, r24
    3382:	bd 01       	movw	r22, r26
    3384:	cf 01       	movw	r24, r30
    3386:	08 95       	ret

00003388 <__umulhisi3>:
    3388:	a2 9f       	mul	r26, r18
    338a:	b0 01       	movw	r22, r0
    338c:	b3 9f       	mul	r27, r19
    338e:	c0 01       	movw	r24, r0
    3390:	a3 9f       	mul	r26, r19
    3392:	70 0d       	add	r23, r0
    3394:	81 1d       	adc	r24, r1
    3396:	11 24       	eor	r1, r1
    3398:	91 1d       	adc	r25, r1
    339a:	b2 9f       	mul	r27, r18
    339c:	70 0d       	add	r23, r0
    339e:	81 1d       	adc	r24, r1
    33a0:	11 24       	eor	r1, r1
    33a2:	91 1d       	adc	r25, r1
    33a4:	08 95       	ret

000033a6 <__muluhisi3>:
    33a6:	0e 94 c4 19 	call	0x3388	; 0x3388 <__umulhisi3>
    33aa:	a5 9f       	mul	r26, r21
    33ac:	90 0d       	add	r25, r0
    33ae:	b4 9f       	mul	r27, r20
    33b0:	90 0d       	add	r25, r0
    33b2:	a4 9f       	mul	r26, r20
    33b4:	80 0d       	add	r24, r0
    33b6:	91 1d       	adc	r25, r1
    33b8:	11 24       	eor	r1, r1
    33ba:	08 95       	ret

000033bc <__prologue_saves__>:
    33bc:	2f 92       	push	r2
    33be:	3f 92       	push	r3
    33c0:	4f 92       	push	r4
    33c2:	5f 92       	push	r5
    33c4:	6f 92       	push	r6
    33c6:	7f 92       	push	r7
    33c8:	8f 92       	push	r8
    33ca:	9f 92       	push	r9
    33cc:	af 92       	push	r10
    33ce:	bf 92       	push	r11
    33d0:	cf 92       	push	r12
    33d2:	df 92       	push	r13
    33d4:	ef 92       	push	r14
    33d6:	ff 92       	push	r15
    33d8:	0f 93       	push	r16
    33da:	1f 93       	push	r17
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	ca 1b       	sub	r28, r26
    33e6:	db 0b       	sbc	r29, r27
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	09 94       	ijmp

000033f4 <__epilogue_restores__>:
    33f4:	2a 88       	ldd	r2, Y+18	; 0x12
    33f6:	39 88       	ldd	r3, Y+17	; 0x11
    33f8:	48 88       	ldd	r4, Y+16	; 0x10
    33fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    33fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    33fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3400:	8c 84       	ldd	r8, Y+12	; 0x0c
    3402:	9b 84       	ldd	r9, Y+11	; 0x0b
    3404:	aa 84       	ldd	r10, Y+10	; 0x0a
    3406:	b9 84       	ldd	r11, Y+9	; 0x09
    3408:	c8 84       	ldd	r12, Y+8	; 0x08
    340a:	df 80       	ldd	r13, Y+7	; 0x07
    340c:	ee 80       	ldd	r14, Y+6	; 0x06
    340e:	fd 80       	ldd	r15, Y+5	; 0x05
    3410:	0c 81       	ldd	r16, Y+4	; 0x04
    3412:	1b 81       	ldd	r17, Y+3	; 0x03
    3414:	aa 81       	ldd	r26, Y+2	; 0x02
    3416:	b9 81       	ldd	r27, Y+1	; 0x01
    3418:	ce 0f       	add	r28, r30
    341a:	d1 1d       	adc	r29, r1
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	ed 01       	movw	r28, r26
    3428:	08 95       	ret

0000342a <__ftoa_engine>:
    342a:	28 30       	cpi	r18, 0x08	; 8
    342c:	08 f0       	brcs	.+2      	; 0x3430 <__ftoa_engine+0x6>
    342e:	27 e0       	ldi	r18, 0x07	; 7
    3430:	33 27       	eor	r19, r19
    3432:	da 01       	movw	r26, r20
    3434:	99 0f       	add	r25, r25
    3436:	31 1d       	adc	r19, r1
    3438:	87 fd       	sbrc	r24, 7
    343a:	91 60       	ori	r25, 0x01	; 1
    343c:	00 96       	adiw	r24, 0x00	; 0
    343e:	61 05       	cpc	r22, r1
    3440:	71 05       	cpc	r23, r1
    3442:	39 f4       	brne	.+14     	; 0x3452 <__ftoa_engine+0x28>
    3444:	32 60       	ori	r19, 0x02	; 2
    3446:	2e 5f       	subi	r18, 0xFE	; 254
    3448:	3d 93       	st	X+, r19
    344a:	30 e3       	ldi	r19, 0x30	; 48
    344c:	2a 95       	dec	r18
    344e:	e1 f7       	brne	.-8      	; 0x3448 <__ftoa_engine+0x1e>
    3450:	08 95       	ret
    3452:	9f 3f       	cpi	r25, 0xFF	; 255
    3454:	30 f0       	brcs	.+12     	; 0x3462 <__ftoa_engine+0x38>
    3456:	80 38       	cpi	r24, 0x80	; 128
    3458:	71 05       	cpc	r23, r1
    345a:	61 05       	cpc	r22, r1
    345c:	09 f0       	breq	.+2      	; 0x3460 <__ftoa_engine+0x36>
    345e:	3c 5f       	subi	r19, 0xFC	; 252
    3460:	3c 5f       	subi	r19, 0xFC	; 252
    3462:	3d 93       	st	X+, r19
    3464:	91 30       	cpi	r25, 0x01	; 1
    3466:	08 f0       	brcs	.+2      	; 0x346a <__ftoa_engine+0x40>
    3468:	80 68       	ori	r24, 0x80	; 128
    346a:	91 1d       	adc	r25, r1
    346c:	df 93       	push	r29
    346e:	cf 93       	push	r28
    3470:	1f 93       	push	r17
    3472:	0f 93       	push	r16
    3474:	ff 92       	push	r15
    3476:	ef 92       	push	r14
    3478:	19 2f       	mov	r17, r25
    347a:	98 7f       	andi	r25, 0xF8	; 248
    347c:	96 95       	lsr	r25
    347e:	e9 2f       	mov	r30, r25
    3480:	96 95       	lsr	r25
    3482:	96 95       	lsr	r25
    3484:	e9 0f       	add	r30, r25
    3486:	ff 27       	eor	r31, r31
    3488:	ea 5e       	subi	r30, 0xEA	; 234
    348a:	fe 4f       	sbci	r31, 0xFE	; 254
    348c:	99 27       	eor	r25, r25
    348e:	33 27       	eor	r19, r19
    3490:	ee 24       	eor	r14, r14
    3492:	ff 24       	eor	r15, r15
    3494:	a7 01       	movw	r20, r14
    3496:	e7 01       	movw	r28, r14
    3498:	05 90       	lpm	r0, Z+
    349a:	08 94       	sec
    349c:	07 94       	ror	r0
    349e:	28 f4       	brcc	.+10     	; 0x34aa <__ftoa_engine+0x80>
    34a0:	36 0f       	add	r19, r22
    34a2:	e7 1e       	adc	r14, r23
    34a4:	f8 1e       	adc	r15, r24
    34a6:	49 1f       	adc	r20, r25
    34a8:	51 1d       	adc	r21, r1
    34aa:	66 0f       	add	r22, r22
    34ac:	77 1f       	adc	r23, r23
    34ae:	88 1f       	adc	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	06 94       	lsr	r0
    34b4:	a1 f7       	brne	.-24     	; 0x349e <__ftoa_engine+0x74>
    34b6:	05 90       	lpm	r0, Z+
    34b8:	07 94       	ror	r0
    34ba:	28 f4       	brcc	.+10     	; 0x34c6 <__ftoa_engine+0x9c>
    34bc:	e7 0e       	add	r14, r23
    34be:	f8 1e       	adc	r15, r24
    34c0:	49 1f       	adc	r20, r25
    34c2:	56 1f       	adc	r21, r22
    34c4:	c1 1d       	adc	r28, r1
    34c6:	77 0f       	add	r23, r23
    34c8:	88 1f       	adc	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	66 1f       	adc	r22, r22
    34ce:	06 94       	lsr	r0
    34d0:	a1 f7       	brne	.-24     	; 0x34ba <__ftoa_engine+0x90>
    34d2:	05 90       	lpm	r0, Z+
    34d4:	07 94       	ror	r0
    34d6:	28 f4       	brcc	.+10     	; 0x34e2 <__ftoa_engine+0xb8>
    34d8:	f8 0e       	add	r15, r24
    34da:	49 1f       	adc	r20, r25
    34dc:	56 1f       	adc	r21, r22
    34de:	c7 1f       	adc	r28, r23
    34e0:	d1 1d       	adc	r29, r1
    34e2:	88 0f       	add	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	66 1f       	adc	r22, r22
    34e8:	77 1f       	adc	r23, r23
    34ea:	06 94       	lsr	r0
    34ec:	a1 f7       	brne	.-24     	; 0x34d6 <__ftoa_engine+0xac>
    34ee:	05 90       	lpm	r0, Z+
    34f0:	07 94       	ror	r0
    34f2:	20 f4       	brcc	.+8      	; 0x34fc <__ftoa_engine+0xd2>
    34f4:	49 0f       	add	r20, r25
    34f6:	56 1f       	adc	r21, r22
    34f8:	c7 1f       	adc	r28, r23
    34fa:	d8 1f       	adc	r29, r24
    34fc:	99 0f       	add	r25, r25
    34fe:	66 1f       	adc	r22, r22
    3500:	77 1f       	adc	r23, r23
    3502:	88 1f       	adc	r24, r24
    3504:	06 94       	lsr	r0
    3506:	a9 f7       	brne	.-22     	; 0x34f2 <__ftoa_engine+0xc8>
    3508:	84 91       	lpm	r24, Z
    350a:	10 95       	com	r17
    350c:	17 70       	andi	r17, 0x07	; 7
    350e:	41 f0       	breq	.+16     	; 0x3520 <__ftoa_engine+0xf6>
    3510:	d6 95       	lsr	r29
    3512:	c7 95       	ror	r28
    3514:	57 95       	ror	r21
    3516:	47 95       	ror	r20
    3518:	f7 94       	ror	r15
    351a:	e7 94       	ror	r14
    351c:	1a 95       	dec	r17
    351e:	c1 f7       	brne	.-16     	; 0x3510 <__ftoa_engine+0xe6>
    3520:	ec eb       	ldi	r30, 0xBC	; 188
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	68 94       	set
    3526:	15 90       	lpm	r1, Z+
    3528:	15 91       	lpm	r17, Z+
    352a:	35 91       	lpm	r19, Z+
    352c:	65 91       	lpm	r22, Z+
    352e:	95 91       	lpm	r25, Z+
    3530:	05 90       	lpm	r0, Z+
    3532:	7f e2       	ldi	r23, 0x2F	; 47
    3534:	73 95       	inc	r23
    3536:	e1 18       	sub	r14, r1
    3538:	f1 0a       	sbc	r15, r17
    353a:	43 0b       	sbc	r20, r19
    353c:	56 0b       	sbc	r21, r22
    353e:	c9 0b       	sbc	r28, r25
    3540:	d0 09       	sbc	r29, r0
    3542:	c0 f7       	brcc	.-16     	; 0x3534 <__ftoa_engine+0x10a>
    3544:	e1 0c       	add	r14, r1
    3546:	f1 1e       	adc	r15, r17
    3548:	43 1f       	adc	r20, r19
    354a:	56 1f       	adc	r21, r22
    354c:	c9 1f       	adc	r28, r25
    354e:	d0 1d       	adc	r29, r0
    3550:	7e f4       	brtc	.+30     	; 0x3570 <__ftoa_engine+0x146>
    3552:	70 33       	cpi	r23, 0x30	; 48
    3554:	11 f4       	brne	.+4      	; 0x355a <__ftoa_engine+0x130>
    3556:	8a 95       	dec	r24
    3558:	e6 cf       	rjmp	.-52     	; 0x3526 <__ftoa_engine+0xfc>
    355a:	e8 94       	clt
    355c:	01 50       	subi	r16, 0x01	; 1
    355e:	30 f0       	brcs	.+12     	; 0x356c <__ftoa_engine+0x142>
    3560:	08 0f       	add	r16, r24
    3562:	0a f4       	brpl	.+2      	; 0x3566 <__ftoa_engine+0x13c>
    3564:	00 27       	eor	r16, r16
    3566:	02 17       	cp	r16, r18
    3568:	08 f4       	brcc	.+2      	; 0x356c <__ftoa_engine+0x142>
    356a:	20 2f       	mov	r18, r16
    356c:	23 95       	inc	r18
    356e:	02 2f       	mov	r16, r18
    3570:	7a 33       	cpi	r23, 0x3A	; 58
    3572:	28 f0       	brcs	.+10     	; 0x357e <__ftoa_engine+0x154>
    3574:	79 e3       	ldi	r23, 0x39	; 57
    3576:	7d 93       	st	X+, r23
    3578:	2a 95       	dec	r18
    357a:	e9 f7       	brne	.-6      	; 0x3576 <__ftoa_engine+0x14c>
    357c:	10 c0       	rjmp	.+32     	; 0x359e <__ftoa_engine+0x174>
    357e:	7d 93       	st	X+, r23
    3580:	2a 95       	dec	r18
    3582:	89 f6       	brne	.-94     	; 0x3526 <__ftoa_engine+0xfc>
    3584:	06 94       	lsr	r0
    3586:	97 95       	ror	r25
    3588:	67 95       	ror	r22
    358a:	37 95       	ror	r19
    358c:	17 95       	ror	r17
    358e:	17 94       	ror	r1
    3590:	e1 18       	sub	r14, r1
    3592:	f1 0a       	sbc	r15, r17
    3594:	43 0b       	sbc	r20, r19
    3596:	56 0b       	sbc	r21, r22
    3598:	c9 0b       	sbc	r28, r25
    359a:	d0 09       	sbc	r29, r0
    359c:	98 f0       	brcs	.+38     	; 0x35c4 <__ftoa_engine+0x19a>
    359e:	23 95       	inc	r18
    35a0:	7e 91       	ld	r23, -X
    35a2:	73 95       	inc	r23
    35a4:	7a 33       	cpi	r23, 0x3A	; 58
    35a6:	08 f0       	brcs	.+2      	; 0x35aa <__ftoa_engine+0x180>
    35a8:	70 e3       	ldi	r23, 0x30	; 48
    35aa:	7c 93       	st	X, r23
    35ac:	20 13       	cpse	r18, r16
    35ae:	b8 f7       	brcc	.-18     	; 0x359e <__ftoa_engine+0x174>
    35b0:	7e 91       	ld	r23, -X
    35b2:	70 61       	ori	r23, 0x10	; 16
    35b4:	7d 93       	st	X+, r23
    35b6:	30 f0       	brcs	.+12     	; 0x35c4 <__ftoa_engine+0x19a>
    35b8:	83 95       	inc	r24
    35ba:	71 e3       	ldi	r23, 0x31	; 49
    35bc:	7d 93       	st	X+, r23
    35be:	70 e3       	ldi	r23, 0x30	; 48
    35c0:	2a 95       	dec	r18
    35c2:	e1 f7       	brne	.-8      	; 0x35bc <__ftoa_engine+0x192>
    35c4:	11 24       	eor	r1, r1
    35c6:	ef 90       	pop	r14
    35c8:	ff 90       	pop	r15
    35ca:	0f 91       	pop	r16
    35cc:	1f 91       	pop	r17
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	99 27       	eor	r25, r25
    35d4:	87 fd       	sbrc	r24, 7
    35d6:	90 95       	com	r25
    35d8:	08 95       	ret

000035da <strnlen_P>:
    35da:	fc 01       	movw	r30, r24
    35dc:	05 90       	lpm	r0, Z+
    35de:	61 50       	subi	r22, 0x01	; 1
    35e0:	70 40       	sbci	r23, 0x00	; 0
    35e2:	01 10       	cpse	r0, r1
    35e4:	d8 f7       	brcc	.-10     	; 0x35dc <strnlen_P+0x2>
    35e6:	80 95       	com	r24
    35e8:	90 95       	com	r25
    35ea:	8e 0f       	add	r24, r30
    35ec:	9f 1f       	adc	r25, r31
    35ee:	08 95       	ret

000035f0 <memset>:
    35f0:	dc 01       	movw	r26, r24
    35f2:	01 c0       	rjmp	.+2      	; 0x35f6 <memset+0x6>
    35f4:	6d 93       	st	X+, r22
    35f6:	41 50       	subi	r20, 0x01	; 1
    35f8:	50 40       	sbci	r21, 0x00	; 0
    35fa:	e0 f7       	brcc	.-8      	; 0x35f4 <memset+0x4>
    35fc:	08 95       	ret

000035fe <strnlen>:
    35fe:	fc 01       	movw	r30, r24
    3600:	61 50       	subi	r22, 0x01	; 1
    3602:	70 40       	sbci	r23, 0x00	; 0
    3604:	01 90       	ld	r0, Z+
    3606:	01 10       	cpse	r0, r1
    3608:	d8 f7       	brcc	.-10     	; 0x3600 <strnlen+0x2>
    360a:	80 95       	com	r24
    360c:	90 95       	com	r25
    360e:	8e 0f       	add	r24, r30
    3610:	9f 1f       	adc	r25, r31
    3612:	08 95       	ret

00003614 <fputc>:
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	fb 01       	movw	r30, r22
    361e:	23 81       	ldd	r18, Z+3	; 0x03
    3620:	21 fd       	sbrc	r18, 1
    3622:	03 c0       	rjmp	.+6      	; 0x362a <fputc+0x16>
    3624:	8f ef       	ldi	r24, 0xFF	; 255
    3626:	9f ef       	ldi	r25, 0xFF	; 255
    3628:	2c c0       	rjmp	.+88     	; 0x3682 <fputc+0x6e>
    362a:	22 ff       	sbrs	r18, 2
    362c:	16 c0       	rjmp	.+44     	; 0x365a <fputc+0x46>
    362e:	46 81       	ldd	r20, Z+6	; 0x06
    3630:	57 81       	ldd	r21, Z+7	; 0x07
    3632:	24 81       	ldd	r18, Z+4	; 0x04
    3634:	35 81       	ldd	r19, Z+5	; 0x05
    3636:	42 17       	cp	r20, r18
    3638:	53 07       	cpc	r21, r19
    363a:	44 f4       	brge	.+16     	; 0x364c <fputc+0x38>
    363c:	a0 81       	ld	r26, Z
    363e:	b1 81       	ldd	r27, Z+1	; 0x01
    3640:	9d 01       	movw	r18, r26
    3642:	2f 5f       	subi	r18, 0xFF	; 255
    3644:	3f 4f       	sbci	r19, 0xFF	; 255
    3646:	31 83       	std	Z+1, r19	; 0x01
    3648:	20 83       	st	Z, r18
    364a:	8c 93       	st	X, r24
    364c:	26 81       	ldd	r18, Z+6	; 0x06
    364e:	37 81       	ldd	r19, Z+7	; 0x07
    3650:	2f 5f       	subi	r18, 0xFF	; 255
    3652:	3f 4f       	sbci	r19, 0xFF	; 255
    3654:	37 83       	std	Z+7, r19	; 0x07
    3656:	26 83       	std	Z+6, r18	; 0x06
    3658:	14 c0       	rjmp	.+40     	; 0x3682 <fputc+0x6e>
    365a:	8b 01       	movw	r16, r22
    365c:	ec 01       	movw	r28, r24
    365e:	fb 01       	movw	r30, r22
    3660:	00 84       	ldd	r0, Z+8	; 0x08
    3662:	f1 85       	ldd	r31, Z+9	; 0x09
    3664:	e0 2d       	mov	r30, r0
    3666:	09 95       	icall
    3668:	89 2b       	or	r24, r25
    366a:	e1 f6       	brne	.-72     	; 0x3624 <fputc+0x10>
    366c:	d8 01       	movw	r26, r16
    366e:	16 96       	adiw	r26, 0x06	; 6
    3670:	8d 91       	ld	r24, X+
    3672:	9c 91       	ld	r25, X
    3674:	17 97       	sbiw	r26, 0x07	; 7
    3676:	01 96       	adiw	r24, 0x01	; 1
    3678:	17 96       	adiw	r26, 0x07	; 7
    367a:	9c 93       	st	X, r25
    367c:	8e 93       	st	-X, r24
    367e:	16 97       	sbiw	r26, 0x06	; 6
    3680:	ce 01       	movw	r24, r28
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	1f 91       	pop	r17
    3688:	0f 91       	pop	r16
    368a:	08 95       	ret

0000368c <sprintf>:
    368c:	ae e0       	ldi	r26, 0x0E	; 14
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	ec e4       	ldi	r30, 0x4C	; 76
    3692:	fb e1       	ldi	r31, 0x1B	; 27
    3694:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__prologue_saves__+0x1c>
    3698:	0d 89       	ldd	r16, Y+21	; 0x15
    369a:	1e 89       	ldd	r17, Y+22	; 0x16
    369c:	86 e0       	ldi	r24, 0x06	; 6
    369e:	8c 83       	std	Y+4, r24	; 0x04
    36a0:	1a 83       	std	Y+2, r17	; 0x02
    36a2:	09 83       	std	Y+1, r16	; 0x01
    36a4:	8f ef       	ldi	r24, 0xFF	; 255
    36a6:	9f e7       	ldi	r25, 0x7F	; 127
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
    36ac:	ae 01       	movw	r20, r28
    36ae:	47 5e       	subi	r20, 0xE7	; 231
    36b0:	5f 4f       	sbci	r21, 0xFF	; 255
    36b2:	6f 89       	ldd	r22, Y+23	; 0x17
    36b4:	78 8d       	ldd	r23, Y+24	; 0x18
    36b6:	ce 01       	movw	r24, r28
    36b8:	01 96       	adiw	r24, 0x01	; 1
    36ba:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vfprintf>
    36be:	ef 81       	ldd	r30, Y+7	; 0x07
    36c0:	f8 85       	ldd	r31, Y+8	; 0x08
    36c2:	e0 0f       	add	r30, r16
    36c4:	f1 1f       	adc	r31, r17
    36c6:	10 82       	st	Z, r1
    36c8:	2e 96       	adiw	r28, 0x0e	; 14
    36ca:	e4 e0       	ldi	r30, 0x04	; 4
    36cc:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__epilogue_restores__+0x1c>

000036d0 <__ultoa_invert>:
    36d0:	fa 01       	movw	r30, r20
    36d2:	aa 27       	eor	r26, r26
    36d4:	28 30       	cpi	r18, 0x08	; 8
    36d6:	51 f1       	breq	.+84     	; 0x372c <__ultoa_invert+0x5c>
    36d8:	20 31       	cpi	r18, 0x10	; 16
    36da:	81 f1       	breq	.+96     	; 0x373c <__ultoa_invert+0x6c>
    36dc:	e8 94       	clt
    36de:	6f 93       	push	r22
    36e0:	6e 7f       	andi	r22, 0xFE	; 254
    36e2:	6e 5f       	subi	r22, 0xFE	; 254
    36e4:	7f 4f       	sbci	r23, 0xFF	; 255
    36e6:	8f 4f       	sbci	r24, 0xFF	; 255
    36e8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ea:	af 4f       	sbci	r26, 0xFF	; 255
    36ec:	b1 e0       	ldi	r27, 0x01	; 1
    36ee:	3e d0       	rcall	.+124    	; 0x376c <__ultoa_invert+0x9c>
    36f0:	b4 e0       	ldi	r27, 0x04	; 4
    36f2:	3c d0       	rcall	.+120    	; 0x376c <__ultoa_invert+0x9c>
    36f4:	67 0f       	add	r22, r23
    36f6:	78 1f       	adc	r23, r24
    36f8:	89 1f       	adc	r24, r25
    36fa:	9a 1f       	adc	r25, r26
    36fc:	a1 1d       	adc	r26, r1
    36fe:	68 0f       	add	r22, r24
    3700:	79 1f       	adc	r23, r25
    3702:	8a 1f       	adc	r24, r26
    3704:	91 1d       	adc	r25, r1
    3706:	a1 1d       	adc	r26, r1
    3708:	6a 0f       	add	r22, r26
    370a:	71 1d       	adc	r23, r1
    370c:	81 1d       	adc	r24, r1
    370e:	91 1d       	adc	r25, r1
    3710:	a1 1d       	adc	r26, r1
    3712:	20 d0       	rcall	.+64     	; 0x3754 <__ultoa_invert+0x84>
    3714:	09 f4       	brne	.+2      	; 0x3718 <__ultoa_invert+0x48>
    3716:	68 94       	set
    3718:	3f 91       	pop	r19
    371a:	2a e0       	ldi	r18, 0x0A	; 10
    371c:	26 9f       	mul	r18, r22
    371e:	11 24       	eor	r1, r1
    3720:	30 19       	sub	r19, r0
    3722:	30 5d       	subi	r19, 0xD0	; 208
    3724:	31 93       	st	Z+, r19
    3726:	de f6       	brtc	.-74     	; 0x36de <__ultoa_invert+0xe>
    3728:	cf 01       	movw	r24, r30
    372a:	08 95       	ret
    372c:	46 2f       	mov	r20, r22
    372e:	47 70       	andi	r20, 0x07	; 7
    3730:	40 5d       	subi	r20, 0xD0	; 208
    3732:	41 93       	st	Z+, r20
    3734:	b3 e0       	ldi	r27, 0x03	; 3
    3736:	0f d0       	rcall	.+30     	; 0x3756 <__ultoa_invert+0x86>
    3738:	c9 f7       	brne	.-14     	; 0x372c <__ultoa_invert+0x5c>
    373a:	f6 cf       	rjmp	.-20     	; 0x3728 <__ultoa_invert+0x58>
    373c:	46 2f       	mov	r20, r22
    373e:	4f 70       	andi	r20, 0x0F	; 15
    3740:	40 5d       	subi	r20, 0xD0	; 208
    3742:	4a 33       	cpi	r20, 0x3A	; 58
    3744:	18 f0       	brcs	.+6      	; 0x374c <__ultoa_invert+0x7c>
    3746:	49 5d       	subi	r20, 0xD9	; 217
    3748:	31 fd       	sbrc	r19, 1
    374a:	40 52       	subi	r20, 0x20	; 32
    374c:	41 93       	st	Z+, r20
    374e:	02 d0       	rcall	.+4      	; 0x3754 <__ultoa_invert+0x84>
    3750:	a9 f7       	brne	.-22     	; 0x373c <__ultoa_invert+0x6c>
    3752:	ea cf       	rjmp	.-44     	; 0x3728 <__ultoa_invert+0x58>
    3754:	b4 e0       	ldi	r27, 0x04	; 4
    3756:	a6 95       	lsr	r26
    3758:	97 95       	ror	r25
    375a:	87 95       	ror	r24
    375c:	77 95       	ror	r23
    375e:	67 95       	ror	r22
    3760:	ba 95       	dec	r27
    3762:	c9 f7       	brne	.-14     	; 0x3756 <__ultoa_invert+0x86>
    3764:	00 97       	sbiw	r24, 0x00	; 0
    3766:	61 05       	cpc	r22, r1
    3768:	71 05       	cpc	r23, r1
    376a:	08 95       	ret
    376c:	9b 01       	movw	r18, r22
    376e:	ac 01       	movw	r20, r24
    3770:	0a 2e       	mov	r0, r26
    3772:	06 94       	lsr	r0
    3774:	57 95       	ror	r21
    3776:	47 95       	ror	r20
    3778:	37 95       	ror	r19
    377a:	27 95       	ror	r18
    377c:	ba 95       	dec	r27
    377e:	c9 f7       	brne	.-14     	; 0x3772 <__ultoa_invert+0xa2>
    3780:	62 0f       	add	r22, r18
    3782:	73 1f       	adc	r23, r19
    3784:	84 1f       	adc	r24, r20
    3786:	95 1f       	adc	r25, r21
    3788:	a0 1d       	adc	r26, r0
    378a:	08 95       	ret

0000378c <_exit>:
    378c:	f8 94       	cli

0000378e <__stop_program>:
    378e:	ff cf       	rjmp	.-2      	; 0x378e <__stop_program>
